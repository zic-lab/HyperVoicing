Imports Midi, Midi.Clock
Imports Microsoft.Win32 '
Imports System.IO
Imports System.Drawing
Imports System.Media
Imports System.ComponentModel
Imports System
Imports System.Collections
Imports System.Text
Imports System.Security.Policy
Imports System.Reflection
Imports System.Security
Imports System.Security.Permissions
Imports System.Runtime.Hosting
Imports Microsoft.VisualBasic.ApplicationServices
Imports HyperVoicing.Form1.TamponInfoGrid1
Imports HyperVoicing.Form1.TamponEdition
Imports HyperVoicing.Module1
Imports HyperVoicing.PianoRoll
Imports System.Threading

' Imports MidifileX
' variables communes au module form1
' **********************************

'Tempo_StopJeuAccord.Interval = TempoEcouteAccord
'Tempo_StopJeuAccord.Enabled = True ' démarrer la tempo d'arrêt de jeu de l'accord
'Tempo_StopJeuAccord.Start()


Public Class Form1
    Private ValNoteCubase As New List(Of String) From {
                   "C-2", "C#-2", "D-2", "D#-2", "E-2", "F-2", "F#-2", "G-2", "G#-2", "A-2", "A#-2", "B-2",
                   "C-1", "C#-1", "D-1", "D#-1", "E-1", "F-1", "F#-1", "G-1", "G#-1", "A-1", "A#-1", "B-1",
                   "C0", "C#0", "D0", "D#0", "E0", "F0", "F#0", "G0", "G#0", "A0", "A#0", "B0",
                    "C1", "C#1", "D1", "D#1", "E1", "F1", "F#1", "G1", "G#1", "A1", "A#1", "B1",
                    "C2", "C#2", "D2", "D#2", "E2", "F2", "F#2", "G2", "G#2", "A2", "A#2", "B2",
                    "C3", "C#3", "D3", "D#3", "E3", "F3", "F#3", "G3", "G#3", "A3", "A#3", "B3",
                    "C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4", "G#4", "A4", "A#4", "B4",
                    "C5", "C#5", "D5", "D#5", "E5", "F5", "F#5", "G5", "G#5", "A5", "A#5", "B5",
                    "C6", "C#6", "D6", "D#6", "E6", "F6", "F#6", "G6", "G#6", "A6", "A#6", "B6",
                    "C7", "C#7", "D7", "D#7", "E7", "F7", "F#7", "G7", "G#7", "A7", "A#7", "B7",
                    "C8", "C#8", "D8", "D#8", "E8", "F8", "F#8", "G8"}

    ' Notes séparées par des " " entre note et numéro
    Private ValNoteCubase_2 As New List(Of String) From {
                   "C -2", "C# -2", "D -2", "D# -2", "E -2", "F -2", "F# -2", "G -2", "G# -2", "A -2", "A# -2", "B -2",
                   "C -1", "C# -1", "D -1", "D# -1", "E -1", "F -1", "F# -1", "G -1", "G# -1", "A -1", "A# -1", "B -1",
                   "C 0", "C# 0", "D 0", "D# 0", "E 0", "F 0", "F #0", "G 0", "G# 0", "A 0", "A# 0", "B 0",
                    "C 1", "C# 1", "D 1", "D# 1", "E 1", "F 1", "F# 1", "G 1", "G# 1", "A 1", "A# 1", "B 1",
                    "C 2", "C# 2", "D 2", "D# 2", "E 2", "F 2", "F# 2", "G 2", "G# 2", "A 2", "A# 2", "B 2",
                    "C 3", "C# 3", "D 3", "D# 3", "E 3", "F 3", "F# 3", "G 3", "G# 3", "A 3", "A# 3", "B 3",
                    "C 4", "C# 4", "D 4", "D# 4", "E 4", "F 4", "F# 4", "G 4", "G# 4", "A 4", "A# 4", "B 4",
                    "C 5", "C# 5", "D 5", "D# 5", "E 5", "F 5", "F# 5", "G 5", "G# 5", "A 5", "A# 5", "B 5",
                    "C 6", "C# 6", "D 6", "D# 6", "E 6", "F 6", "F# 6", "G 6", "G# 6", "A 6", "A# 6", "B 6",
                    "C 7", "C# 7", "D 7", "D# 7", "E 7", "F 7", "F# 7", "G 7", "G# 7", "A 7", "A# 7", "B 7",
                    "C 8", "C# 8", "D 8", "D# 8", "E 8", "F 8", "F# 8", "G 8"}

    Class TamponEdition
        Public Enum TGridCours
            Rien = 0
            Grid1 = 1
            Grid2 = 2
            Grid3 = 3
            TabTon = 4
            Piano = 5
        End Enum '
        Public TGrille As TGridCours = TGridCours.Rien

        '
        Public mDeb As Integer
        Public tDeb As Integer
        Public ctDeb As Integer
        '
        Public mFin As Integer
        Public tFin As Integer
        Public ctFin As Integer
        '
    End Class
    Class TamponCopie
        '
        Public Actif As Boolean = False ' appartient à la derniere copie effectuée
        '
        Public Mesure_Effacer As Integer = -1
        '
        Public m As Integer
        Public t As Integer
        Public ct As Integer
        '
        Public Décalage As Integer ' Décalage par rapport à la prmière mesure
        '
        Public Position As String
        Public Marqueur As String
        Public Tonalité As String
        Public Accord As String
        Public Gamme As String
        Public Mode As String
        Public Degré As Integer
        Public Détails As String
        Public Vel As String
        Public Racine As String
        '
        Public Renversement(0 To 4) As String
        Public RenvChoisi As Integer
        Public Octave As String
        Public OctaveChoisie As Integer
        '
        Public EtendreNotes(0 To 5) As String
        Public EtendreChecked(0 To 5) As Boolean
        '
        Public Nb_Items As Integer ' nomnre items de la lsite pour une copie : valeur mise à jour dans le 1er item seulement
        '
    End Class
    Class TamponInfoGrid1
        Public Enum TGrilleCours
            Rien = 0
            Grid1 = 1
            Grid2 = 2
            Grid3 = 3
            TabTon = 4
            Piano = 5
            Grid4 = 6
        End Enum
        Public Sélection As Integer
        Public LigneCours As Integer
        Public Gammes(0 To Module1.nbLignesGrid1 - 1) As String
        Public Marqueurs As String
        Public Grille As TGrilleCours = TGrilleCours.Rien
    End Class

    Public TGrille2 As TGridCours = TGridCours.Rien ' variable utilisée pour mettre à jour Onglet Modulation par  Combobox1 Combobox2

    ' Déclarations nécessaires aux substitutions
    ' ******************************************
    Public Enum OrigSubsti
        Grid2 = 0 ' grille des mesures
        Grid3 = 1 ' grille détaillée  des mesures
    End Enum
    Public mesureSub As String


    ' Variables globales pour le menu Edition
    ' ***************************************
    Dim TCopie As New List(Of TamponCopie)
    Dim TZAnnulationGrid1 As New TamponInfoGrid1
    Dim TZAnnulation As New List(Of TamponCopie)
    '
    Dim OrigineEdition As Module1.GridCours ' donne la grille sur laquelles les actions copier, couper, coller sont effectués
    Dim ZAnnulation_Valide As Boolean = False
    Dim ZAnnulation_FirstCol As Integer
    Class TT
        Public Toctave(0 To 10) As Integer
    End Class
    Structure CaractNote
        Public NoteTessiture As String
        Public NoteAccord As String
    End Structure

    ' Pour Piano
    ' *********
    Dim Tessiture(0 To 31) As CaractNote
    '
    Dim QuiScroll As String
    Public LabelPiano As New List(Of Label)
    Public LabelPianoMidiIn As New List(Of Label)
    Public DicoNotes As New Dictionary(Of String, TT)
    Public Touche_CouleurPréced(0 To 127) As Color
    Dim Num_octave As Integer ' N° octave de la dernière note jouée pour positionner le clavier
    Dim NotesAff As String ' sauvegarde des notes affichées quand elles sont jouées par CTRL + Clic

    ' Pour piano Clavier
    ' ******************
    Public DicPiano As New Dictionary(Of String, Boolean)

    ' Pour Onglet Tonalité
    ' ********************
    Dim TabTonsDegrés As New List(Of Label)
    Dim TabTonsVDegrés As New List(Of Label)
    Dim TabTons As New List(Of Label)
    Dim TabTonsVoisins As New List(Of Label)
    Dim TabTonsVoisinsMarq As New List(Of CheckBox)
    Dim TabTonsTitreMode As New List(Of Label)
    Dim TabTonsVTitreMode As New List(Of Label)
    ' Dim TabTonsVoisins As New List(Of Label)
    ' Dim FiltreCheck As New List(Of CheckBox)
    Dim Mode_Expert As Boolean
    Dim LabelCours As Integer ' N° label sur lequel on fait le clic droit
    '
    ' Pour Onglet Cadences
    ' ********************
    Dim TabCadDegrés As New List(Of Label)
    Dim TabCad As New List(Of Label)
    Dim CAD_LabelCours As Integer ' N° label sur lequel on fait le clic droit
    '
    Dim Mode_Cadence As Modes
    Dim ModeSimple_Cadence As String ' cette variable ne peut contenir que "Maj" ou "Min" mis à jour respectivement dans Combo3.selectedIndex et combo4.selectedIndex

    ' Pour Boutons Zones
    ' ******************
    Dim BoutZone As New List(Of Button)
    Dim BoutZoneCouleur As Color
    '
    ' Caractères Ascii
    ' ****************

    Private ReadOnly NoteMusique As String = "♪" ' alt + 13
    Private ReadOnly NoteMusique2 As String = "♫" ' alt + 14
    Private ReadOnly FlècheDroite As String = "→" ' alt + 26
    Dim NoteMusique3 As Integer = Asc("♫")

    ' Paramètre MIDI
    ' *************
    Public SortieMidi As New List(Of Midi.OutputDevice)
    Public EntréeMidi As New List(Of Midi.InputDevice)
    Public Exception As New List(Of Midi.DeviceException)
    Public ChoixSortieMidi As Integer = 0
    Public ChoixEntréeMidi As Integer = 0
    Public HorlogeMidi As New Midi.Clock(120)
    ' Dim HorlogeMidi As New Midi.Clock(120)
    Public Horloge1 As New Midi.Clock(120)
    Public ExistenceEntréeMidi As Boolean

    '
    Dim Vélocité As Byte = 64
    Dim Canal As Byte = 1
    '
    Dim VarCallBack As String
    '
    Public DicoAccords As New Dictionary(Of String, String)

    Dim ListAccords As New List(Of String)
    Dim ListGammes As New List(Of String)
    Public ListMesures As New List(Of String)
    Dim IndexListAccords As Integer
    Dim IndexListGammes As Integer
    Dim IndexListMesures As Integer

    Dim CallB_Aff_Marqueur As Boolean = False
    Dim CallB_Aff_Tonalité As Boolean = False
    Dim CallB_Aff_Accord As Boolean = False
    Dim CallB_Aff_Gamme As Boolean = False
    Dim CallB_Aff_Mesure As Boolean = False
    Dim CallB_Aff_FIN As Boolean = False
    Dim CallB_Aff_Métronome As Boolean = False
    '
    Dim ListNumMesures As New List(Of String) ' Liste utilisée pour afficher les N° de mesures par calback CallB_Aff_Mesure /méthode appelée EVT_NumMesures
    Dim ListNumAcc As New List(Of String)
    '
    Dim AccordAEtéJoué As Boolean = False
    Dim AccordAEtéJoué1 As String = "Non"
    Dim AccordAEtéJoué2 As String = "Non"
    Dim AccordAEtéJoué3 As String = "Non"
    '
    Dim AccordAEtéJoué_Ext As Boolean = False

    Dim AccordAEtéAff As Boolean = False

    '
    Dim GammeAEtéJouée As Boolean = False

    Dim NoteAEtéJouée As Boolean = False
    Dim NoteCourante As Byte = 255
    Dim MesureCourante As Integer

    Dim ArrêterTimer As Boolean = False

    Dim AccordJouerPiano As New NotesJouéesPiano
    Dim NoteJouerPIano_OLdbackcolor As Color
    Dim NoteJouerPiano_OldTextNote As String
    '
    Dim OrigineAccord As Modes = Modes.Rien
    Dim Cad_OrigineAccord As Modes = Modes.Rien
    Public DerGridCliquée As GridCours = GridCours.Rien
    '
    Dim AccordMarqué As String = ""
    Dim AccordMarquéVoisin As String = ""
    '
    Dim Numérateur As Integer
    Dim Dénominateur As Integer
    '
    Dim HelpOuvert As Boolean = False
    '
    ' Propriétés de l'Entrée des accords en glisser/déposer
    ' *****************************************************
    Public Entrée_Accord As String
    Public Entrée_Gamme As String
    Public Entrée_Tonalité As String
    Public Entrée_Mode As String
    Public Entrée_Degré As String
    Public Entrée_Position As String
    '
    Dim LigneCoursGrid5 As Integer = 0 ' pour onglet modulation
    Dim Lab_1 As String
    Dim Lab_2 As String
    '    '
    ' Détermination des gammes communes
    ' *********************************
    Dim TabGammesCom As New List(Of List(Of String))
    Dim GammesCom As New List(Of String)
    '
    ' Détermination de l'entrée Majeure ou mineur
    ' *******************************************
    Dim OrigineTona As String ' valeur = Maj ou min
    '
    ' Informations sur le fichier chargé en cours (mis à jour dans "Ouvrir")
    ' **********************************************************************
    ' Résumé des chemin de fichiers utilisés
    ' ======================================
    ' CheminFichierOuvrir  ' ouverture fichier *.zic3
    ' CheminFichierEnreg   ' enregistrement fichier *.zic3
    ' CheminFichierMIDI    ' export des accords au format MIDI *.mid
    ' CheminFichierCalques ' export calque MIDI *.mid
    ' CheminMarqueursMIDI  ' export des marqueurs MIDI *.mid

    Public CheminFichierOuvrir As String = ""
    Public FichierOuvrir As String = ""

    Public CheminFichierEnreg As String = ""
    Public FichierEnreg As String = ""

    Public CheminFichierMIDI As String = ""
    Public FichierMIDI As String = ""
    '
    Public FichierExportDoc As String = ""

    Public CheminFichierCalques As String = ""
    Public FichierCalques As String = ""
    Public CheminMarqueursMIDI As String = ""
    Public CheminFichierExportDoc As String = ""
    Public IndicateurEnreg As Boolean = False
    Public NomFichier As String = ""
    Dim FermetureParQuitter As Boolean = False

    '
    ' Jouer un Accord sur une grille
    ' ******************************
    Dim ArrêterAccord As Boolean = False
    '
    ' Paramètres de préférences
    ' *************************
    Dim TempoEcouteAccord As Integer = 1850 ' ms
    '
    ' Paramètre pour le métronome
    ' ***************************
    Dim Beat78 As Boolean = True ' pour mesure 7/8

    ' Variable associée à Det_Présence_Marqueur
    ' *****************************************
    Dim Présence_Marqueur As Boolean = False
    '
    ' Onglet en cours
    ' ***************
    Public OngletCours As Integer
    '
    ' Tempo_Aff_MidiIn
    ' ****************
    Dim N_Note As Byte = 0
    Dim AfficherNote As Boolean = False
    '
    ' Sauvegarde de mousecol dans les évènements mousUp ou MouseDown
    ' **************************************************************
    Dim SauveMouseColGrid2 As Integer
    Dim SauveMouseColGrid3 As Integer
    ' Variable globale pour entréer sur clic fichier zic3
    ' ***************************************************
    Dim FichierEntréSurClic As String
    '
    ' Flag affichage des modes grecs
    ' 
    Dim FlagMode As Integer
    'Dim RepèreEcriture As String ' utilisé pour restitution des données en mode étendu (Ecriture_Entrée_Dans_Compogrid)


    ' Variables pour détermination gammes jouables sur accords (2e algorithm)
    ' ***********************************************************************
    Dim LGamMaj As New List(Of String)
    Dim LGamMinH As New List(Of String)
    Dim LGamMinM As New List(Of String)
    Dim LGamMajH As New List(Of String)
    Dim LGamPentaMin As New List(Of String)
    Dim LGamBlues As New List(Of String)

    ' Variables pour Ecoute rapide
    ' ****************************

    Dim LongueurCroche_ms As Integer
    Class StandLigne
        Public NLigne As Integer
        Public Position As String
        Public Marqueur As String
        Public Tonalité As String
        Public Accord As String
        Public Gamme As String
    End Class
    Dim LCaractLigne As New List(Of StandLigne)
    Dim Couleur As Color
    Dim SENSGamme As String = "Monter"
    Dim NotesAJouer As String
    Dim tbl_NotesOnG() As String
    Dim tbl_NotesOffG() As Byte
    '
    Dim tbl_NotesOnA() As String
    Dim tbl_NotesOffA() As Byte
    '
    Dim EnvAccord As Boolean
    Dim EnvGamme As Boolean

    ' Variable pour accords impactés
    ' ******************************
    Dim IndexPréced As Integer
    Public Structure AccImpact
        Dim Notes As String
        Dim Accord As String
        Dim Position As String
        Dim ligne As Integer
    End Structure
    ' Onglet tabton Voisins
    ' *********************
    ' position du curseur de désignation de Do Majeur ou La Mineur
    Public Enum PosCur
        Haut = 0
        Bas = 1
    End Enum
    Dim PositionCurs As PosCur = PosCur.Haut
    Dim AjoutBas As Integer
    Dim AjoutBas2 As Integer
    Class Transit
        Public Mode As New List(Of String)
        Public Notes_T As New List(Of String)
        Public Origines_N As New Dictionary(Of String, String)
    End Class
    Dim Transitions As New List(Of Transit)
    Enum Ty_Extension
        Tonalités
        Accords
        Gammes
        Modes
        Transit
        Recherche
    End Enum
    Dim Etat_Extension As Ty_Extension

    ' VARIABLES POUR INSERTION PianoRoll, Drum et MIX
    ' ***********************************************
    Public OngletCours_Edition As Integer = 0 ' utilisé dans pianoroll (donc Public)
    Public SousCas_OngletCours_Edition As Integer = 0 ' utilisé dans pianoroll (donc Public)

    Public PisteSolo As Integer = -1
    Public PisteSolo2 As Integer = -1 ' ne pas supprimer : utilisé dans la nouvelle table de mixage
    Public SoloCours2 As Boolean = False
    Public CanMidiCours As Integer = -1
    '
    Public ValCompress As Integer = -1   ' Variable Compression dans le mixeur




    ' Utilisation d'une liste d'objet  PianoRoll
    ' ******************************************
    Public listPIANOROLL As New List(Of PianoRoll)
    Public PIANOROLLChargé As New List(Of Boolean)
    Public PIANOROLLNPiste As New List(Of Integer)
    Dim PIANOROLLNPréced As Integer = -1
    ' création yable de Mixage
    Public Mix As New Mixage
    '  Création DrumEdit
    Public Drums As New DrumEdit(9)
    '
    ' Variable pour utilisation des Accents (<-- sans doute à supprimer)
    ' ******************************************************************
    Public Accent1_3 As Boolean = True
    ' Variable pour liste des racines dans le CompoGrid
    ' *************************************************
    Dim Tracine As New List(Of String) ' maj dans load
    Dim OK_KeyDown As Boolean = True ' pour incrémentation/décrémentation des racines (évite les répétitions par appui continu)
    '
    ' STACKING : Variables graphique de Stack Mode
    ' *********************************
    Dim PRG As New List(Of System.Windows.Forms.ComboBox)
    Dim VOLSTACK As New List(Of NumericUpDown)
    Dim PAN As New List(Of NumericUpDown)
    Dim MUTEVOICE As New List(Of CheckBox)
    Dim NOMSON As New List(Of TextBox)
    Dim CANAUX As New List(Of NumericUpDown)
    Dim OCT As New List(Of NumericUpDown)
    Dim VEL As New List(Of NumericUpDown)

    ' MODULATION 
    ' **********
    Public LabModulat As New List(Of Label)
    Public RadioModulat As New List(Of RadioButton)

    Dim ligneModulat As Integer
    '

    ' SUBSTITUTION
    ' ************
    Public LabSubsti As New List(Of Label)
    Public EventhSubsti(0 To 3) As EventH

    ' Variables pour Glisser Déposer
    ' ******************************
    Dim Valeur_Drag As String = ""
    Dim Colonne_Drag As Integer = -1
    Dim Ligne_Drag As Integer = -1
    Dim Flag_EcrDragDrop As Boolean = False
    Dim MouseIsDown As Boolean = False
    Public Enum TGridDest
        Rien = 0
        Grid2 = 1
        Grid3 = 2
    End Enum
    Dim GridDest As TGridDest

    ' Etendre/Réduire le CompoGrid
    ' ****************************
    Dim BoutEtendu As Boolean = False



    ' CREATION ONGLET MODES
    ' *********************
    Dim MPanel1 As New Panel
    Dim MListPiano As New List(Of Label)
    Dim MEtiq1 As New List(Of Label)
    Dim MListGamAcc As New List(Of Label)
    Dim MComboTyAcc As New System.Windows.Forms.ComboBox ' combo pour liste 3/4 accords
    Dim MComboModes As New System.Windows.Forms.ComboBox ' combo pour liste des modes
    Dim MLabModes As New Label
    Dim MComboMHarm As New System.Windows.Forms.ComboBox ' combo pour liste des modes
    Dim MLabHarm As New Label
    Dim MComboMMel As New System.Windows.Forms.ComboBox ' combo pour liste des modes
    Dim MLabMel As New Label
    Dim MComboMSynth As New System.Windows.Forms.ComboBox ' combo pour liste des modes
    Dim MLabSynth As New Label
    Dim MLabSéparation As New Label
    Dim MLabTon As New Label
    Dim MLabt As New Label
    Dim MLabNomG As New Label
    Dim MSauvCouleur As Color
    Dim Mjouernote As Boolean = False
    Dim LChiff As New List(Of String)
    Dim MLresult3 As New List(Of String)
    Dim MLresult4 As New List(Of String)
    Dim MLresult5 As New List(Of String)
    Dim MGrid1 As New FlexCell.Grid
    Dim MBufClip As String
    Dim MDicModes As New Dictionary(Of String, String) From
{
    {"Maj", "0 2 4 5 7 9 11"},
    {"MinH", "0 2 3 5 7 8 11"},
    {"MinM", "0 2 3 5 7 9 11"},
    {"MajH", "0 2 3 5 7 8 11"},
    {"Dorien", "0 2 3 5 7 9 10"},
    {"Phrygien", "0 1 3 5 7 8 10"},
    {"Lydien", "0 2 4 6 7 9 11"},
    {"MixoLydien", "0 2 4 5 7 9 10"},
    {"Eolien", "0 2 3 5 7 8 10"},
    {"Locrien", "0 1 3 6 7 9 11"},
    {"Hongrois1", "0 2 3 6 7 8 11"},
    {"Hongrois2", "0 3 4 6 7 9 10"},
    {"Balkanique", "0 1 2 5 7 8 11"},
    {"Tzigane", "0 1 4 6 7 8 11"},
    {"Bertha", "0 1 3 4 6 7 9 10"}
}



    ' **********************************************************************************************************************************
    ' Flag_EcrDragDrop utilisé par les  procédure d'écriture d'un accord par Menu ou par glisser/déposer : 
    '      - procédure d'écriture par déglisser/déposer : Grid2_DragDrop & Grid3_DragDrop --> le flag doit être = true
    '      - procédure d'écriture par menu : Ecr_AccordParMenu --> le flag doit être = true
    '  Ce Flag est utilisé dans les procédures EcritureAccordDsGrid2 et EcritureAccordDsGrid3 appelées par les proc citées précédemment
    ' ***********************************************************************************************************************************



    'Private Sub Test_TryCatch()
    '
    'Dim i, j As Integer
    '    i = 1
    '    i = i - 1
    '    j = 12
    '    j = j / i
    '
    '   End Sub



    ' Variable pour Jouer Grid1,2,3
    ' *****************************
    'Dim MovX As Integer
    'Dim MovY As Integer

    ' Propriétés prédentes des Cellules séletionnées dans Grid2 et Grid3
    ' ******************************************************************
    ' Public Structure CellP
    ' Dim CellRow As Integer
    ' Dim Cellcol As Integer
    ' Dim CellBackColor As System.Drawing.Color
    ' Dim CellForeColor As System.Drawing.Color
    ' Dim Tag_ColActuel As Integer
    ' End Structure
    ' Dim Grid2CellP As CellP
    ' Dim Grid3CellP As CellP

    ' Variables de sélections des 

    ' *********************************************************************************
    ' *********************************************************************************
    Sub Construction(Sig As String, Quantif As Integer)
        Try
            ' Dénominateur/Numérateur : métrique du morceau : 4/4, 3/4,7/8 ...
            ' Le dénominateur ne peut prendre que les valeurs 4 ou 8
            ' Quantif : à la croche => Quantif = 2 ; à la double croche => Quantif = 4
            ' Numérateur As Integer, Dénominateur As Integer
            Dim i As Integer
            Dim j As Integer
            Dim k As Integer
            Dim nbColGrid3 As Integer
            Dim NumColMesure As Integer
            Dim tbl() As String

            'Dim aa As Object
            'Dim a As String
            '
            ' Dimensions du formulaire
            ' ************************
            Me.WindowState = FormWindowState.Normal
            ' Culture par défaut
            ' ******************
            tbl = Split(Sig, "/")
            Numérateur = Val(tbl(0))
            Dénominateur = Val(tbl(1))
            'Sig = Trim(Str(Numérateur) + "/" + Trim(Str(Dénominateur)))
            '
            Métrique.Text = Trim(Sig)
            '
            ' ********************************
            ' GRID1 : Initialisaton de Grid1 *
            ' ********************************
            '
            Grid1.BackColorSel = Color.AntiqueWhite
            Grid1.DisplayFocusRect = False
            Grid1.Cols = Module1.nbColonnesGrid1
            Grid1.Rows = Module1.nbLignesGrid1
            '
            For i = 0 To Grid1.Rows - 1
                Grid1.Row(i).Height = 19 'hauteur des lignes
            Next i
            '
            Grid1.Range(0, 6, nbLignesGrid1 - 1, nbColonnesGrid1 - 1).Alignment = AlignmentEnum.CenterCenter
            Grid1.Range(0, 8, 0, nbColonnesGrid1 - 1).Alignment = AlignmentEnum.CenterCenter ' correpond au titre "Informations Détaillées
            '
            For i = 0 To nbColonnesGrid1 - 1
                Grid1.Column(i).Locked = False
            Next i
            '
            Grid1.Range(0, 10, 0, nbColonnesGrid1 - 1).MergeCells = True
            If Module1.LangueIHM = "fr" Then
                Grid1.Cell(0, 10).Text = "Informations détaillées"
            Else
                Grid1.Cell(0, 10).Text = "Detailed informations"
            End If
            '
            Grid1.FixedRows = 1
            Grid1.FixedCols = 1
            '
            ' Largeur des colonnes de Grid1
            ' *****************************
            LargeursColGrid1()
            '
            ' couleurs de grid1
            ' *****************
            Grid1.Range(1, 1, (nbLignesGrid1 - 1), 1).BackColor = Couleur_Positions 'Color.AliceBlue   ' Positions
            Grid1.Range(1, 2, (nbLignesGrid1 - 1), 2).BackColor = Couleur_Marqueurs 'Color.Beige       ' Marqueurs
            Grid1.Range(1, 3, (nbLignesGrid1 - 1), 3).BackColor = Couleur_Tonalités 'Color.PaleTurquoise     ' Tonalités
            Grid1.Range(1, 4, (nbLignesGrid1 - 1), 4).BackColor = Couleur_Accords 'Color.Khaki        ' Accords
            Grid1.Range(1, 5, (nbLignesGrid1 - 1), 5).BackColor = Couleur_Gammes 'Color.Lavender      ' Gammes
            Grid1.Range(1, 6, (nbLignesGrid1 - 1), 6).BackColor = Couleur_Degrés 'Color.Lavender      ' degrés
            Grid1.Range(1, 7, (nbLignesGrid1 - 1), 7).BackColor = Couleur_Vel
            Grid1.Range(1, 8, (nbLignesGrid1 - 1), 8).BackColor = Couleur_Root
            '
            ' Bordures
            ' ********
            Grid1.Range(0, 0, (nbLignesGrid1 - 1), (nbColonnesGrid1 - 1)).Borders(FlexCell.EdgeEnum.InsideHorizontal) = FlexCell.LineStyleEnum.None
            Grid1.Range(0, 0, (nbLignesGrid1 - 1), (nbColonnesGrid1 - 1)).Borders(FlexCell.EdgeEnum.InsideVertical) = FlexCell.LineStyleEnum.None
            '
            ' Colonne de séparation entre données utiles et données étendues
            ' ***************************************************************
            Grid1.Range(1, 9, (nbLignesGrid1 - 1), 9).Borders(FlexCell.EdgeEnum.InsideVertical) = FlexCell.LineStyleEnum.None
            Grid1.Range(1, 9, (nbLignesGrid1 - 1), 9).BackColor = Color.LightBlue
            Grid1.Range(0, 9, 0, nbColonnesGrid1 - 1).BackColor = Color.LightBlue 'Color.LemonChiffon
            Grid1.Range(1, (nbColonnesGrid1 - 1), (nbLignesGrid1 - 1), (nbColonnesGrid1 - 1)).BackColor = Color.White 'LightGoldenrodYellow

            '
            Grid1.SelectionMode = FlexCell.SelectionModeEnum.Free 'SelectionModeContrants.cellSelectionNone
            Grid1.ScrollBars = FlexCell.ScrollBarsEnum.Vertical '
            '
            Grid1.BoldFixedCell = False
            '
            ' Barre de sélection
            Label32.Visible = True
            Label33.Visible = True
            '
            For i = 0 To nbColonnesGrid1 - 1
                Grid1.Column(i).Alignment = FlexCell.AlignmentEnum.LeftCenter
            Next
            '
            Grid1.Column(7).Alignment = FlexCell.AlignmentEnum.CenterCenter ' pour le titre "Information détaillée"

            Grid1.Column(nbColonnesGrid1 - 1).Locked = False ' colonne des cases à cocher
            'Grid1.Column(nbColonnesGrid1 - 1).CellType = FlexCell.CellTypeEnum.CheckBox
            CheckBoxTout.Checked = False ' checkbox de sélection de toutes les autres dans grid1
            '
            Grid1.DisplayRowArrow = True
            '
            Grid1.MultiSelect = True ' multi sélection pas possible dans grid1
            '
            'Grid1.ReadonlyFocusRect = FlexCell.FocusRectEnum.Solid

            For i = 0 To nbColonnesGrid1 - 1
                'If i <> 2 Then
                Grid1.Column(i).Locked = True
                'End If
            Next i
            '
            Grid1.Column(7).Locked = False
            '
            ' mise à jour du Do par défaut dans la 1ere mesure de grid1 
            ' *********************************************************

            Grid1.Cell(1, 3).Text = "C Maj" 'TableEventH(1, 1, 1).Tonalité
                Grid1.Cell(1, 4).Text = "C" 'TableEventH(1, 1, 1).Accord
                Grid1.Cell(1, 5).Text = "C Maj" 'TableEventH(1, 1, 1).Gamme

            '
            Grid1.Cell(1, 7).Text = Vol.Value.ToString ' vélocité
            Grid1.Cell(1, ColRacine).Text = RacineDéfaut
            '
            Grid1.Range(1, 1, 1, ColRacine).ForeColor = Color.White
            Grid1.Range(1, 1, 1, ColRacine).BackColor = Color.Red ' 1ere ligne en rouge
            '
            Dim s1 As New Size With {.Width = Grid1Largeur, .Height = 475}
            Grid1.Size = s1


            ' *********************************************
            ' GRID2 : Initialisaton de Grid2 : navigateur *
            ' *********************************************
            '
            Grid2.AllowDrop = True ' autorise le glisser/déposer dans la grille grid2 (la source est tabton.item(i).text)
            '
            Grid2.BackColorActiveCellSel = Color.LightSkyBlue
            Grid2.BackColorSel = Color.LightSkyBlue


            Grid2.Cols = nbMesures + 12
            Grid2.Rows = 2
            '
            Grid2.FixedCols = 1
            '
            Grid2.Column(0).Width = 60
            For i = 1 To Grid2.Cols - 1
                Grid2.Column(i).Width = 60
                Grid2.Cell(0, i).Text = Str(i)
                Grid2.Cell(1, i).Text = ""
                Grid2.Column(i).Locked = True
            Next i
            '
            Grid2.FixedRows = 1
            Grid2.Row(0).Height = 14
            Grid2.Row(1).Height = 19
            '
            Grid2.Range(0, 0, 1, (nbMesures - 1)).Borders(FlexCell.EdgeEnum.InsideHorizontal) = FlexCell.LineStyleEnum.Thin
            Grid2.Range(0, 0, 1, (nbMesures - 1)).Borders(FlexCell.EdgeEnum.InsideVertical) = FlexCell.LineStyleEnum.Thin
            Grid2.Range(0, 0, 1, (nbMesures - 1)).Alignment = FlexCell.AlignmentEnum.CenterCenter
            '
            Grid2.SelectionMode = FlexCell.SelectionModeEnum.ByColumn
            Grid2.ScrollBars = FlexCell.ScrollBarsEnum.Horizontal
            '
            Grid2.BoldFixedCell = False
            '
            Grid2.AutoRedraw = False
            For i = 0 To nbMesures
                Grid2.Cell(0, i).Locked = False
                Grid2.Cell(0, i).BackColor = Color.Beige
                Grid2.Cell(0, i).Locked = True
            Next i
            '
            For i = 2 To nbMesures
                Grid2.Cell(1, i).Locked = False
                Grid2.Cell(1, i).BackColor = Color.White
                Grid2.Cell(1, i).Locked = True
            Next i
            '
            Grid2.Refresh()
            Grid2.AutoRedraw = True
            Grid2.FixedRows = 1

            ' colorisation en gris des mesures non utilisées dans grid2
            For i = 1 To Grid2.Rows - 1
                Grid2.Range(i, (nbMesures) + 1, i, Grid2.Cols - 1).BackColor = Color.Gray
                Grid2.Range(i, (nbMesures) + 1, i, Grid2.Cols - 1).ForeColor = Color.Gainsboro
            Next i
            '
            ' *****************************************************************************
            ' GRID3 : Initialisaton de Grid3  saisie des eventH à l'intérieur des mesures *
            ' *****************************************************************************
            ' 

            Grid3.AllowDrop = True ' autorise le glisser/déposer dans la grille grid3 (la source est tabton.item(i).text)
            '
            Grid3.ScrollBars = FlexCell.ScrollBarsEnum.Horizontal
            nbColGrid3 = ColonnesPourSignature(Numérateur, Dénominateur, 2)
            Grid3.Cols = nbColGrid3
            Grid3.Rows = 3 ' La 1ere ligne fixe en gris est réduite à une hauteur de 0
            '
            Grid3.FixedRows = 1
            Grid3.FixedCols = 1
            '
            Grid3.Row(0).Height = 0
            '
            Grid3.Column(0).Width = 60
            For i = 1 To Grid3.Rows - 1
                Grid3.Cell(i, 0).Alignment = FlexCell.AlignmentEnum.LeftCenter
            Next i
            '
            i = ColonnesUnités(Dénominateur, Quantif) ' nombre de colonnes pour une unité
            nbColonnesGrid3ParMesure = (Numérateur * i) ' nombre de colonnes dans 1 mesure
            nbColonnesGrid3 = nbMesures * nbColonnesGrid3ParMesure
            '
            Grid3Zoom1()
            '
            Grid3.SelectionMode = FlexCell.SelectionModeEnum.ByCell
            Grid3.ScrollBars = FlexCell.ScrollBarsEnum.Horizontal

            ' couleurs des lignes
            Grid3.Range(1, 1, 1, ((nbMesures * nbColonnesGrid3ParMesure))).BackColor = Couleur_CTemps   ' N° Mesure
            Grid3.Range(2, 1, 2, ((nbMesures * nbColonnesGrid3ParMesure))).BackColor = Couleur_CTemps   ' N° Beat
            '
            'Grid3.Range(3, 1, 3, ((nbMesures * nbColonnesGrid3ParMesure) - 1)).BackColor = Couleur_Marqueurs 'Color.Beige       ' Marqueurs
            'Grid3.Range(4, 1, 4, ((nbMesures * nbColonnesGrid3ParMesure) - 1)).BackColor = Couleur_Tonalités 'Color.PaleTurquoise ' Tonalités
            'Grid3.Range(5, 1, 5, ((nbMesures * nbColonnesGrid3ParMesure) - 1)).BackColor = Couleur_Accords 'Color_NotesAccords 'Color.Khaki          ' Accords
            'Grid3.Range(6, 1, 6, ((nbMesures * nbColonnesGrid3ParMesure) - 1)).BackColor = Couleur_Gammes 'Color.Lavender       ' Gammes
            '

            '
            ' Numérotation des mesures
            ' ************************
            j = -1
            k = 1

            Grid3.AutoRedraw = False
            NumColMesure = 0

            For i = 1 To Grid3.Cols - 1 ' nbColGrid3
                NumColMesure = ComptageColonneMesure(Numérateur, Dénominateur, NumColMesure)
                GrapheTempsFort(Sig, i, NumColMesure)
                '
                If NumColMesure = 1 Then
                    Grid3.Cell(1, i).Text = Trim(Str(k)) ' le trim est util pour bien placer le chiffre à guche dans la cellule
                    'Grid3.Cell(1, i).Alignment = FlexCell.AlignmentEnum.LeftCenter
                    Grid3.Range(1, i, 1, i).BackColor = Couleur_Temps
                    k = k + 1
                End If
            Next i
            '
            ' colorisation en gris des mesures non utilisées dans grid3
            For i = 1 To Grid3.Rows - 1
                Grid3.Range(i, (nbMesures * nbColonnesGrid3ParMesure) + 1, i, Grid3.Cols - 1).BackColor = Color.Gray
                Grid3.Range(i, (nbMesures * nbColonnesGrid3ParMesure) + 1, i, Grid3.Cols - 1).ForeColor = Color.Gainsboro
            Next i
            '
            ' vérouillage des colonnes de numérotation (remarque : la ligne 0 est la igne fixe dont l haueur vaut 0)
            Grid3.Row(0).Locked = False
            Grid3.Row(1).Locked = False
            Grid3.Row(2).Locked = False
            '
            '
            Grid3.Refresh()
            Grid3.AutoRedraw = True
            '
            Grid3.Range(1, 1, 1, 1).SelectCells()
            Grid3.BoldFixedCell = False
            '
            Grid3.MultiSelect = False ' multi sélection pas possible dans grid3
            '
            Grid3.Row(0).Height = 0
            Grid3.Row(1).Height = 19
            Grid3.Row(2).Height = 19
            '
            Grid3.Dock = DockStyle.Fill

            '
            '
            ' ************************************************
            ' Barres de transport  : ancienne et nouvelle    *
            ' ************************************************
            '
            'Début.Minimum = 1
            'Début.Maximum = nbMesuresUtiles
            'Début.Value = 1
            '
            'Transport.Début.Minimum = 1
            'Transport.Début.Maximum = nbMesuresUtiles
            'Transport.Début.Value = 1
            '
            'Terme.Minimum = 1
            'Terme.Maximum = nbMesuresUtiles
            'Terme.Value = nbMesures
            '
            'Transport.Terme.Minimum = 1
            'Transport.Terme.Maximum = nbMesuresUtiles
            'Transport.Terme.Value = nbMesures
            '
            'DébutZ.Text = "---"
            'TermeZ.Text = "---"
            '
            'Tempo.Minimum = 30
            'Tempo.Maximum = 240
            'Tempo.Value = 120
            '
            'Transport.Tempo.Minimum = 30
            'Transport.Tempo.Maximum = 240
            'Transport.Tempo.Value = 120
            ' 
            'GroupBox9.Dock = DockStyle.Fill ' cadre contenant TagsGamme
            TagsGamme.Dock = DockStyle.Fill ' Label des tags des gammes
            TagsGamme.TextAlign = ContentAlignment.MiddleCenter
            TagsGamme.Text = ""
            '
            'LoopNumber.Value = 1
            'Transport.LoopNumber.Value = 1
            '
            'ComboBox8.SelectedIndex = 0
            'Transport.ComboBox8.SelectedIndex = 0
            '
            'Position_Transport()
            '
            '
            ' Init Divereses dans Construction
            ' ********************************
            ' Première mesure par défaut
            ' **************************
            Dim ligne As Integer
            Dim m As Integer
            Dim t As Integer
            Dim ct As Integer


            ligne = 0
            For m = 0 To UBound(TableEventH, 1) '- 1
                For t = 0 To UBound(TableEventH, 2) '- 1
                    For ct = 0 To UBound(TableEventH, 3) '- 1
                        TableEventH(m, t, ct).Ligne = -1
                        TableEventH(m, t, ct).Position = ""
                        TableEventH(m, t, ct).Marqueur = ""
                        TableEventH(m, t, ct).Tonalité = ""
                        TableEventH(m, t, ct).Accord = ""
                        TableEventH(m, t, ct).Gamme = ""
                        TableEventH(m, t, ct).Détails = ""
                        '
                        TableNotesAccords(m, t, ct) = "" ' table contenant les notes calculées par l'auto voicing
                        'End If
                    Next ct
                Next t
            Next m
            '
            TableNotesAccords(1, 1, 1) = "c2 e2 g2" ' valeurs de l'accord par defaut en mesure 1
            '
            '
            TableEventH(1, 1, 1).Position = "1.1.1"
            TableEventH(1, 1, 1).Tonalité = "C Maj" 'Trim(ComboBox1.Text)
            TableEventH(1, 1, 1).Mode = "C Maj"
            TableEventH(1, 1, 1).Accord = "C" 'Trim(tbl(0))
            TableEventH(1, 1, 1).Gamme = "C Maj"
            TableEventH(1, 1, 1).Marqueur = ""
            TableEventH(1, 1, 1).Degré = 0
            TableEventH(1, 1, 1).Vel = 100
            TableEventH(1, 1, 1).Racine = RacineDéfaut
            TableEventH(1, 1, 1).Ligne = 1
            '
            '
            ' Init table des voicings
            ' ***********************
            For m = 0 To nbMesuresUtiles '- 1
                For t = 0 To 5
                    For ct = 0 To 4 '
                        TableNotesAccordsZ(m, t, ct) = ""
                    Next ct
                Next t
            Next m
            '
            Grid1.Cell(1, 1).Text = TableEventH(1, 1, 1).Position
            '
            Dim bb As String
            bb = "I"
            bb = Trad_DegréRomains(TableEventH(1, 1, 1).Degré)
            Grid1.Cell(1, 6).Text = Trim(bb)
            '
            Grid2.Cell(1, 1).BackColor = Color.Red 'Couleur_Accord_Marqué
            Grid2.Cell(1, 1).ForeColor = Color.White
            '
            ' mise à jour du Do par défaut dans la 1ere mesure de grid2 
            ' *********************************************************
            Grid2.Cell(1, 1).Text = Trim(TableEventH(1, 1, 1).Accord)
            TableNotesAccordsZ(1, 1, 1) = "c2 e2 g2"
            '
            Grid2.Cell(1, 1).Locked = True ' première cellule est bloquée
            '
            Grid3.Cell(1, 1).BackColor = Color.Red 'Couleur_Accord_Marqué
            Grid3.Cell(1, 1).ForeColor = Color.White
            Grid3.Cell(2, 1).BackColor = Couleur_Accord_Grid3 'Couleur_Accord_Marqué
            Grid3.Cell(2, 1).ForeColor = Color.White
            '
            ' *********************************************************
            ' * GRID4 : construcion des list view des gammes communes *
            ' *********************************************************
            '
            ListBox1.Items.Clear() ' liste des accords sélectionnés à droite de la liste des gammes
            '
            Grid4.AutoRedraw = False
            '
            Grid4.Cols = 14
            Grid4.Rows = 100
            Grid4.DefaultFont = New Font("Verdana", 8)
            Grid4.DisplayFocusRect = True
            Grid4.DisplayRowArrow = True

            Grid4.ExtendLastCol = False
            Grid4.DrawMode = FlexCell.DrawModeEnum.Normal
            Grid4.BorderStyle = FlexCell.BorderStyleEnum.FixedSingle

            Grid4.SelectionMode = FlexCell.SelectionModeEnum.ByRow
            Grid4.FixedRows = 0
            Grid4.FixedCols = 1

            Grid4.BackColor1 = Color.FromArgb(231, 235, 247)
            Grid4.BackColor2 = Color.FromArgb(239, 243, 255)

            Grid4.Column(0).Visible = True
            Grid4.Column(0).Width = 40 '19
            Grid4.Column(1).Width = 103
            Grid4.Column(2).Width = 28
            Grid4.Column(3).Width = 28
            Grid4.Column(4).Width = 28
            Grid4.Column(5).Width = 28
            Grid4.Column(6).Width = 28
            Grid4.Column(7).Width = 28
            Grid4.Column(8).Width = 28
            Grid4.Column(9).Width = 28
            Grid4.Column(10).Width = 1200
            '.Column(3).Width = 20
            '
            Grid4.Width = 550
            Grid4.Height = 112
            ' 
            Grid4.Column(1).Locked = True
            Grid4.Column(2).Locked = True

            '
            Grid4.Row(0).Height = 0
            For i = 1 To Grid4.Rows - 1
                Grid4.Row(i).Height = 19
                Grid4.Cell(i, 0).Text = i.ToString
            Next i
            Grid4.AutoRedraw = True
            Grid4.Refresh()
            '
            ' Taille de listbox1 : listBox se trouvant à côté de Grid4 : contient les accords de la sélection
            'ListBox1.Size = New System.Drawing.Size(134, 119)
            '
            ' Boutons au niveau de Grid4 des gammes communes
            ' **********************************************
            Mode_Expert = False

            ' Position de la barre horizontale du piano - - Position du scrolling du Piano
            ' *****************************************************************************
            Panel11.HorizontalScroll.Value = 0
            '

            Grid1.Cell(1, 1).SetFocus()
            Grid2.Cell(1, 1).SetFocus()
            Grid3.Cell(1, 1).SetFocus()
            '
            '
            ' Partie Synthé GM/GS
            ' *******************
            ' lstGS.SelectedIndex = 0 est mis à jour dans fr_culture ou En_culture
            Vol.Value = 100
            Reverb.Value = 64
            Chorus.Value = 0
            ' OnGM.Checked = False --> supprimé
            '
            ListGS.Enabled = True
            Vol.Enabled = True
            Reverb.Enabled = False
            Chorus.Enabled = False
            ButtonSend.Enabled = False


            ' Basse-12 et 4notes
            '
            BasseMoins12.Checked = False
            QuatreNotes.Checked = False
            '
            ComboBox11.SelectedIndex = 0
            ComboBox11.Enabled = False
            ComboBox12.SelectedIndex = 0
            ComboBox12.Enabled = False
            '
            UpDown1.Minimum = 1
            UpDown1.Maximum = nbMesuresUtiles
            UpDown1.Value = 1
            UpDown1.Enabled = False
            '
            UpDown2.Minimum = 1
            UpDown2.Maximum = nbMesuresUtiles
            UpDown2.Value = 1
            UpDown2.Enabled = False
            '
            ' Onglet Paramètres : réglages particulier
            ' ****************************************
            ' racine pour le jeu des accords par CTRL+clic
            For i = 0 To Tracine.Count - 1
                ComboBox10.Items.Add(Tracine(i))
            Next
            ' Paramètre écoute accord par ctrl+clic : dans onglet Paramètres
            ' **************************************************************
            ComboBox10.SelectedIndex = Tracine.IndexOf("c2")
            CanalThru.Value = 1
            '
            ' Position Initiales
            ' ******************
            'PositionInitiale()
            Init_Graphisme()
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "Construction" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Sub CAD_Construction()
        Dim s As New Size
        Dim p As New Point
        '
        Try
            ' Mise à jour des listes des combobox
            ' ***********************************
            Cad_AnatoleMaj()
            CAD_Maj_TableGlobalAcc()
            '
            ' Position des comobobox
            ' **********************
            s.Width = 176
            s.Height = 23
            '
            ComboBox3.Size = s
            ComboBox4.Size = s
            ComboBox6.Size = s
            '
            p.Y = 6
            p.X = 183
            ComboBox3.Location = p
            p.X = 365
            ComboBox4.Location = p
            p.X = 2
            ComboBox6.Location = p

            ' Position des label des comobobox
            ' ********************************
            s.Width = 176
            s.Height = 15
            Label74.Size = s
            Label75.Size = s
            Label37.Size = s

            p.Y = 32
            p.X = 183
            Label74.Location = p
            p.X = 365
            Label75.Location = p
            p.X = 2
            Label37.Location = p

            If LangueIHM = "fr" Then
                Label74.Text = "Progressions majeures"
                Label75.Text = "Progressions mineures"
                Label37.Text = "Type d'accords"
            Else
                Label74.Text = "Major progressions"
                Label75.Text = "Minor progression"
                Label37.Text = "Chord type"
            End If

            ' Titre de la progression
            ' ***********************
            Label28.Location = New Point(1, 128)
            Label28.Size = New Size(90, 10)
            Label28.Text = "Anatole"
            Label28.TextAlign = ContentAlignment.MiddleLeft
            '
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "CAD_Construction" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Sub Init_Fichier()
        'CheminFichierOuvrir = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminFichierOuvrir", Nothing)
        NomFichier = ""
        IndicateurEnreg = False
        Me.Text = "Sans Titre"
    End Sub

    Sub Grid3Zoom1()
        Try
            Dim i As Integer
            Grid3.AutoRedraw = False
            '
            'pour test du catch
            'Dim j, k As Integer
            'j = 5
            'k = 0
            'i = j / k
            For i = 1 To (Grid3.Cols - 1)
                Grid3.Column(i).Width = Grid3Largeur1
                Grid3.Column(i).Alignment = FlexCell.AlignmentEnum.LeftGeneral
            Next i
            '
            Largeur_Zoom = Grid3Largeur1
            Grid3.Refresh()
            Grid3.AutoRedraw = True
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "Grid3Zoom1" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Sub Grid3Zoom2()
        Try
            Dim i As Integer

            Grid3.AutoRedraw = False
            '
            For i = 1 To (nbColonnesGrid3 - 1)
                Grid3.Column(i).Width = Grid3Largeur2
                Grid3.Column(i).Alignment = FlexCell.AlignmentEnum.LeftGeneral
            Next i
            '
            Largeur_Zoom = Grid3Largeur2
            Grid3.Refresh()
            Grid3.AutoRedraw = True
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "Grid3Zoom2" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Sub LargeursColGrid1()
        Try
            Dim i As Integer
            ' colonne 0 à 2
            Grid1.Column(0).Width = 39
            Grid1.Column(1).Width = 60
            Grid1.Column(2).Width = 60
            'colonne 3 à 5
            For i = 3 To 5
                Grid1.Column(i).Width = 68 '120
            Next i
            ' colonne 6
            Grid1.Column(6).Width = 28 '120
            ' Colonne 7 et 8
            Grid1.Column(7).Width = 30
            Grid1.Column(8).Width = 30

            For i = 9 To nbColonnesGrid1 - 1
                Grid1.Column(i).Width = 28
            Next
            '
            Grid1.Column(9).Width = 5 ' colonne de séparation entre données utiles et données étendues
            Grid1.Column(10).Width = 107 '130
            '
            For i = 1 To nbLignesGrid1 - 1
                Grid1.Cell(i, 0).Text = Str(i)
            Next i
            '
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "LargeursColGrid1" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try
    End Sub
    ' 4 temps 	f-p-mf-p 	binaire+binaire
    ' *************************************
    '
    ' 5 temps (1) 	f-p-mf-p-p 	binaire+ternaire
    ' ******************************************
    ' 5 temps (2) 	f-p-p-mf-p 	ternaire+binaire
    '
    ' 7 temps (1) 	f-p-p-mf-p-mf-p 	ternaire+binaire+binaire
    ' ***********************************************************
    ' 7 temps (2) 	f-p-mf-p-p-mf-p 	binaire+ternaire+binaire
    ' 7 temps (3) 	f-p-mf-p-mf-p-p 	binaire+binaire+ternaire

    Sub GrapheTempsFort(signat As String, NumCol As Integer, NumColMesure As Integer)
        Try
            '
            ' Mise à jour des accents
            If TAccents(NumColMesure) = True Then
                Grid3.Range(2, NumCol, 2, NumCol).BackColor = Color.Orange 'Color.Thistle ' 
                'Grid3.Range(2, NumCol, 6, NumCol).Borders(FlexCell.EdgeEnum.Right) = FlexCell.LineStyleEnum.Thin
            End If
            Select Case signat
                Case "2/4", "3/4", "4/4", "5/4", "6/4", "7/4"
                    '
                    Select Case NumColMesure
                        Case 1
                            Grid3.Cell(2, NumCol).Text = "1"
                        Case 3
                            Grid3.Cell(2, NumCol).Text = "2"
                        Case 5
                            Grid3.Cell(2, NumCol).Text = "3"
                        Case 7
                            Grid3.Cell(2, NumCol).Text = "4"
                        Case 9
                            Grid3.Cell(2, NumCol).Text = "5"
                        Case 11
                            Grid3.Cell(2, NumCol).Text = "6"
                        Case 13
                            Grid3.Cell(2, NumCol).Text = "7"
                    End Select

                Case "6/8", "7/8", "9/8", "12/8", "15/8", "18/8"
                    Select Case NumColMesure
                        Case 1
                            Grid3.Cell(2, NumCol).Text = "1"
                        Case 4
                            Grid3.Cell(2, NumCol).Text = "2"
                        Case 7
                            If signat <> "7/8" Then
                                Grid3.Cell(2, NumCol).Text = "3"
                            End If
                        Case 10
                            Grid3.Cell(2, NumCol).Text = "4"
                        Case 13
                            Grid3.Cell(2, NumCol).Text = "5"
                        Case 16
                            Grid3.Cell(2, NumCol).Text = "6"
                        Case 19
                            Grid3.Cell(2, NumCol).Text = "7"
                    End Select
            End Select
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "GrapheTempsFort" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Function ComptageColonneMesure(Numérateur As Integer, Dénominateur As Integer, NumColMesure As Integer) As Integer
        '
        ComptageColonneMesure = 0
        Select Case Dénominateur
            Case 4
                If NumColMesure = Numérateur * 2 Then
                    ComptageColonneMesure = 1
                Else
                    ComptageColonneMesure = NumColMesure + 1
                End If
            Case 8
                If NumColMesure = Numérateur Then
                    ComptageColonneMesure = 1
                Else
                    ComptageColonneMesure = NumColMesure + 1
                End If
        End Select
    End Function

    Function ColonnesPourSignature(Numérateur As Integer, Dénominateur As Integer, Quantif As Integer) As Integer
        Dim i As Integer
        Dim j As Integer

        i = ColonnesUnités(Dénominateur, Quantif) ' nombre de colonnes pour une unité
        j = (Numérateur * i) ' nombre de colonnes dans 1 mesure
        ColonnesPourSignature = j * (nbMesures + 11)
        '
    End Function
    Function ColonnesUnités(Dénominateur As Integer, Quantif As Integer) As Integer
        ColonnesUnités = -1
        Select Case Dénominateur
            Case 4
                Select Case Quantif
                    Case 2 ' quantification à la croche
                        ColonnesUnités = 2
                    Case 4 ' quantification à la double croche
                        ColonnesUnités = 4
                End Select
            Case 8
                Select Case Quantif
                    Case 2 ' quantification à la croche
                        ColonnesUnités = 1
                    Case 4 ' quantification à la double croche
                        ColonnesUnités = 2
                End Select
        End Select
    End Function
    '

    Function Pres_pdf() As Boolean
        Dim a As String
        Pres_pdf = True

        Try
            Dim F1 As File = CreateObject("MonFicher.xps")
        Catch ex As Exception
            a = ex.Message
            Pres_pdf = False
        End Try
    End Function
    Sub Fr_Culture()
        '
        Try
            Dim i As Integer
            ' nom des gammes dans l'onglet "Gammes"
            ' ************************************
            LabelMaj.Text = "MAJEUR"
            LabelMinH.Text = "MINEUR HARMONIQUE"
            LabelMinM.Text = "MINEUR MELODIQUE"
            LabelMajH.Text = "MAJEUR HARMONIQUE"
            LabelPenta.Text = "PENTA MINEUR"
            Label59.Text = "BLUES"
            '
            ' mise à jour des titres des onglets d'HyperVoicing
            ' *************************************************
            '
            TabPage1.Text = "Tons"
            TabPage2.Text = "Progressions"
            TabPage21.Text = "Modes"
            TabPage16.Text = "Substitutions"
            TabPage7.Text = "Ponts"
            TabPage20.Text = "Expression"
            TabPage17.Text = "Vue Notes"
            TabPage3.Text = "Stack"


            ChangementLangue = True
            '
            FrançaisToolStripMenuItem.Checked = True
            EnglishToolStripMenuItem.Checked = False
            '
            Grid1.Cell(0, 0).Text = ""
            Grid1.Cell(0, 1).Text = "Positions"
            Grid1.Cell(0, 2).Text = "Marqueurs"
            Grid1.Cell(0, 3).Text = "Tonalités"
            Grid1.Cell(0, 4).Text = "Accords"
            Grid1.Cell(0, 5).Text = "Gammes"
            Grid1.Cell(0, 6).Text = "°"
            Grid1.Cell(0, 7).Text = "Vel"
            Grid1.Cell(0, 8).Text = "Root"
            Grid1.Refresh()
            '
            Grid3.Cell(1, 0).Text = "Mesures"
            Grid3.Cell(2, 0).Text = "Divisions"
            '
            Label83.Text = "Grille de composition"

            '
            ' Grid2.Cell(0, 0).Text = "Navigateur"
            ' ***********************************
            ' tableau de bord
            ' ***************
            Label5.Text = "Métrique"
            Label48.Text = "Choix Tonalité"
            '
            Dim p As Point
            p.X = 60
            p.Y = 32
            Label48.Location = p
            p.X = 224
            p.Y = 32
            Label5.Location = p
            '
            ' Menus
            FichierToolStripMenuItem.Text = "Fichier"
            NouveauToolStripMenuItem.Text = "Nouveau"
            NouveauAvecSignatireToolStripMenuItem.Text = "Nouveau avec Métrique"
            OuvrirToolStripMenuItem.Text = "Ouvrir"
            EnregistrerToolStripMenuItem.Text = "Enregistrer"
            EnregistrerSousToolStripMenuItem.Text = "Enregistrer sous"
            'MenuExportsMIDI.Text = "Exporter Projet en MidiFile"
            'ToolStripMenuItem9.Text = "Exporter Marqueurs en MidiFile avec ..."

            ProjetToolStripMenuItem.Text = "Projet"
            AccordsEnTantQueMarqueurToolStripMenuItem.Text = "Accords en tant que marqueurs"
            GammesEnTantQueMarqueursToolStripMenuItem1.Text = "Gammes en tant que marqueurs"

            AccordsCommeMarqueursToolStripMenuItem.Text = "Accords"
            GammesEnTantQueMarqueursToolStripMenuItem.Text = "Gammes"
            'ExporterCalqueMIDIToolStripMenuItem.Text = "Export Calques MIDI"
            'ExporterCompoToolStripMenuItem.Text = "Export MIDI Accords"
            QuitterToolStripMenuItem.Text = "Quitter"
            '
            EditionToolStripMenuItem.Text = "Edition"
            AnnulerToolStripMenuItem.Text = "Annuler"
            CouperToolStripMenuItem.Text = "Couper"
            CopierToolStripMenuItem.Text = "Copier"
            CollerToolStripMenuItem.Text = "Coller"
            EffacerToolStripMenuItem.Text = "Effacer"
            '
            ClavierMenuItem.Text = "Clavier"
            '
            AideToolStripMenuItem.Text = "Aide"
            AuSujetDeToolStripMenuItem.Text = "Au sujet de"
            SiteWebToolStripMenuItem.Text = "Site Web"
            ToolStripMenuItem6.Text = "Faire un don"
            '
            TransportMenuItem.Text = "Barre de transport"


            ' ToolStripMenuItem6.Text = "Espaces"
            ' **********************************
            OpenFileDialog1.Title = "Ouverture projet"
            '
            Label9.Text = "Début"
            Label10.Text = "Fin"
            '
            Répéter.Text = "Répéter"
            '
            Label56.Text = "Accord"
            Label58.Text = "Gamme"
            '

            ' List des tonalités
            ' ******************
            i = ComboBox1.SelectedIndex
            ComboBox1.Items.Clear()
            '
            ComboBox1.Items.Add(" C# Major")
            ComboBox1.Items.Add(" F# Major")
            ComboBox1.Items.Add(" B Major")
            ComboBox1.Items.Add(" E Major")
            ComboBox1.Items.Add(" A Major")
            ComboBox1.Items.Add(" D Major")
            ComboBox1.Items.Add(" G Major")
            ComboBox1.Items.Add(" C Major")
            ComboBox1.Items.Add(" F Major")
            ComboBox1.Items.Add(" Bb Major")
            ComboBox1.Items.Add(" Eb Major")
            ComboBox1.Items.Add(" Ab Major")
            '
            If EnChargement Then
                ComboBox1.SelectedIndex = 7 ' pour C Maj
            End If
            '
            i = ComboBox2.SelectedIndex
            ComboBox2.Items.Clear()
            '
            ComboBox2.Items.Add(" A# Minor")
            ComboBox2.Items.Add(" D# Minor")
            ComboBox2.Items.Add(" G# Minor")
            ComboBox2.Items.Add(" C# Minor")
            ComboBox2.Items.Add(" F# Minor")
            ComboBox2.Items.Add(" B Minor")
            ComboBox2.Items.Add(" E Minor")
            ComboBox2.Items.Add(" A Minor")
            ComboBox2.Items.Add(" D Minor")
            ComboBox2.Items.Add(" G Minor")
            ComboBox2.Items.Add(" C Minor")
            ComboBox2.Items.Add(" F Minor")

            If EnChargement Then
                ComboBox2.SelectedIndex = 7
            Else
                ComboBox2.SelectedIndex = i
            End If
            '
            Grid4.Cell(0, 1).Text = "Gammes"
            '
            i = ComboBox23.SelectedIndex
            ComboBox23.Items.Clear()
            ComboBox23.Items.Add(" Accords de 3 notes")
            ComboBox23.Items.Add(" Accords de 4 notes (7)")
            '
            ComboBox23.SelectedIndex = i
            If EnChargement = True Then
                ComboBox23.SelectedIndex = 0
            End If
            '
            i = ComboBox9.SelectedIndex
            ComboBox9.Items.Clear()
            ComboBox9.Items.Add(" Accords de 3 notes")
            ComboBox9.Items.Add(" Accords de 4 notes (7)")
            '
            ComboBox9.SelectedIndex = i
            If EnChargement = True Then
                ComboBox9.SelectedIndex = 0
            End If
            '
            i = ComboBox6.SelectedIndex
            ComboBox6.Items.Clear()
            ComboBox6.Items.Add(" Accords de 3 notes")
            ComboBox6.Items.Add(" Accords de 4 notes (7)")
            '
            ComboBox6.SelectedIndex = i
            If EnChargement = True Then
                ComboBox6.SelectedIndex = 0
            End If
            '
            ' Onglet Cadences
            ' ***************
            '
            i = ComboBox4.SelectedIndex
            ComboBox4.Items.Clear()
            ComboBox4.Items.Add("Anatole Min")
            ComboBox4.Items.Add("Pseudo 2-5-1")
            ComboBox4.Items.Add("Plagale Min")
            ComboBox4.Items.Add("Hispanique")
            '
            ComboBox4.SelectedIndex = i
            If EnChargement = True Then
                ComboBox4.SelectedIndex = 0
            End If
            '
            i = ComboBox3.SelectedIndex '
            ComboBox3.Items.Clear()
            ComboBox3.Items.Add("Anatole")
            ComboBox3.Items.Add("Forme2")
            ComboBox3.Items.Add("Forme3")
            ComboBox3.Items.Add("Complète")
            ComboBox3.Items.Add("2-5-1")
            ComboBox3.Items.Add("Demi")
            ComboBox3.Items.Add("Parfaite")
            ComboBox3.Items.Add("Plagale")
            ComboBox3.Items.Add("Plagale2")
            ComboBox3.Items.Add("Rompue")
            ComboBox3.Items.Add("Rompue2")
            ComboBox3.Items.Add("Rompue3")
            ComboBox3.Items.Add("Modale")
            ComboBox3.Items.Add("Modale2")
            ComboBox3.Items.Add("Modale3")
            ComboBox3.Items.Add("Napolitaine")
            '
            ComboBox3.SelectedIndex = i
            If EnChargement = True Then
                ComboBox3.SelectedIndex = 0
            End If
            '
            ' Label résultat de choix d'une cadence
            ' *************************************
            Label28.Text = Trad_NomCadence_EnFr(Trim(Label28.Text))

            ' Onglets Réglages de droite
            ' **************************
            TabPage4.Text = "MIDI"
            TabPage6.Text = "Paramètres"
            Label3.Text = "Ecoute des Accords (Ctrl+Clic)"

            '
            Dim p1 As New Point
            p1 = Label84.Location
            p1.X = 118
            Label84.Location = p1
            Dim p2 As New Point
            p2 = Label85.Location
            p2.X = 118
            Label85.Location = p2

            Label84.Text = "A partir de"
            Label85.Text = "A partir de"
            '
            Label24.Text = "Canal thru"
            Label44.Text = "Dyn. Canal"
            Label36.Text = "Canal Thru"
            '
            GroupBox5.Text = "PORTS MIDI"
            Label60.Text = "Accords"
            Label23.Text = "Métronome"
            '
            GroupBox3.Text = "Dynamiques"
            '
            GroupBox4.Text = "Répéter"
            Label63.Text = "Nombre Mesures Fin"
            Label43.Text = "Nombre répétitions"
            '
            Followed.Text = "Suivi Sélection"
            '
            ' Bouton RAZ clavier
            ' ******************
            Button8.Text = "Effacer Gammes"
            FinBoucle.Text = "Durée fin"
            CheckBox2.Text = "Afficher Gammes en lecture"
            '
            ' Sélection de gammes
            ' ******************
            Button7.Text = "Tout"

            ' ToolTips
            ' ********
            ToolTip1.SetToolTip(InitClavier, "Effacer gamme sur clavier")
            ToolTip1.SetToolTip(Button11, "Nouveau")
            ToolTip1.SetToolTip(Button12, "Ouvrir")
            ToolTip1.SetToolTip(Button13, "Enregistrer")
            ToolTip1.SetToolTip(Button14, "Annuler")
            ToolTip1.SetToolTip(Button15, "Couper")
            ToolTip1.SetToolTip(Button16, "Copier")
            ToolTip1.SetToolTip(Button22, "Coller")
            ToolTip1.SetToolTip(Button29, "Init Midi")
            ToolTip1.SetToolTip(Button20, "Infos détaillées")
            ToolTip1.SetToolTip(Button23, "Etendre/Réduire")
            ToolTip1.SetToolTip(Button24, "Export MIDI Accords")
            ToolTip1.SetToolTip(Button26, "Imprimer")
            ToolTip1.SetToolTip(Button27, "Export MIDI Marqueurs")
            ToolTip1.SetToolTip(Button28, "Export Calques MIDI")
            ToolTip1.SetToolTip(Button36, "Export HTML")
            ToolTip1.SetToolTip(Button38, "Visibilité notes sur clavier")
            '
            ToolTip1.SetToolTip(ComboBox1, "Tonalité")
            ToolTip1.SetToolTip(ComboBox2, "Relative mineure")
            ToolTip1.SetToolTip(ComboBox11, "Voix ajoutée à l'octave inférieure")
            ToolTip1.SetToolTip(ComboBox12, "Voix ajoutée à l'octave supérieure (sur  accords de 3 notes seulement)")
            '
            ToolTip1.SetToolTip(ComboBox23, "Types Accords")
            ToolTip1.SetToolTip(ComboBox8, "Compression de longueur de notes")
            ToolTip1.SetToolTip(NomduSon, "Ecrivez ici le nom du son des accords")
            '
            ToolTip1.SetToolTip(TagsGamme, "Utilisation de la Liste de Gammes" + Chr(13) + "- sélectionner des accords dans la grille de composition : les gammes jouables apparaissent dans la liste" + Chr(13) _
                                + "- cliquer sur  une gamme dans la liste puis touche 'Entrée' : la gamme s'affiche dans la grille de composition")
            '
            ChangementLangue = False
            '
            ' Noms des modes
            ' **************
            For i = 0 To 2
                Select Case i
                    Case 0
                        TabTonsTitreMode.Item(i).Text = "Mode Majeur"
                    Case 1
                        TabTonsTitreMode.Item(i).Text = "Mode Mineur Harmonique"
                    Case 2
                        TabTonsTitreMode.Item(i).Text = "Mode Mineur Mélodique"
                End Select
            Next i
            '
            ' Titre "Réglages" pour conteneur de droite
            ' *****************************************
            Label_Reglages.Text = "Réglages"
            Label_Afficheur.Text = "Affichage"
            '
            ' Mode étendu
            ' ***********
            Grid1.Cell(0, 10).Text = "Informations détaillées"
            ButtTonalités.Text = "Tonalités"
            ButtAccords.Text = "Accords"
            ButtGammes.Text = "Gammes"
            ButtModes.Text = "Modes Grecs"

            CheckBoxTout.Text = "Tout"
            Button30.Text = "Effacer"
            '
            ' Ecoute : Jeu CTRL + clic
            ' ***********************
            GroupBox7.Text = "Ecoute accord avec notes"
            GammePlusAccord.Text = "Gamme + Accord"
            Label19.Text = "Dyn. Accords"
            Label18.Text = "Dyn. Gammes"
            Label2.Text = "(Gammes)"
            Label14.Text = "Tempo"
            Label88.Text = "Canal"
            Label89.Text = "Racine"
            GroupBox2.Text = "Réglage écoute"

            ' SYnthé GM/GS
            ' List Program Change GS
            ' **********************

            ' GroupeBox Programmes
            ' ********************
            GroupBox8.Text = "PROGRAMMES - SONS"
            ListGS.Items.Clear()

            ListGS.Items.Add("GS/GM off")
            ListGS.Items.Add("01 Piano acoustique 1")
            ListGS.Items.Add("02 Piano acoustique 2")
            ListGS.Items.Add("03 Grand piano électrique")
            ListGS.Items.Add("04 Piano honkytonk")
            ListGS.Items.Add("05 Piano électrique 1")
            ListGS.Items.Add("06 Piano électrique 2")
            ListGS.Items.Add("07 Clavecin")
            ListGS.Items.Add("08 Clavicorde")
            ListGS.Items.Add("09 Célesta")
            ListGS.Items.Add("10 Carillon")
            ListGS.Items.Add("11 Boîte à musique")
            ListGS.Items.Add("12 Vibraphone")
            ListGS.Items.Add("13 Marimba")
            ListGS.Items.Add("14 Xylophone")
            ListGS.Items.Add("15 Cloches tubulaires")
            ListGS.Items.Add("16 Tympanon")
            ListGS.Items.Add("17 Orgue à tubes")
            ListGS.Items.Add("18 Orgue percussif")
            ListGS.Items.Add("19 Orgue rock")
            ListGS.Items.Add("20 Orgue d'église")
            ListGS.Items.Add("21 Orgue vibrato")
            ListGS.Items.Add("22 Accordéon")
            ListGS.Items.Add("23 Harmonica")
            ListGS.Items.Add("24 Bandonéon")
            ListGS.Items.Add("25 Guitare acous. classique")
            ListGS.Items.Add("26 Guitare acous. folk")
            ListGS.Items.Add("27 Guitare acous. jazz")
            ListGS.Items.Add("28 Guitare élec. pure")
            ListGS.Items.Add("29 Guitare élec. mute")
            ListGS.Items.Add("30 Guitare élec. saturée")
            ListGS.Items.Add("31 Guitare élec. distorsion")
            ListGS.Items.Add("32 Guitare élec. harmonique")
            ListGS.Items.Add("33 Basse acoustique")
            ListGS.Items.Add("34 Basse élec. 1")
            ListGS.Items.Add("35 Basse élec. 2")
            ListGS.Items.Add("36 Basse élec. 3")
            ListGS.Items.Add("37 Basse slap 1")
            ListGS.Items.Add("38 Basse slap 2")
            ListGS.Items.Add("39 Basse synth.  1")
            ListGS.Items.Add("40 Basse synth.  2")
            ListGS.Items.Add("41 Violon")
            ListGS.Items.Add("42 Viole")
            ListGS.Items.Add("43 Violoncelle")
            ListGS.Items.Add("44 Contrebasse")
            ListGS.Items.Add("45 Cordes trémolo")
            ListGS.Items.Add("46 Cordes pizzicato")
            ListGS.Items.Add("47 Harpe")
            ListGS.Items.Add("48 Timbales")
            ListGS.Items.Add("49 Quartet cordes 1")
            ListGS.Items.Add("50 Quartet cordes 2")
            ListGS.Items.Add("51 Cordes synthétiseur 1")
            ListGS.Items.Add("52 Cordes synthétiseur 2")
            ListGS.Items.Add("53 Chœurs Aahs")
            ListGS.Items.Add("54 Voix Oohs")
            ListGS.Items.Add("55 Voix synthétiseur")
            ListGS.Items.Add("56 Coup d'orchestre")
            ListGS.Items.Add("57 Trompette")
            ListGS.Items.Add("58 Trombone")
            ListGS.Items.Add("59 Tuba")
            ListGS.Items.Add("60 Trompette bouchée")
            ListGS.Items.Add("61 Cors")
            ListGS.Items.Add("62 Ensemble de cuivres")
            ListGS.Items.Add("63 Cuivres synthétiseur")
            ListGS.Items.Add("64 Cuivres synthétiseur")
            ListGS.Items.Add("65 Saxophone soprano")
            ListGS.Items.Add("66 Saxophone alto")
            ListGS.Items.Add("67 Saxophone ténor")
            ListGS.Items.Add("68 Saxophone baryton")
            ListGS.Items.Add("69 Hautbois")
            ListGS.Items.Add("70 Cors anglais")
            ListGS.Items.Add("71 Basson")
            ListGS.Items.Add("72 Clarinette")
            ListGS.Items.Add("73 Flûte piccolo")
            ListGS.Items.Add("74 Flûte")
            ListGS.Items.Add("75 Flûte à bec")
            ListGS.Items.Add("76 Flûte de pan")
            ListGS.Items.Add("77 Bouteille sifflée")
            ListGS.Items.Add("78 Shakuhachi")
            ListGS.Items.Add("79 Sifflet")
            ListGS.Items.Add("80 Ocarina")
            ListGS.Items.Add("81 Lead carré")
            ListGS.Items.Add("82 Lead dents de scie")
            ListGS.Items.Add("83 Lead orgue")
            ListGS.Items.Add("84 Lead chiff")
            ListGS.Items.Add("85 Lead charang")
            ListGS.Items.Add("86 Lead voix")
            ListGS.Items.Add("87 Lead quinte)")
            ListGS.Items.Add("88 Lead basse")
            ListGS.Items.Add("89 Pad new Age")
            ListGS.Items.Add("90 Pad warm")
            ListGS.Items.Add("91 Pad poly")
            ListGS.Items.Add("92 Pad chœurs")
            ListGS.Items.Add("93 Pad archet")
            ListGS.Items.Add("94 Pad métal")
            ListGS.Items.Add("95 Pad halo")
            ListGS.Items.Add("96 Pad glissement")
            '
            ListGS.SelectedIndex = 0
            '
            'Label42.Text = "Sons"
            Label40.Text = "Volume"
            Label30.Text = "Reverb"
            Label41.Text = "Chorus"
            'GroupBox2.Text = "MIDI GS"
            ButtonSend.Text = "Envoyer tout"

            LockageColonnes()
            ' Etiquettes pour les boutons des Vues
            ' ************************************
            Label77.Text = "Défaut"
            Label8.Text = "Etendre"
            Label81.Text = "Harmo"


            ' Bouton Init Clavier
            ' *******************
            InitClavier.Text = "Effacer clavier"

            ' Télécommande
            ' ************
            Transport.Remote.Text = "Télécommande"
            ToolTip1.SetToolTip(Transport.Remote, "Envoie le CTRL 54 sur Play et le CTRL 55 sur Stop")
            '

            ' Menu flottant Couper,Copier,Coller
            ' **********************************
            Flot_Couper.Text = "Couper"
            Flot_Copier.Text = "Copier"
            Flot_Coller.Text = "Coller"

            ' Group Box de Basse-12 et 4Notes
            ' *******************************
            'GroupBox11.Text = "Basse - 12                               4Notes"

            ' Chemin du fichier ouvert
            ' ************************
            Label86.Text = "Chemin du fichier ouvert"
            Label87.Text = "Infos"
            '
            ' Liste de Gammes
            ' ***************
            TagsGamme.Text = "Liste de Gammes"
            '
            ' Notes libres pour HyperVoicing
            ' ******************************
            NomduSon.Text = "Texte libre pour utilisation d'HyperVoicing"

        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'une erreur dans procédure : " + "Fr_Culture" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try

    End Sub
    Sub En_Culture()
        Try
            Dim i As Integer

            ' Nom des gammes dans onglet gamme
            ' ********************************
            LabelMaj.Text = "MAJOR"
            LabelMinH.Text = "HARMONIC MINOR"
            LabelMinM.Text = "MELODIC MINOR"
            LabelMajH.Text = "HARMONIC MAJOR"
            LabelPenta.Text = "PENTA. MINOR"
            Label59.Text = "BLUES"
            '
            ' mise à jour des titres des onglets
            ' **********************************
            '
            TabPage1.Text = "Tones"
            TabPage2.Text = "Progressions"
            TabPage21.Text = "Modes"
            TabPage16.Text = "Substitutions"
            TabPage7.Text = "Briges"
            TabPage20.Text = "Expression"
            TabPage17.Text = "Notes View"
            TabPage3.Text = "Stack"
            '
            ChangementLangue = True
            '
            FrançaisToolStripMenuItem.Checked = False
            EnglishToolStripMenuItem.Checked = True
            '
            Grid1.Cell(0, 0).Text = ""
            Grid1.Cell(0, 1).Text = "Positions"
            Grid1.Cell(0, 2).Text = "Markers"
            Grid1.Cell(0, 3).Text = "Tonalities"
            Grid1.Cell(0, 4).Text = "Chords"
            Grid1.Cell(0, 5).Text = "Scales"
            Grid1.Cell(0, 6).Text = "°"
            Grid1.Cell(0, 7).Text = "Vel"
            Grid1.Cell(0, 8).Text = "Root"
            Grid1.Refresh()
            '
            Grid3.Cell(1, 0).Text = "Measures"
            Grid3.Cell(2, 0).Text = "Divisions"
            '
            Label83.Text = "Composition grid"
            '
            ' Tableau de bord
            ' ***************
            Label5.Text = "Time"
            Label48.Text = "Tone Choice"
            Dim p As Point
            p.X = 60
            p.Y = 32
            Label48.Location = p
            'Label48.Location = p
            p.X = 233
            p.Y = 32
            Label5.Location = p
            '
            ' Menus
            ' *****
            FichierToolStripMenuItem.Text = "File"
            NouveauToolStripMenuItem.Text = "New"
            NouveauAvecSignatireToolStripMenuItem.Text = "New with Time Signature"
            OuvrirToolStripMenuItem.Text = "Open"
            EnregistrerToolStripMenuItem.Text = "Save"
            EnregistrerSousToolStripMenuItem.Text = "Save as"
            MenuExportsMIDI.Text = "Export Project as MidiFile"
            ToolStripMenuItem9.Text = "Export Markers as MidiFile with ..."

            ProjetToolStripMenuItem.Text = "Project"
            AccordsEnTantQueMarqueurToolStripMenuItem.Text = "Chords as markers"
            GammesEnTantQueMarqueursToolStripMenuItem1.Text = "Scales as markers"


            AccordsCommeMarqueursToolStripMenuItem.Text = "Chords"
            GammesEnTantQueMarqueursToolStripMenuItem.Text = "Scales"
            'ExporterCalqueMIDIToolStripMenuItem.Text = "Export MIDI Layers"
            'ExporterCompoToolStripMenuItem.Text = "Export MIDI Chords"
            QuitterToolStripMenuItem.Text = "Quit"
            '
            EditionToolStripMenuItem.Text = "Edition"
            AnnulerToolStripMenuItem.Text = "Cancel"
            CouperToolStripMenuItem.Text = "Cut"
            CopierToolStripMenuItem.Text = "Copy"
            CollerToolStripMenuItem.Text = "Paste"
            EffacerToolStripMenuItem.Text = "Delete"
            '
            AideToolStripMenuItem.Text = "Help"
            AuSujetDeToolStripMenuItem.Text = "About"
            SiteWebToolStripMenuItem.Text = "Web site"
            ToolStripMenuItem6.Text = "Make a donation"
            '
            ClavierMenuItem.Text = "Keyboard"
            TransportMenuItem.Text = "Transport bar"
            '
            OpenFileDialog1.Title = "Open Project"
            '
            Label9.Text = "Begin"
            Label10.Text = "End"
            '
            Répéter.Text = "Repeat"
            FinBoucle.Text = "End lehgth"
            '
            Label56.Text = "Chord"
            Label58.Text = "Scale"
            '
            'Init liste des tonalités
            '***********************
            i = ComboBox1.SelectedIndex
            ComboBox1.Items.Clear()

            ComboBox1.Items.Add(" C# Major")
            ComboBox1.Items.Add(" F# Major")
            ComboBox1.Items.Add(" B Major")
            ComboBox1.Items.Add(" E Major")
            ComboBox1.Items.Add(" A Major")
            ComboBox1.Items.Add(" D Major")
            ComboBox1.Items.Add(" G Major")
            ComboBox1.Items.Add(" C Major")
            ComboBox1.Items.Add(" F Major")
            ComboBox1.Items.Add(" Bb Major")
            ComboBox1.Items.Add(" Eb Major")
            ComboBox1.Items.Add(" Ab Major")

            If EnChargement Then
                ComboBox1.SelectedIndex = 7 ' pour C Maj
            End If
            '
            i = ComboBox2.SelectedIndex
            '
            ComboBox2.Items.Clear()
            '
            ComboBox2.Items.Add(" A# Minor")
            ComboBox2.Items.Add(" D# Minor")
            ComboBox2.Items.Add(" G# Minor")
            ComboBox2.Items.Add(" C# Minor")
            ComboBox2.Items.Add(" F# Minor")
            ComboBox2.Items.Add(" B Minor")
            ComboBox2.Items.Add(" E Minor")
            ComboBox2.Items.Add(" A Minor")
            ComboBox2.Items.Add(" D Minor")
            ComboBox2.Items.Add(" G Minor")
            ComboBox2.Items.Add(" C Minor")
            ComboBox2.Items.Add(" F Minor")

            If EnChargement Then
                ComboBox2.SelectedIndex = 7
            Else
                ComboBox2.SelectedIndex = i
            End If
            '
            '
            Grid4.Cell(0, 1).Text = "Scales"
            '
            i = ComboBox23.SelectedIndex
            ComboBox23.Items.Clear()
            ComboBox23.Items.Add(" 3 notes Chords")
            ComboBox23.Items.Add(" 4 notes Chords (7)")
            '
            ComboBox23.SelectedIndex = i
            If EnChargement = True Then
                ComboBox23.SelectedIndex = 0
            End If
            '
            i = ComboBox9.SelectedIndex
            ComboBox9.Items.Clear()
            ComboBox9.Items.Add(" 3 notes Chords")
            ComboBox9.Items.Add(" 4 notes Chords (7)")
            '
            ComboBox9.SelectedIndex = i
            If EnChargement = True Then
                ComboBox9.SelectedIndex = 0
            End If
            '
            i = ComboBox6.SelectedIndex
            ComboBox6.Items.Clear()
            ComboBox6.Items.Add(" 3 notes Chords")
            ComboBox6.Items.Add(" 4 notes Chords (7)")
            '
            ComboBox6.SelectedIndex = i
            If EnChargement = True Then
                ComboBox6.SelectedIndex = 0
            End If
            '
            '
            ' Onglet Cadences
            ' ***************
            i = ComboBox4.SelectedIndex
            ComboBox4.Items.Clear()
            ComboBox4.Items.Add("Anatole Min")
            ComboBox4.Items.Add("Pseudo 2-5-1")
            ComboBox4.Items.Add("Minor Plagal")
            ComboBox4.Items.Add("Hispanic")
            ComboBox4.SelectedIndex = i
            If EnChargement = True Then
                ComboBox4.SelectedIndex = 0
            End If
            '
            i = ComboBox3.SelectedIndex
            ComboBox3.Items.Clear()
            ComboBox3.Items.Add("Anatole")
            ComboBox3.Items.Add("Forme2")
            ComboBox3.Items.Add("Forme3")
            ComboBox3.Items.Add("Complete")
            ComboBox3.Items.Add("2-5-1")
            ComboBox3.Items.Add("Half")
            ComboBox3.Items.Add("Perfect")
            ComboBox3.Items.Add("Plagal")
            ComboBox3.Items.Add("Plagal2")
            ComboBox3.Items.Add("Broken")
            ComboBox3.Items.Add("Broken2")
            ComboBox3.Items.Add("Broken3")
            ComboBox3.Items.Add("Modal")
            ComboBox3.Items.Add("Modal2")
            ComboBox3.Items.Add("Modal3")
            ComboBox3.Items.Add("Napolitan")
            '
            ComboBox3.SelectedIndex = i
            If EnChargement = True Then
                ComboBox3.SelectedIndex = 0
            End If
            '
            Label28.Text = Trad_NomCadence_FrEn(Trim(Label28.Text))
            '
            ' Onglets Réglages de droite
            ' **************************
            TabPage4.Text = "MIDI"
            TabPage6.Text = "Parameters"
            Label3.Text = "Listening to Chords (Ctrl+Clic)"


            '
            Dim p1 As New Point
            p1 = Label84.Location
            p1.X = 136
            Label84.Location = p1
            Dim p2 As New Point
            p2 = Label85.Location
            p2.X = 136
            Label85.Location = p2


            Label84.Text = "From"
            Label85.Text = "From"
            '
            Label24.Text = "Thru Canal"
            Label44.Text = "Canal Dyn."
            Label36.Text = "Thru Canal"

            Label2.Text = "(Scales)"
            '
            GroupBox5.Text = "MIDI PORTS"
            Label60.Text = "Chords"
            Label23.Text = "Metronome"
            '
            GroupBox3.Text = "Velocities"
            '
            GroupBox4.Text = "Loop"
            Label63.Text = "End Measure Number"
            Label43.Text = "Repetition Number"
            '
            Followed.Text = "Followed Sélection"
            '
            ' Bouton RAZ clavier
            ' ******************
            CheckBox2.Text = "Display Scales Reading"
            '
            ' Sélection de gammes
            ' *******************
            Button7.Text = "All"

            ' ToolTips
            ' ********
            ToolTip1.SetToolTip(InitClavier, "Delete scale on keyboard")
            ToolTip1.SetToolTip(Button11, "New")
            ToolTip1.SetToolTip(Button12, "Open")
            ToolTip1.SetToolTip(Button13, "Save")
            ToolTip1.SetToolTip(Button14, "Undo")
            ToolTip1.SetToolTip(Button15, "Cut")
            ToolTip1.SetToolTip(Button16, "Copy")
            ToolTip1.SetToolTip(Button22, "Paste")
            ToolTip1.SetToolTip(Button20, "Detailed infos")

            ToolTip1.SetToolTip(Button23, "Extend/Reduce")
            '
            ToolTip1.SetToolTip(Button24, "Chords MIDI Export")
            ToolTip1.SetToolTip(Button26, "Print")
            ToolTip1.SetToolTip(Button27, "Markers MIDI Export")
            ToolTip1.SetToolTip(Button28, "MIDI Layer Export")
            ToolTip1.SetToolTip(Button29, "Midi Reset")
            ToolTip1.SetToolTip(Button36, "HTML export")
            '
            ToolTip1.SetToolTip(ComboBox1, "Tone")
            ToolTip1.SetToolTip(ComboBox2, "Relative minor")
            ToolTip1.SetToolTip(ComboBox11, "Voice added one octave lower")
            ToolTip1.SetToolTip(ComboBox12, "Voice added one octave upper (on 3-notes chords only)")
            '
            ToolTip1.SetToolTip(ComboBox23, "Chords Type")
            '
            ToolTip1.SetToolTip(ComboBox8, "Notes length compression")
            ToolTip1.SetToolTip(NomduSon, "Write here the name of the chords sound")

            '
            ChangementLangue = False
            '
            '
            ' Noms des modes
            ' **************
            For i = 0 To 2
                Select Case i
                    Case 0
                        TabTonsTitreMode.Item(i).Text = "Major Mode"
                    Case 1
                        TabTonsTitreMode.Item(i).Text = "Harmonic Minor Mode"
                    Case 2
                        TabTonsTitreMode.Item(i).Text = "Melodic Minor Mode"
                End Select
            Next i
            '
            '           
            ' Titre "Réglages" pour conteneur de droite
            ' *****************************************
            Label_Reglages.Text = "Settings"
            Label_Afficheur.Text = "Display"
            '
            ' Mode étendu
            ' ***********
            Grid1.Cell(0, 10).Text = "Detailed informations"
            ButtTonalités.Text = "Tones"
            ButtAccords.Text = "Chords"
            ButtGammes.Text = "Scales"
            ButtModes.Text = "Greek Modes"

            CheckBoxTout.Text = "All"
            Button30.Text = "Erase"

            ' Jeu CTRL + clic
            ' ***************
            GroupBox7.Text = "Listening chord with notes"
            GammePlusAccord.Text = "Scale + Chord"
            Label14.Text = "Tempo"
            Label88.Text = "Channel"
            Label89.Text = "Root"
            Label19.Text = "Chords vel."
            Label18.Text = "Scales vel."
            GroupBox2.Text = "Listening tuning"
            ' GroupeBox Programmes
            ' ********************
            GroupBox8.Text = "PROGRAMS - SOUNDS"


            ' List Program Change GS
            ' **********************
            ListGS.Items.Clear()

            ListGS.Items.Add("GS/GM off")
            ListGS.Items.Add("01 Acoustic Grand Piano")
            ListGS.Items.Add("02 Bright Acoustic Piano")
            ListGS.Items.Add("03 Electric Grand Piano")
            ListGS.Items.Add("04 Honky-tonk Piano")
            ListGS.Items.Add("05 Electric Piano 1")
            ListGS.Items.Add("06 Electric Piano 2")
            ListGS.Items.Add("07 07 Harpsichord")
            ListGS.Items.Add("08 Clavinet")
            ListGS.Items.Add("09 Celesta")
            ListGS.Items.Add("10 Glockenspiel")
            ListGS.Items.Add("11 Music Box")
            ListGS.Items.Add("12 Vibraphone")
            ListGS.Items.Add("13 Marimba")
            ListGS.Items.Add("14 Xylophone")
            ListGS.Items.Add("15 Tubular Bells")
            ListGS.Items.Add("16 Dulcimer")
            ListGS.Items.Add("17 Drawbar Organ")
            ListGS.Items.Add("18 Percussive Organ")
            ListGS.Items.Add("19 Rock Organ")
            ListGS.Items.Add("20 Church Organ")
            ListGS.Items.Add("21 Reed Organ")
            ListGS.Items.Add("22 Accordion")
            ListGS.Items.Add("23 Harmonica")
            ListGS.Items.Add("24 Tango Accordion")
            ListGS.Items.Add("25 Acoustic Guitar nylon")
            ListGS.Items.Add("26 Acoustic Guitar steel")
            ListGS.Items.Add("27 Electric Guitar jazz")
            ListGS.Items.Add("28 Electric Guitar clean")
            ListGS.Items.Add("29 Electric Guitar muted")
            ListGS.Items.Add("30 Overdriven Guitar")
            ListGS.Items.Add("31 Distortion Guitar")
            ListGS.Items.Add("32 Guitar Harmonics")
            ListGS.Items.Add("33 Acoustic Bass")
            ListGS.Items.Add("34 Electric Bass finger")
            ListGS.Items.Add("35 Electric Bass pick")
            ListGS.Items.Add("36 Fretless Bass")
            ListGS.Items.Add("37 Slap Bass 1")
            ListGS.Items.Add("38 Slap Bass 2")
            ListGS.Items.Add("39 Synth Bass 1")
            ListGS.Items.Add("40 Synth Bass 2")
            ListGS.Items.Add("41 Violon")
            ListGS.Items.Add("42 Viola")
            ListGS.Items.Add("43 Cello")
            ListGS.Items.Add("44 Contrabass")
            ListGS.Items.Add("45 Tremolo Strings")
            ListGS.Items.Add("46 Pizzicato Strings")
            ListGS.Items.Add("47 Orchestral Harp")
            ListGS.Items.Add("48 Timpani")
            ListGS.Items.Add("49 String Ensemble 1")
            ListGS.Items.Add("50 String Ensemble 2")
            ListGS.Items.Add("51 Synth Strings 1")
            ListGS.Items.Add("52 Synth Strings 2")
            ListGS.Items.Add("53 Choir Aahs")
            ListGS.Items.Add("54 Voice Oohs")
            ListGS.Items.Add("55 Synth Choir")
            ListGS.Items.Add("56 Orchestra Hit")
            ListGS.Items.Add("57 Trumpet")
            ListGS.Items.Add("58 Trombone")
            ListGS.Items.Add("59 Tuba")
            ListGS.Items.Add("60 Muted Trumpet")
            ListGS.Items.Add("61 French Horn")
            ListGS.Items.Add("62 Brass Section")
            ListGS.Items.Add("63 Synth Brass 1")
            ListGS.Items.Add("64 Synth Brass 2")
            ListGS.Items.Add("65 Soprano Sax")
            ListGS.Items.Add("66 Alto Sax")
            ListGS.Items.Add("67 Tenor Sax")
            ListGS.Items.Add("68 Baritone Sax")
            ListGS.Items.Add("69 Oboe")
            ListGS.Items.Add("70 English Horn")
            ListGS.Items.Add("71 Bassoon")
            ListGS.Items.Add("72 Clarinet")
            ListGS.Items.Add("73 Piccolo")
            ListGS.Items.Add("74 Flute")
            ListGS.Items.Add("75 Recorder")
            ListGS.Items.Add("76 Pan Flute")
            ListGS.Items.Add("77 Blown bottle")
            ListGS.Items.Add("78 Shakuhachi")
            ListGS.Items.Add("79 Whistle")
            ListGS.Items.Add("80 Ocarina")
            ListGS.Items.Add("81 Lead 1 square")
            ListGS.Items.Add("82 Lead 2 sawtooth")
            ListGS.Items.Add("83 Lead 3 calliope")
            ListGS.Items.Add("84 Lead chiff")
            ListGS.Items.Add("85 Lead charang")
            ListGS.Items.Add("86 Lead voice")
            ListGS.Items.Add("87 Lead 7 fifths")
            ListGS.Items.Add("88 Lead 8 bass + lead")
            ListGS.Items.Add("89 Pad new Age")
            ListGS.Items.Add("90 Pad warm")
            ListGS.Items.Add("91 Pad 3 polysynth")
            ListGS.Items.Add("92 Pad 4 choir")
            ListGS.Items.Add("93 Pad 5 bowed")
            ListGS.Items.Add("94 Pad 6 metallic")
            ListGS.Items.Add("95 Pad 7 halo")
            ListGS.Items.Add("96 Pad 8 sweep")
            '
            ListGS.SelectedIndex = 0

            'Label42.Text = "Sounds"
            Label40.Text = "Volume"
            Label30.Text = "Reverb"
            Label41.Text = "Chorus"
            'GroupBox2.Text = "MIDI GS"
            ButtonSend.Text = "Send all"
            '
            LockageColonnes()
            '
            ' Etiquettes pour les boutons des Vues
            ' ************************************
            Label77.Text = "Default"
            Label8.Text = "Extend"
            Label81.Text = "Harmo"

            ' Bouton Init Clavier
            ' *******************
            InitClavier.Text = "Cancel keyboard"
            ' 
            TabPage17.Text = "Notes View"
            ' Télécommande
            ' ************
            Transport.Remote.Text = "Remote"
            ToolTip1.SetToolTip(Transport.Remote, "Send CTRL 54 on Play and CTRL 55 on Stop")

            ' Menu flottant Couper,Copier,Coller
            ' **********************************
            Flot_Couper.Text = "Cut"
            Flot_Copier.Text = "Copy"
            Flot_Coller.Text = "Paste"
            '
            ' Group Box de Basse-12 et 4Notes
            ' *******************************
            'GroupBox11.Text = "Bass - 12                                4Notes"
            ' Chemin du fichier ouvert
            ' ************************
            Label86.Text = "Path of the open file"
            Label87.Text = "Infos"
            ' Liste de Gammes
            ' ***************
            TagsGamme.Text = "Scales List"
            ' Notes libres pour HyperVoicing
            ' ******************************
            NomduSon.Text = "Free text for HyperVoicing user"

        Catch ex As Exception
            MessageHV.PContenuMess = "Détection d'un erreur dans procédure : " + "En_culture" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub

    Function Trad_NomCadence_FrEn(Etiquette As String) As String
        Dim a As String
        a = "Anatole"
        Select Case Trim(Etiquette)
            Case "Anatole"
                a = "Anatole"
            Case "Complète" -
                a = "Complete"
            Case "2-5-1"
                a = "2-5-1"
            Case "Demi"
                a = "Half"
            Case "Parfaite"
                a = "Perfect"
            Case "Plagale"
                a = "Plagal"
            Case "Plagale2"
                a = "Plagal2"
            Case "Rompue"
                a = "Broken"
            Case "Rompue2"
                a = "Broken2"
            Case "Rompue3"
                a = "Broken3"
            Case "Modale"
                a = "Modal"
            Case "Modale2"
                a = "Modal2"
            Case "Modale3"
                a = "Modal3"
            Case "Napolitaine"
                a = "Napolitan"
            Case "Anatole Min"
                a = "Anatole Min"
            Case "Pseudo 2-5-1"
                a = "Pseudo 2-5-1"
            Case "Plagale Min"
                a = "Minor Plagal"
            Case "Hispanique"
                a = "Hispanic"
        End Select
        Trad_NomCadence_FrEn = Trim(a)
    End Function
    Function Trad_NomCadence_EnFr(Etiquette As String) As String
        Dim a As String
        a = "Anatole"
        Select Case Trim(Etiquette)
            Case "Anatole"
                a = "Anatole"
            Case "Complete"
                a = "Complète"
            Case "2-5-1"
                a = "2-5-1"
            Case "Half"
                a = "Demi"
            Case "Perfect"
                a = "Parfaite"
            Case "Plagal"
                a = "Plagale"
            Case "Plagal2"
                a = "Plagale2"
            Case "Broken"
                a = "Rompue"
            Case "Broken2"
                a = "Rompue2"
            Case "Broken3"
                a = "Rompue3"
            Case "Modal"
                a = "Modale"
            Case "Modal2"
                a = "Modale2"
            Case "Modal3"
                a = "Modale3"
            Case "Napolitan"
                a = "Napolitaine"
            Case "Anatole Min"
                a = "Anatole Min"
            Case "Pseudo 2-5-1"
                a = "Pseudo 2-5-1"
            Case "Minor Plagal"
                a = "Plagale Min"
            Case "Hispanic"
                a = "Hispanique"
        End Select
        Trad_NomCadence_EnFr = a
    End Function
    Private Sub Form1_FormClosed(sender As Object, e As FormClosedEventArgs) Handles MyBase.FormClosed

        Try
            ' Tous les paramètres mis à jour par UpandDown sont enregistrés ici une seule fois, à la sortie de l'application
            ' **************************************************************************************************************
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NombredeBoucles", Trim(Str(Transport.LoopNumber.Value)))            ' Nombre de boucles
            'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NombreMesuresFin", Trim(Str(EndMeasureNumber.Value)))     ' Nombre de fin de mesures de fin
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéPlayback", Trim(Str(PlaybackVelocity.Value)))     ' Vélocité du playback
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéNotes", Trim(Str(NotesVelocity.Value)))           ' Vélocité des notes du pieno jouées à la souris
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéAccords", Trim(Str(ChordsVelocity.Value)))        ' Vélocité des accords cliqués sur grid1, grid2, grid3 et Tabtons 
            'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Délimiteur_Gauche", Trim(Str(Début.Value)))               ' Délimiteur gauche
            'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Délimiteur_Droit", Trim(Str(Terme.Value)))                ' Délimiteur droit
            'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Canal_MIDI", Trim(Str(NCanal1.Value)))
            'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Canal_THRU", Trim(Str(CanalThru.Value)))
            '
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminFichierOuvrir", Trim(CheminFichierOuvrir))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminEnregistrer", Trim(CheminFichierEnreg))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportCalquesMIDI", Trim(CheminFichierCalques))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportFichierMIDI", Trim(CheminFichierMIDI))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportMarqueursMIDI", Trim(CheminMarqueursMIDI))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportfichierDoc", Trim(CheminFichierExportDoc))
            '
            ' Resize de l'application
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "WidthForm", Trim(Str(Me.Size.Width)))                       ' Largeur de l'application
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "HeightForm", Trim(Str(Me.Size.Height)))                     ' Hauteur de lapplication
            'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "WidthSplitter", Trim(Str(SplitContainer2.SplitterDistance))) 'Splitter du help
            '
            ' Langue en cours
            ' My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Langue", "Langue", Trim(Langue))
            ' Mode étendue
            ' ************
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ModeEtendu", Trim(Str(FlagMode)))
            '
            ' Ecoute des EventH (CTRL+Clic)
            ' *****************************
            If GammePlusAccord.Checked Then
                My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "GammePlusAccord", "1")
            Else
                My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "GammePlusAccord", "0")
            End If
            '
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "TempoEcoute", Str(ComboBox7.SelectedIndex))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "PlayC", Trim(Str(PlayC.Value)))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "PlayN", Trim(Str(PlayN.Value)))


            Fermer_MIDI()
            '
            If ComboMidiOut.Items.Count > 0 Then
                If SortieMidi.Item(ChoixSortieMidi).IsOpen Then
                    SortieMidi.Item(ChoixSortieMidi).Close()
                End If
                Application.Exit()
            End If
            '
            ' Effacer les fichiers dans MesDocuments/Hypervoicing
            Effacer_CTemp()
            '
        Catch ex As Exception
            MessageHV.PContenuMess = "Détection erreur dans procédure : " + "Form1_FormClosed" + Constants.vbCrLf + "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Dim i, j, k As Integer

        Try
            Me.SuspendLayout()
            Me.Visible = False
            '
            ' Nom document par défaut
            ' ***********************
            EnChargement = True
            '
            ' Déclaration de taille de tableaux membres de la structure "AccordTab" pour la table "TableCoursAcc"
            ' **************************************************************************************************
            '
            For i = 0 To 2
                For j = 0 To 6
                    ReDim Preserve TableCoursAcc(i, j).Renversement(5)
                    TableCoursAcc(i, j).Marqué = False
                Next j
            Next i
            '
            For i = 0 To 6
                ReDim Preserve CAD_TableCoursAcc(i).Renversement(5)
                ReDim Preserve CAD_TableCoursAcc(i).EtendreNotes(5)
                ReDim Preserve CAD_TableCoursAcc(i).EtendreChecked(5)
                CAD_TableCoursAcc(i).Marqué = False
            Next i
            '
            For i = 0 To 2
                For j = 0 To 6
                    ReDim Preserve TableCoursAcc(i, j).EtendreNotes(5)
                    ReDim Preserve TableCoursAcc(i, j).EtendreChecked(5)
                    For k = 0 To 5
                        TableCoursAcc(i, j).EtendreNotes(k) = ""
                        TableCoursAcc(i, j).EtendreChecked(k) = False
                    Next
                Next j
            Next i
            '
            ' Appel à modification de la forme des onglets : permet de changer la couleur des onglets
            ' ***************************************************************************************
            TabControl4.DrawMode = TabDrawMode.OwnerDrawFixed ' Onglets généraux : HyperArp, PianoRoll, DrumEdit et Mix
            TabControl2.DrawMode = TabDrawMode.OwnerDrawFixed ' Dans Onglet Hypervoicing : Tonalité, Cadences, Accords Voisins, Empilement
            '
            ' tempo pour lecture des EventH par CTRL + clic
            ' *********************************************
            ComboBox7.Items.Add("60") ' Placé ici car conditionne CréationRegistry
            ComboBox7.Items.Add("80") ' Placé ici car conditionne CréationRegistry
            ComboBox7.Items.Add("100") ' 
            ComboBox7.Items.Add("120")
            ComboBox7.Items.Add("140")
            ComboBox7.Items.Add("160")
            '
            ComboBox7.SelectedIndex = 1
            LongueurCroche_ms = ((60 / Val(ComboBox7.SelectedItem)) * 1000) / 2
            '
            ' Réduction des longueurs de notes
            ' ********************************
            ComboBox8.Items.Add("0") ' 
            ComboBox8.Items.Add("1")
            ComboBox8.Items.Add("2")
            ComboBox8.Items.Add("3")
            ComboBox8.Items.Add("4") ' 
            ComboBox8.Items.Add("5")
            ComboBox8.Items.Add("6")
            ComboBox8.Items.Add("7")
            ComboBox8.Items.Add("8")
            '
            ComboBox8.SelectedIndex = 0
            ' 
            Maj_ListNotesd() ' liste des N° notes/Nom Notes en #
            Maj_ListNotesb() ' liste des N° notes/Nom Notes en b
            '
            Maj_ListN()
            Maj_ListNLatine()
            MajTabCouZone()
            Maj_Tracines() ' liste des racines des voicings
            '
            Init_Fichier()
            '
            ' Lancement de la barre de transport
            ' **********************************
            Transport.TopLevel = True
            Transport.TopMost = True
            'Transport.StartPosition = FormStartPosition.CenterScreen
            Transport.Show()
            Transport.Visible = False
            Transport.TRANSPORT_Refresh()

            ' Lecture de la base de registre de l'appli
            ' *****************************************
            CréationRegistry()
            '
            ' Création du piano
            ' *****************
            PIANO_CREATION()

            ' création des boutons pour les zones
            'CréationBoutonsZone()

            ' création TabAccords
            Maj_TMouvements() ' le mouvement des modes est toujours un mouvement de secondes
            '
            TONS_Création()
            'TONSVOISINS_Création()
            MODULATION_CREATION()
            SUBSTITUTION_CREATION()
            MODES_CREATION()

            '
            CréationTabAccords() ' création objets barre d'outils du tableau d'accord : button17, combobox22 et 23
            '
            ' Constructions
            ' *************
            Maj_TAccents("4/4")
            '
            INIT_LesPistes()
            DRUMS_Création()
            MIXAGE_Création()
            '
            Maj_DicoCouleur() ' dictionnaire des couleurs - la procédure Construction utilise les dictionnaires de couleur
            '
            Construction("4/4", 2) ' remarque la taille de l'appli (Me.size) est mise à jour dans Construction/Initgraphisme/DessinApplication2/Maj_FlagMode/ variable "hauteurApp"
            'Transport.TRANSPORT_Refresh() 'initialisation de la barre de transport avec les valeurs par défaut
            '
            PIANOROLL_Création2() 'PIANOROLL_Création2 doit être placé après Construction("4/4", 2)
            '
            ' Mise à jour des listes de gammes pour algo. de rechercher de gammes
            ' *******************************************************************
            Maj_LGam()

            ' Couleur des combobox
            ' **********************
            '
            ComboBox1.BackColor = Couleur_Accord_Majeur
            ComboBox2.BackColor = Couleur_Accord_Mineur
            ComboBox3.BackColor = Couleur_Accord_Majeur
            ComboBox4.BackColor = Couleur_Accord_Mineur           '
            '
            SélectionLignes = 0 ' valeur défaut de lignes sélectionnées dans grid1 par barres rouge et bleue
            Grid1.Range(1, 4, 1, 4).SelectCells()
            '
            ' Variables diverses
            ' ******************
            Entrée_Tonalité = "C Maj"
            EnChargement = False
            OngletCours = 0
            MesureCourante = 1

            CAD_CREATION()


            Init_Dicpiano()
            Maj_DicoNotes()
            Maj_TabNotesD_B()
            Maj_TabNotesMajD_B()
            Maj_ListN()
            '
            ' panel des boutons Tonalités, Accords, Gammes, Modes etdu libellé Nomduson, et de la jauge de chargement
            ' *******************************************************************************************************
            Dim p As New Point(770, 10)
            Dim s As New Size(500, NomduSon.Size.Height)
            PanelBoutons.Location = p
            'NomduSon.Location = p
            'NomduSon.Size = s
            'p.X = 750
            'p.Y = 0
            Jauge.Location = p

            'Dim p1 As Point
            p.X = 1273
            p.Y = 23
            CheckBoxTout.Location = p ' case à cocher "tout"
            '
            p.X = 1018
            p.Y = 13
            Button30.Location = p ' bouton "effacer"
            'PanelBoutons.Visible = False

            'AffTona()
            Init_BarresBleuRouge()
            LockageColonnes()
            '
            Splash.ShowDialog()
            '
            ' info pour utilisation de la barre espace pour jouer piste MIDI
            ' **************************************************************
            Me.KeyPreview = True
            PlayMidi.Focus()
            '
            ' Placer l'application au dessus des autres fenêtres du bureau
            ' ************************************************************
            Me.BringToFront()
            Me.FormBorderStyle = FormBorderStyle.SizableToolWindow
            '
            ' Mise à jour du pîanoroll avec l'accord de base C
            ' ***********************************************
            Maj_PianoRoll()
            Maj_DrumEdit()

            '
            ' Maj Langue pour l'onglet HyperVoicing
            ' *************************************
            EnChargement = True
            NomduSon.Text = "" ' nécessaire pour fr_culture et en_culture
            If LangueIHM = "fr" Then
                Fr_Culture()
            Else
                En_Culture()
            End If
            ListGS.SelectedIndex = 0
            EnChargement = False
            ' 
            ' Neutralisation de la tempo de lecture affichage' des mesures
            ' ************************************************************
            Tempo_Aff_EventH.Stop()
            '
            Clipboard.Clear() ' le clipboard est remis à jour régulièreement dans  'Private Sub Form1_Activated'
            Me.FormBorderStyle = FormBorderStyle.FixedSingle
            '
            ' Construction de l'onglet Stack MODE
            ' ***********************************
            Construction_Stacking()

            ' Mise à jour Vue Notes
            ' ********************
            Maj_VueNotes()


            ' * Test des interfaces MIDI en cours *
            ' *************************************
            TestInterfaceMIDI2()
            '
            ' intit du scrolling du piano
            ' ***************************
            Panel11.HorizontalScroll.Value = 0 ' Il faut écrire deux fois une valeur - pas d'explication mai ça ne fonctionne que comme ça.
            Panel11.HorizontalScroll.Value = 700


            Me.ResumeLayout()

            ' Positionnement de la barre de transport
            ' ***************************************
            Position_Transport()
            Transport.Visible = True
            '
            ' Positionnement de la vue par défaut
            ' ***********************************
            Vue_Réduite()
            Retablir.Enabled = False

            p.X = Me.Location.X
            p.Y = Me.Location.Y - 45
            Transport.Location = p
            '
            ' Mise à jour du mode C Maj par défaut dans l'onglet Modes
            ' ******************************************************** 
            MLabTon.Text = "C" 'maj de la note de tonalité
            MComboModes.SelectedIndex = 0 ' maj de C Maj (Ionien) dans le combolist des modes

            '
        Catch ex As Exception
            MessageHV.PContenuMess = Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "Form1_Load" + "." + Constants.vbCrLf +
                "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try

    End Sub
    Sub INIT_TailleTransport()

    End Sub


    Sub Maj_Tracines()

        Tracine.Add("c1")
        Tracine.Add("c#1")
        Tracine.Add("d1")
        Tracine.Add("d#1")
        Tracine.Add("e1")
        Tracine.Add("f1")
        Tracine.Add("f#1")
        Tracine.Add("g1")
        Tracine.Add("g#1")
        Tracine.Add("a1")
        Tracine.Add("a#1")
        Tracine.Add("b1")
        '
        Tracine.Add("c2")
        '
        Tracine.Add("c#2")
        Tracine.Add("d2")
        Tracine.Add("d#2")
        Tracine.Add("e2")
        Tracine.Add("f2")
        Tracine.Add("f#2")
        Tracine.Add("g2")
        Tracine.Add("g#2")
        Tracine.Add("a2")
        Tracine.Add("a#2")
        Tracine.Add("b2")
        Tracine.Add("c3")
        Tracine.Add("c#3")
        Tracine.Add("d3")
        Tracine.Add("d#3")
        Tracine.Add("e3")
        Tracine.Add("f3")
        Tracine.Add("f#3")
        Tracine.Add("g3")
        Tracine.Add("g#3")
        Tracine.Add("a3")
        Tracine.Add("a#3")
        Tracine.Add("b3")
        Tracine.Add("c4")
        Tracine.Add("c#4")
        Tracine.Add("d4")
        Tracine.Add("d#4")
        Tracine.Add("e4")
        Tracine.Add("f4")
        Tracine.Add("f#4")
        Tracine.Add("g4")
        Tracine.Add("g#4")
        Tracine.Add("a4")
        Tracine.Add("a#4")
        Tracine.Add("b4")
        Tracine.Add("c5")
        Tracine.Add("c#5")
        Tracine.Add("d5")
        Tracine.Add("d#5")
        Tracine.Add("e5")
        Tracine.Add("f5")
    End Sub


    Sub Init_BarresBleuRouge()
        Dim P1 As New Point
        Dim P2 As New Point

        P1.Y = 19
        P2.Y = 38
        '
        Label32.Location = P1
        Label33.Location = P2
        '
        Label32.Visible = True
        Label33.Visible = True
    End Sub
    '
    ' MIDI THRU : procédure de réception/ré-émission des notes on
    ' *********   -----------------------------------------------
    Private Sub Reception_NoteOn(msg As NoteOnMessage)
        'MsgBox("Note reçue : " + msg.Pitch.ToString())
        Dim dyn As Byte

        ' compression dynamique des notes entrées
        dyn = msg.Velocity
        If dyn > PlaybackVelocity.Value Then
            dyn = PlaybackVelocity.Value
        End If

        If Thru.Checked = True Then
            Dim j As Byte
            Try
                Dim dev As Midi.DeviceBase
                dev = msg.Device
                If Thru.Checked = True Then
                    If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                        SortieMidi.Item(ChoixSortieMidi).Open()
                    End If
                    '
                    SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, msg.Pitch, dyn) ' cas canal specif pour clavier : SortieMidi.Item(ChoixSortieMidi).SendNoteOn(NCanalKb.Value - 1, msg.Pitch, msg.Velocity)
                End If
                '
                ' Couleurs voyants In clavier Appli
                ' *********************************
                j = msg.Pitch
                AfficherNote = True
                '
                Touche_CouleurPréced(j) = LabelPiano.Item(j).BackColor 'LabelPianoMidiIn.Item(j).BackColor
                LabelPianoMidiIn.Item(j).BackColor = Color.Red
                'LabelPianoMidiIn.Item(j).BringToFront()
                'a = ListNotesd.Item(i)
                '
                'NoteJouerPIano_OLdbackcolor = LabelPiano.Item(i).BackColor
                'NoteJouerPiano_OldTextNote = LabelPiano.Item(i).Text
                'LabelPiano.Item(i).BackColor = Color.Yellow
                'LabelPiano.Item(i).Text = Trim(a) '+ "-" + Str(i)
            Catch ex As Exception
                MessageHV.PContenuMess = "Détection d'une erreur dans procédure : " + "Reception_NoteOn" + Constants.vbCrLf + "Message  : " + ex.Message
                MessageHV.PTypBouton = "OK"
                Cacher_FormTransparents()
                MessageHV.ShowDialog()
                End
            End Try
        End If
    End Sub

    '
    ' MIDI THRU : procédure de réception/ré-émission des notes off
    ' *********   ------------------------------------------------
    Private Sub Reception_NoteOff(msg As NoteOffMessage)
        If Thru.Checked = True Then
            Dim j As Byte
            Try
                If Thru.Checked = True Then
                    If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                        SortieMidi.Item(ChoixSortieMidi).Open()
                    End If
                    SortieMidi.Item(ChoixSortieMidi).SendNoteOff(CanalThru.Value - 1, msg.Pitch, msg.Velocity) '  cas canal specif pour clavier : SortieMidi.Item(ChoixSortieMidi).SendNoteOff(NCanalKb.Value - 1, msg.Pitch, msg.Velocity)

                End If '
                ' Couleurs voyants In clavier Appli
                ' *********************************
                j = msg.Pitch
                'LabelPianoMidiIn.Item(j).BackColor = LabelPiano(j).BackColor 'Touche_CouleurPréced
                If Touche_CouleurPréced(j) = Color.LightGreen Then
                    LabelPianoMidiIn.Item(j).BackColor = Color.White 'LabelPiano(j).BackColor 'Touche_CouleurPréced
                Else
                    LabelPianoMidiIn.Item(j).BackColor = LabelPiano(j).BackColor 'Touche_CouleurPréced
                End If

                'If Det_NoteEstDiése(j) = "#" Then
                '    LabelPianoMidiIn.Item(j).BackColor = Color.Black '
                'Else
                '    LabelPianoMidiIn.Item(j).BackColor = Color.White
                'End If
                '
                'LabelPiano.Item(i).BackColor = NoteJouerPIano_OLdbackcolor
                'LabelPiano.Item(i).Text = Trim(NoteJouerPiano_OldTextNote)
            Catch ex As Exception
            End Try
        End If
    End Sub
    '
    ' MIDI THRU : procédure de réception/ré-émission des pitchbend
    ' *********   ------------------------------------------------
    Private Sub Reception_PitchBend(msg As PitchBendMessage)
        If Thru.Checked = True Then
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendPitchBend(CanalThru.Value - 1, msg.Value)
        End If
    End Sub
    '
    ' MIDI THRU : procédure de réception/ré-émission des controleurs
    ' *********   --------------------------------------------------
    Private Sub Reception_ControlChange(msg As ControlChangeMessage)
        If Thru.Checked = True Then
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, msg.Control, msg.Value)
        End If
    End Sub
    Private Sub CheckBox9_CheckedChanged(sender As Object, e As EventArgs)
        'Ouverture_EntréeMidi()
    End Sub
    ' ******************
    ' * Création Piano *
    ' ******************
    '
    Sub PIANO_CREATION()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim t As Integer
        Dim v As Integer
        Dim CurrentLeft As Integer = 0
        '
        ' SplitContainer8.BackColor = Color.White
        '
        t = 0
        v = 0
        For i = 0 To 127 Step 12
            For j = 0 To 11
                k = i + j
                If k = 128 Then Exit For
                LabelPiano.Add(New Label)
                LabelPianoMidiIn.Add(New Label)
                '
                'Me.SplitContainer8.Panel2.Controls.Add(LabelPiano.Item(k))
                'Me.SplitContainer8.Panel2.Controls.Add(LabelPianoMidiIn.Item(k))
                '
                Panel11.Controls.Add(LabelPiano.Item(k))
                Panel11.Controls.Add(LabelPianoMidiIn.Item(k))
                LabelPianoMidiIn.Item(k).Font = New System.Drawing.Font(LabelPianoMidiIn.Item(k).Font, FontStyle.Bold)
                Select Case j
                    Case 1, 3, 6, 8, 10 ' touches noires
                        LabelPiano.Item(k).AutoSize = False
                        LabelPiano.Item(k).Size = New System.Drawing.Size(LargeurTouche, HauteurTouche - 34)
                        '
                        ' touches
                        t = CurrentLeft - (LargeurTouche / 2)
                        LabelPiano.Item(k).Location = New Point(t, 1)
                        LabelPiano.Item(k).BackColor = Color.Black
                        LabelPiano.Item(k).Visible = True
                        LabelPiano.Item(k).BorderStyle = BorderStyle.None
                        LabelPiano.Item(k).BringToFront()
                        '
                        ' diodes
                        LabelPianoMidiIn.Item(k).Size = New System.Drawing.Size(LargeurTouche - 1, 5)
                        LabelPianoMidiIn.Item(k).Location = New Point(t, 41)
                        LabelPianoMidiIn.Item(k).BackColor = Color.Black ' 
                        LabelPianoMidiIn.Item(k).BorderStyle = BorderStyle.None

                        LabelPianoMidiIn.Item(k).Visible = True ' ne pas supprimer - permet à BringToFront() de fonctionner
                        LabelPianoMidiIn.Item(k).BringToFront()

                    Case Else ' touches blanches
                        'touches

                        LabelPiano.Item(k).AutoSize = False
                        LabelPiano.Item(k).Location = New Point(CurrentLeft, 1)
                        LabelPiano.Item(k).Size = New System.Drawing.Size(LargeurTouche, HauteurTouche)
                        '
                        LabelPiano.Item(k).BackColor = Color.White
                        LabelPiano.Item(k).Visible = True
                        '
                        LabelPiano.Item(k).BorderStyle = BorderStyle.None
                        ' diodes
                        LabelPianoMidiIn.Item(k).Location = New Point(CurrentLeft, HauteurTouche + 1)
                        LabelPianoMidiIn.Item(k).Size = New System.Drawing.Size(LargeurTouche, 5)
                        LabelPianoMidiIn.Item(k).BackColor = Color.White
                        LabelPianoMidiIn.Item(k).BringToFront()
                        LabelPianoMidiIn.Item(k).Visible = True
                        '
                        LabelPianoMidiIn.Item(k).BorderStyle = BorderStyle.None
                        '
                        CurrentLeft = (CurrentLeft + LargeurTouche) - 1
                End Select
                '
                LabelPiano.Item(k).Name = "Touche:" + Str(k)
                LabelPiano.Item(k).Tag = k
                LabelPiano.Item(k).TextAlign = ContentAlignment.BottomCenter
                LabelPiano.Item(k).BorderStyle = BorderStyle.FixedSingle
                LabelPiano.Item(k).Font = New Font("Calibri", 9)
                LabelPiano.Item(k).ForeColor = Color.Blue
                LabelPiano.Item(k).TextAlign = ContentAlignment.BottomLeft
                '
                AddHandler LabelPiano.Item(k).MouseDown, AddressOf PianoClick_MouseDown
                AddHandler LabelPiano.Item(k).MouseUp, AddressOf PianoClick_MouseUp
            Next j
        Next i
        '
    End Sub
    Sub CréationBoutonsZone()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim v As Integer


        j = 0
        v = 0
        For i = 0 To (NbZones)
            '
            BoutZone.Add(New Button)
            '
            k = j + 2
            BoutZone.Item(i).Location = New Point(k, v)
            BoutZone.Item(i).Size = New System.Drawing.Size(18, 18)
            BoutZone.Item(i).Font = New Font("Calibri", 8)
            BoutZone.Item(i).Text = Trim(Str(i))
            BoutZone.Item(i).ForeColor = Color.DarkRed
            BoutZone.Item(i).TextAlign = ContentAlignment.BottomCenter
            BoutZone.Item(i).BringToFront()
            BoutZone.Item(i).Visible = False
            BoutZone.Item(i).Enabled = True
            'BoutZone.Item(i).FlatStyle = FlatStyle.Flat

            BoutZone.Item(i).Tag = i
            '
            'AddHandler BoutZone.Item(i).Click, AddressOf BoutZone_Click
            'AddHandler BoutZone.Item(i).MouseUp, AddressOf BoutZone_MouseUp
            '
            j = j + 19 '16
            If i = 3 Then
                v = 17
                j = 0
            End If
            '
        Next i
        '
        ' particularité graphique pour la zone globale
        BoutZone.Item(0).Text = ""
        '
        BoutZoneCouleur = BoutZone.Item(0).BackColor

    End Sub




    Private Sub RAZ_Clavier()
        Dim i, j, k As Integer
        For i = 0 To 127 Step 12
            For j = 0 To 11
                k = i + j
                If k = 128 Then Exit For
                Select Case j
                    Case 1, 3, 6, 8, 10
                        LabelPiano.Item(k).BackColor = Color.Black
                        LabelPiano.Item(k).Text = ""
                        LabelPianoMidiIn.Item(k).BackColor = Color.Black
                    Case Else
                        LabelPiano.Item(k).BackColor = Color.White
                        LabelPiano.Item(k).Text = ""
                        LabelPianoMidiIn.Item(k).BackColor = Color.White
                End Select
            Next j
        Next i
        '
        'Label7.Text = "" ' label d'affichage nom de la gamme en dessous des réglages
    End Sub
    Sub JouerNote(n As Byte)
        Try
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, PlaybackVelocity.Value)
            NoteCourante = n
            NoteAEtéJouée = True
            '
        Catch ex As Exception
            messa = "Problème de ressource MIDI : essayez une autre sortie MIDI Out"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerNote" + "." + Constants.vbCrLf +
                "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            NoteCourante = n
            NoteAEtéJouée = True
            'End
        End Try

    End Sub

    Sub JouerNote2(n As Byte, Ty As String)
        Dim Dyn As Byte
        Try
            If Trim(Ty) = "Accord" Then
                Dyn = PlayC.Value
            Else
                Dyn = PlayN.Value
            End If

            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, Dyn)
            NoteCourante = n
            NoteAEtéJouée = True
        Catch ex As Exception
            messa = "Problème de ressource MIDI"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerNote2" + "." + Constants.vbCrLf +
            "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Private Sub PianoClick_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
        Dim a As String
        Dim com As Label = sender
        '
        DerGridCliquée = GridCours.Piano
        'RAZ_CouleursPiano()
        a = ListNotesd.Item(Val(com.Tag))
        NoteJouerPIano_OLdbackcolor = LabelPiano.Item(Val(com.Tag)).BackColor
        NoteJouerPiano_OldTextNote = LabelPiano.Item(Val(com.Tag)).Text
        '
        LabelPiano.Item(Val(com.Tag)).BackColor = Color.Yellow
        LabelPiano.Item(Val(com.Tag)).ForeColor = Color.Black
        LabelPiano.Item(Val(com.Tag)).Text = Trim(a) + "-" + Str(com.Tag)
        '

        If e.Button() = MouseButtons.Left Then ' 
            JouerNote(Val(com.Tag))
        End If
    End Sub
    Private Sub PianoClick_MouseUp(ByVal sender As Object, ByVal e As EventArgs)
        Dim com As Label = sender
        '
        LabelPiano.Item(Val(com.Tag)).BackColor = NoteJouerPIano_OLdbackcolor
        LabelPiano.Item(Val(com.Tag)).Text = Trim(NoteJouerPiano_OldTextNote)
        '
        CouperNote(Val(com.Tag))
    End Sub
    'Private Sub PianoClick_MouseHover(ByVal sender As Object, ByVal e As EventArgs)      '
    'End Sub
    '
    Sub CouperNote(n As Byte)
        If NoteAEtéJouée = True Then
            NoteAEtéJouée = False
            If NoteCourante <> 255 Then
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    SortieMidi.Item(ChoixSortieMidi).Open()
                End If
                SortieMidi.Item(ChoixSortieMidi).SendNoteOff(CanalThru.Value - 1, n, 0)
                NoteCourante = 255
            End If
            'SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()
        End If
    End Sub
    ' ***********************
    ' * Création TabAccords *
    ' ***********************
    '
    Sub CréationTabAccords()
        '
        ComboBox1.Size = New Size(95, 20)
        ComboBox1.Location = New Point(7, 4)
        '
        ComboBox2.Size = New Size(95, 20)
        ComboBox2.Location = New Point(ComboBox1.Size.Width + 6, 4)
        '
        ' nombre de notes 
        ComboBox23.Location = New Point(5, 5) 'New Point(173, 5) ' New Point(173, 40)
        ComboBox23.Size = New Size(160, 20) ' 
        '
        ComboBox9.Location = ComboBox23.Location '
        Dim s As New Size With {
            .Height = ComboBox23.Height,
            .Width = ComboBox23.Width - 15
        }
        ComboBox9.Size = s
        '
        ComboBox6.Location = ComboBox23.Location 'New Point(2, 2)
        ComboBox6.Size = ComboBox23.Size 'New Size(160, 20) ' 
        '
        'Button17.Location = New Point(5, 2) ' '
        'Button17.Size = New Size(40, 25) ' '
        'Button17.Text = "Sel"
        '
        'TabControl4.Location = New Point(1, 34) ' 70
        'TabControl4.Size = New Size(2000, 290)
    End Sub
    Sub CAD_CREATION()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim AjoutRéglage1 As Integer
        Dim AjoutRéglage2 As Integer

        Dim PosX As Integer
        Dim PosY As Integer
        '
        Dim Longueur As Integer
        Dim Hauteur As Integer
        '
        Dim DepL As Integer
        Dim DepH As Integer
        '
        PosY = 72 '28
        PosX = 2 '
        '
        Longueur = 100
        Hauteur = 180
        '
        DepL = 0
        DepH = 10
        j = 0
        k = 1
        i = 0
        '
        AjoutRéglage1 = -5
        AjoutRéglage2 = -20
        Do '
            If i < 5 Then
                TabCadDegrés.Add(New Label)
                'Me.Panel1.Controls.Add(TabCadDegrés.Item(i))
                Me.Panel4.Controls.Add(TabCadDegrés.Item(i))
                TabCadDegrés.Item(i).Size = New System.Drawing.Size(Longueur, Hauteur / 4)
                TabCadDegrés.Item(i).BorderStyle = BorderStyle.FixedSingle
                TabCadDegrés.Item(i).TextAlign = ContentAlignment.MiddleCenter
                TabCadDegrés.Item(i).Tag = Str(i)
                TabCadDegrés.Item(i).Visible = False
                TabCadDegrés.Item(i).Font = New System.Drawing.Font("Arial", 12, FontStyle.Bold)
                TabCadDegrés.Item(i).Location = New Point(PosX + DepL, PosY + DepH + AjoutRéglage1)
                TabCadDegrés.Item(i).BackColor = Color.Khaki
                TabCadDegrés.Item(i).ForeColor = Color.Black
                TabCadDegrés.Item(i).BorderStyle = BorderStyle.Fixed3D
                TabCadDegrés.Item(i).Tag = i
            Else
                ' labels
                ' ******
                j = i - 5
                TabCad.Add(New Label)
                'Me.Panel1.Controls.Add(TabCad.Item(j))
                Me.Panel4.Controls.Add(TabCad.Item(j))
                TabCad.Item(j).Size = New System.Drawing.Size(Longueur, Hauteur / 2)
                TabCad.Item(j).BorderStyle = BorderStyle.FixedSingle
                TabCad.Item(j).TextAlign = ContentAlignment.MiddleCenter
                TabCad.Item(j).Tag = Str(j)
                TabCad.Item(j).Visible = True
                TabCad.Item(j).Font = New System.Drawing.Font("Arial", 12, FontStyle.Bold)
                TabCad.Item(j).BackColor = Couleur_Accord_Majeur
                TabCad.Item(j).Location = New Point(PosX + DepL, PosY + DepH + AjoutRéglage2)
                TabCad.Item(j).Tag = j
                '
                AddHandler TabCad.Item(j).MouseDown, AddressOf TabCad_MouseDown
                AddHandler TabCad.Item(j).MouseUp, AddressOf TabCad_MouseUp
                '
            End If


            DepL = DepL + Longueur + 8
            i = i + 1
            If i = 5 Then
                DepH = DepH + Hauteur - 85
                DepL = 0
            End If
        Loop Until i > 9
        '
        ' Construction du formulaire
        ' **************************
        CAD_Construction()
    End Sub

    Private Sub TabTCad_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
        Dim ind As Integer
        Dim com As Label = sender
        '
        ind = Val(com.Tag)
    End Sub
    Private Sub TabCadFiltres4_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
        Dim ind As Integer
        Dim com As CheckBox = sender
        Dim a As String
        Dim chiff() As String
        '
        ind = Val(com.Tag)
        a = Trim(TabCad.Item(ind).Text)
        chiff = Split(a)
        '
        Select Case Trim(chiff(1))
            Case "7(11)"
                TabCad.Item(ind).Text = Trim(Det_Tonique(a)) + " 7sus4"
            Case "11"
                TabCad.Item(ind).Text = Trim(Det_Tonique(a)) + " sus4"
            Case "7sus4"
                TabCad.Item(ind).Text = Trim(Det_Tonique(a)) + " 7(11)"
            Case "sus4"
                TabCad.Item(ind).Text = Trim(Det_Tonique(a)) + " 11"
        End Select
    End Sub
    Sub TONS_Création()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer

        Dim PosX As Integer
        Dim PosY As Integer
        '
        Dim Longueur As Integer
        Dim Hauteur As Integer
        '
        Dim DepL As Integer
        Dim DepH As Integer
        '
        PosY = 75 '65 '28
        PosX = 6 '
        '
        Longueur = 75
        Hauteur = 90 '100
        '
        DepL = 0
        DepH = 2
        j = 0
        k = 1
        i = 0
        '
        Do ' 
            TabTons.Add(New Label)
            Me.Panel8.Controls.Add(TabTons.Item(i))

            '
            j = j + 1
            '
            ' Label des accords
            ' *****************
            TabTons.Item(i).Size = New System.Drawing.Size(Longueur, Hauteur / 2)
            TabTons.Item(i).Location = New Point(PosX + DepL, PosY + DepH)
            TabTons.Item(i).BorderStyle = BorderStyle.FixedSingle

            TabTons.Item(i).Text = "C"
            TabTons.Item(i).Tag = Str(i)
            TabTons.Item(i).Visible = True
            TabTons.Item(i).TextAlign = ContentAlignment.MiddleCenter

            '
            If i <= 6 Then
                TabTons.Item(i).BackColor = Couleur_Accord_Majeur 'Couleur_Accords
                TabTons.Item(i).Font = New System.Drawing.Font("Arial", 10, FontStyle.Bold)
                TabTons.Item(i).Visible = True
            End If
            If i >= 7 And i <= 13 Then
                TabTons.Item(i).BackColor = Couleur_Accord_Mineur 'Color.LightGoldenrodYellow
                TabTons.Item(i).Font = New System.Drawing.Font("Arial", 10, FontStyle.Bold)
                TabTons.Item(i).Visible = True
            End If
            If i >= 14 And i <= 20 Then
                TabTons.Item(i).BackColor = Couleur_Accord_Mineur ' Color.LightGoldenrodYellow
                TabTons.Item(i).Font = New System.Drawing.Font("Arial", 10, FontStyle.Bold)
                TabTons.Item(i).Visible = True
            End If

            ' Evènements label Accords
            ' ************************
            AddHandler TabTons.Item(i).MouseDown, AddressOf TabTons_MouseDown
            AddHandler TabTons.Item(i).MouseUp, AddressOf TabTons_MouseUp
            'AddHandler TabTons.Item(i).MouseMove, AddressOf TabTons_MouseMove
            'AddHandler TabTons.Item(i).MouseHover, AddressOf TabTons_MouseHover
            'AddHandler TabTons.Item(i).MouseLeave, AddressOf TabTons_MouseLeave
            '
            '
            DepL = DepL + Longueur + 1
            '
            If j = 7 Then
                DepH = DepH + Hauteur - 18 '38
                j = 0
                DepL = 0
            End If
            i = i + 1
        Loop Until i > 20
        '
        ' Construction des étiquettes de titres des modes
        ' ***********************************************
        PosX = 10
        DepL = 0
        '
        PosY = 60
        '
        For i = 0 To 2
            TabTonsTitreMode.Add(New Label)
            'Me.TabPage_Tonalité.Controls.Add(TabTonsTitreMode.Item(i))
            Me.Panel8.Controls.Add(TabTonsTitreMode.Item(i))
            '
            ' Titre du mode
            ' *************
            TabTonsTitreMode.Item(i).Size = New System.Drawing.Size(300, 15)
            TabTonsTitreMode.Item(i).BorderStyle = BorderStyle.None
            TabTonsTitreMode.Item(i).Font = New System.Drawing.Font("Papyrus", 9, FontStyle.Regular)
            TabTonsTitreMode.Item(i).Location = New Point((PosX + DepL) - 3, PosY)
            Select Case i
                Case 0
                    TabTonsTitreMode.Item(i).Text = "Mode Majeur"
                    PosY = 132
                Case 1
                    TabTonsTitreMode.Item(i).Text = "Mode Mineur Harmonique"
                    PosY = 203
                Case 2
                    TabTonsTitreMode.Item(i).Text = "Mode Mineur Mélodique"

            End Select

            TabTonsTitreMode.Item(i).Visible = True

        Next i
        '
        ' Constructon des étiquettes de degrés
        ' ************************************
        Longueur = 74
        Hauteur = 20
        '
        PosX = 6 '12
        PosY = 38 '3
        '
        DepL = 0
        i = -1
        Do
            'i = i + 1
            i += 1
            TabTonsDegrés.Add(New Label)
            'Me.TabPage_Tonalité.Controls.Add(TabTonsDegrés.Item(i))
            Me.Panel8.Controls.Add(TabTonsDegrés.Item(i))
            '
            TabTonsDegrés.Item(i).Size = New System.Drawing.Size(Longueur, Hauteur)
            TabTonsDegrés.Item(i).Font = New System.Drawing.Font("Calibri", 11, FontStyle.Regular)
            TabTonsDegrés.Item(i).Location = New Point(PosX + DepL, PosY)
            TabTonsDegrés.Item(i).BorderStyle = BorderStyle.FixedSingle
            TabTonsDegrés.Item(i).TextAlign = ContentAlignment.MiddleCenter
            TabTonsDegrés.Item(i).Text = "I"
            TabTonsDegrés.Item(i).Tag = Str(i)
            TabTonsDegrés.Item(i).Visible = True
            '
            Select Case i
                Case 0
                    TabTonsDegrés.Item(i).Text = "I"
                Case 1
                    TabTonsDegrés.Item(i).Text = "II"
                Case 2
                    TabTonsDegrés.Item(i).Text = "III"
                Case 3
                    TabTonsDegrés.Item(i).Text = "IV"
                Case 4
                    TabTonsDegrés.Item(i).Text = "V"
                Case 5
                    TabTonsDegrés.Item(i).Text = "VI"
                Case 6
                    TabTonsDegrés.Item(i).Text = "VII"
            End Select
            '
            ' Evènements sur label Degrés
            ' ***************************
            AddHandler TabTonsDegrés.Item(i).MouseDown, AddressOf TabTonsDegrés_MouseDown
            '
            DepL = DepL + Longueur + 2
        Loop Until i >= 6
        '
    End Sub
    '*****************************
    '*****************************
    '**     CREATION MODES      **   
    '*****************************
    '*****************************
    Sub MODES_CREATION()
        Dim i As Integer
        Dim p As New Point
        Dim s As New Size
        Dim fnt As New System.Drawing.Font("Arial Narrow", 8, FontStyle.Regular)
        Dim fnt1 As New System.Drawing.Font("Arial Narrow", 10, FontStyle.Regular)

        ' Création du panel contenant le piano
        ' ************************************
        TabPage21.Controls.Add(MPanel1)
        p.X = 350
        p.Y = 1
        '
        s.Width = 144
        s.Height = 94
        '
        MPanel1.Location = p
        MPanel1.Size = s
        '
        MPanel1.BorderStyle = BorderStyle.FixedSingle
        MPanel1.BackColor = Color.Black
        '
        MPanel1.Visible = False
        ' Création du piano de conception d'un Mode --> le piano n'est plus utilisé tout est à visible =false
        ' *****************************************
        ' Touches blanches
        ' ----------------
        s.Width = 20 '12
        s.Height = 90 '20
        '
        p.X = 1
        p.Y = 1 '20
        For i = 0 To 6
            MListPiano.Add(New Label)
            MPanel1.Controls.Add(MListPiano.Item(i))
            MListPiano.Item(i).Size = s
            MListPiano.Item(i).Location = p
            MListPiano.Item(i).BorderStyle = BorderStyle.FixedSingle
            MListPiano.Item(i).BackColor = Color.White
            MListPiano.Item(i).Text = ""
            MListPiano.Item(i).Tag = i
            p.X = p.X + 20
            AddHandler MListPiano.Item(i).MouseDown, AddressOf MListPiano_MouseDown
            AddHandler MListPiano.Item(i).MouseUp, AddressOf MListPiano_MouseUp
            'AddHandler MListPiano.Item(i).DoubleClick, AddressOf MListPiano_DoubleClick
        Next
        ' Touches noires
        ' --------------
        '
        's.Width = 24 '12
        s.Height = 45 '20
        '
        p.X = 9
        p.Y = 1
        For i = 7 To 8
            MListPiano.Add(New Label)
            MPanel1.Controls.Add(MListPiano.Item(i))
            MListPiano.Item(i).Size = s
            MListPiano.Item(i).Location = p
            MListPiano.Item(i).BorderStyle = BorderStyle.FixedSingle
            MListPiano.Item(i).BackColor = Color.Black
            MListPiano.Item(i).Text = ""
            MListPiano.Item(i).Tag = i
            p.X = p.X + 23 '15
            MListPiano.Item(i).BringToFront()
            AddHandler MListPiano.Item(i).MouseDown, AddressOf MListPiano_MouseDown
            AddHandler MListPiano.Item(i).MouseUp, AddressOf MListPiano_MouseUp
            'AddHandler MListPiano.Item(i).DoubleClick, AddressOf MListPiano_DoubleClick
        Next
        '
        p.X = 72
        p.Y = 1
        For i = 9 To 11
            MListPiano.Add(New Label)
            MPanel1.Controls.Add(MListPiano.Item(i))
            MListPiano.Item(i).Size = s
            MListPiano.Item(i).Location = p
            MListPiano.Item(i).BorderStyle = BorderStyle.FixedSingle
            MListPiano.Item(i).BackColor = Color.Black
            MListPiano.Item(i).Text = ""
            MListPiano.Item(i).Tag = i
            p.X = p.X + 21 '15
            MListPiano.Item(i).BringToFront()
            AddHandler MListPiano.Item(i).MouseDown, AddressOf MListPiano_MouseDown
            AddHandler MListPiano.Item(i).MouseUp, AddressOf MListPiano_MouseUp
            'AddHandler MListPiano.Item(i).DoubleClick, AddressOf MListPiano_DoubleClick
        Next

        ' Combobox poour Liste des types accords : 3 ou 4 notes
        ' *****************************************************  --> plus utilisé visible = false
        TabPage21.Controls.Add(MComboTyAcc)
        MComboTyAcc.Location = New Point(5, 20) 'New Point(173, 5) ' New Point(173, 40)
        MComboTyAcc.Size = New Size(144, 20)
        MComboTyAcc.BackColor = Color.Tan
        If LangueIHM = "fr" Then
            MComboTyAcc.Items.Add(" Accords de 3 notes")
            MComboTyAcc.Items.Add(" Accords de 4 notes (7)")
        Else
            MComboTyAcc.Items.Add(" 3 notes Chords")
            MComboTyAcc.Items.Add(" 4 notes Chords (7)")
        End If
        '
        MComboTyAcc.SelectedIndex = 0
        '
        MComboTyAcc.Visible = False

        ' Combobox pour Liste des modes Grecs
        ' ************************************
        TabPage21.Controls.Add(MComboModes)
        MComboModes.Location = New Point(5, 9) 'New Point(173, 5) ' New Point(173, 40)
        MComboModes.Size = New Size(110, 24)
        '
        TabPage21.Controls.Add(MLabModes)
        MLabModes.Location = New Point(5, 29) 'New Point(173, 5) ' New Point(173, 40)
        MLabModes.AutoSize = True
        MLabModes.Font = fnt
        If LangueIHM = "fr" Then
            MLabModes.Text = "Grecs"
        Else
            MLabModes.Text = "Greeks"
        End If
        '
        MComboModes.BackColor = Color.DarkSlateGray
        MComboModes.ForeColor = Color.PaleGoldenrod
        '
        'If LangueIHM = "fr" Then
        MComboModes.Items.Add("Maj")
            MComboModes.Items.Add("Dorien")
            MComboModes.Items.Add("Phrygien")
            MComboModes.Items.Add("Lydien")
            MComboModes.Items.Add("MixoLydien")
            MComboModes.Items.Add("Eolien")
            MComboModes.Items.Add("Locrien")

        'End If
        '
        MComboModes.SelectedIndex = 1 ' on met SelectedIndex= 1 ici volontairement pour la mise à jour du tableau fonctionne en fin de Form_Load avec SelectedIndex=0
        AddHandler MComboModes.SelectedIndexChanged, AddressOf MComboModes_SelectedIndexChanged
        '
        ' 
        ' Combobox pour Liste des modes Mineures Harmonique
        ' *************************************************
        TabPage21.Controls.Add(MComboMHarm)
        MComboMHarm.Location = New Point(120, 9) 'New Point(173, 5) ' New Point(173, 40)
        MComboMHarm.Size = New Size(110, 20)
        '
        TabPage21.Controls.Add(MLabHarm)
        MLabHarm.Location = New Point(120, 29) 'New Point(173, 5) ' New Point(173, 40)
        MLabHarm.AutoSize = True
        MLabHarm.Font = fnt
        If LangueIHM = "fr" Then
            MLabHarm.Text = "Mineur Harmonique"
        Else
            MLabHarm.Text = "Harmonic Minnor"
        End If
        MComboMHarm.BackColor = Color.DarkSlateGray
        MComboMHarm.ForeColor = Color.PaleGoldenrod
        '
        MComboMHarm.Items.Add("MinH")
        '
        MComboMHarm.SelectedIndex = 0
        AddHandler MComboMHarm.SelectedIndexChanged, AddressOf MComboMHarm_SelectedIndexChanged
        '
        ' Combobox poour Liste des modes Mineures Mélodiques
        ' **************************************************
        TabPage21.Controls.Add(MComboMMel)
        MComboMMel.Location = New Point(237, 9) 'New Point(173, 5) ' New Point(173, 40)
        MComboMMel.Size = New Size(110, 20)
        '
        TabPage21.Controls.Add(MLabMel)
        MLabMel.Location = New Point(237, 29) 'New Point(173, 5) ' New Point(173, 40)

        MLabMel.AutoSize = True
        MLabMel.Font = fnt
        If LangueIHM = "fr" Then
            MLabMel.Text = "Mineur Mélodique"
        Else
            MLabMel.Text = "Melodic Minor"
        End If
        '
        MLabMel.Visible = True
        MComboMMel.BackColor = Color.DarkSlateGray
        MComboMMel.ForeColor = Color.PaleGoldenrod
        '
        MComboMMel.Items.Add("MinM")
        '
        MComboMMel.SelectedIndex = 0
        AddHandler MComboMMel.SelectedIndexChanged, AddressOf MComboMMel_SelectedIndexChanged
        '
        '
        '
        ' Combobox poour Liste des modes Mineures Synthétiques
        ' ****************************************************
        TabPage21.Controls.Add(MComboMSynth)
        MComboMSynth.Location = New Point(354, 9) 'New Point(173, 5) ' New Point(173, 40)
        MComboMSynth.Size = New Size(110, 20)
        '
        TabPage21.Controls.Add(MLabSynth)
        MLabSynth.Location = New Point(354, 29) 'New Point(173, 5) ' New Point(173, 40)
        MLabSynth.AutoSize = True
        MLabSynth.Visible = True
        MLabSynth.Font = fnt
        If LangueIHM = "fr" Then
            MLabSynth.Text = "Autres pays"
        Else
            MLabSynth.Text = "Others countries"
        End If
        MComboMSynth.BackColor = Color.DarkSlateGray
        MComboMSynth.ForeColor = Color.PaleGoldenrod
        'If LangueIHM = "fr" Then
        MComboMSynth.Items.Add("Hongrois1")
            MComboMSynth.Items.Add("Hongrois2")
            MComboMSynth.Items.Add("Balkanique")
            MComboMSynth.Items.Add("Tzigane")
            MComboMSynth.Items.Add("Bertha")
        'End If
        '
        MComboMSynth.SelectedIndex = 0
        AddHandler MComboMSynth.SelectedIndexChanged, AddressOf MComboMSynth_SelectedIndexChanged
        '
        ' Label affichage de la tonalité
        ' ******************************
        TabPage21.Controls.Add(MLabTon)
        MLabTon.Location = New Point(480, 0)
        MLabTon.AutoSize = False
        MLabTon.Size = New Size(45, 35)
        MLabTon.BorderStyle = BorderStyle.FixedSingle
        MLabTon.BackColor = Color.DarkSlateGray
        MLabTon.ForeColor = Color.PaleGoldenrod
        MLabTon.TextAlign = ContentAlignment.MiddleCenter
        MLabTon.Visible = True
        'Dim tbl() As String = Trim(ComboBox1.Text).Split
        'MLabTon.Text = tbl(0)
        MLabTon.Text = "C"
        '
        TabPage21.Controls.Add(MLabt)
        MLabt.Location = New Point(489, 33)
        MLabt.AutoSize = True
        MLabt.Font = fnt

        If LangueIHM = "fr" Then
            MLabt.Text = "Ton"
        Else
            MLabt.Text = "Tone"
        End If

        ' Gammes des accords
        ' ******************
        p.X = 0
        p.Y = 237 '213 '200 '180 '160
        Dim p1 As New Point()
        p1.X = p.X
        p1.Y = 217 '193 '80 '160 '140
        s.Height = 30
        s.Width = 65
        Dim s1 As New Size
        s1.Height = 19
        s1.Width = s.Width
        For i = 0 To 7
            MListGamAcc.Add(New Label)
            MEtiq1.Add(New Label)
            TabPage21.Controls.Add(MListGamAcc.Item(i))
            TabPage21.Controls.Add(MEtiq1.Item(i))
            '
            MListGamAcc.Item(i).AutoSize = False
            MListGamAcc.Item(i).Location = p
            MListGamAcc.Item(i).Size = s
            MListGamAcc.Item(i).BackColor = Color.Beige
            MListGamAcc.Item(i).ForeColor = Color.Black
            MListGamAcc.Item(i).BorderStyle = BorderStyle.FixedSingle
            MListGamAcc.Item(i).BringToFront()
            MListGamAcc.Item(i).Visible = False
            '
            MEtiq1.Item(i).AutoSize = False
            MEtiq1.Item(i).Location = p1
            MEtiq1.Item(i).Size = s1
            MEtiq1.Item(i).BackColor = Color.Khaki
            MEtiq1.Item(i).BorderStyle = BorderStyle.FixedSingle
            MEtiq1.Item(i).BringToFront()
            MEtiq1.Item(i).TextAlign = ContentAlignment.MiddleCenter
            MEtiq1.Item(i).Visible = False

            p.X = ((i + 1) * (s.Width)) + 5
            p1.X = p.X
            Select Case i
                Case 0
                    MEtiq1.Item(i).Text = "I"
                Case 1
                    MEtiq1.Item(i).Text = "II"
                Case 2
                    MEtiq1.Item(i).Text = "III"
                Case 3
                    MEtiq1.Item(i).Text = "IV"
                Case 4
                    MEtiq1.Item(i).Text = "V"
                Case 5
                    MEtiq1.Item(i).Text = "VI"
                Case 6
                    MEtiq1.Item(i).Text = "VII"
                Case 7
                    MEtiq1.Item(i).Text = "VIII"
            End Select
        Next
        ' Trait de séparation avec label
        ' ******************************
        p.X = 1
        p.Y = 48
        '
        s.Height = 3
        s.Width = 800

        TabPage21.Controls.Add(MLabSéparation)

        MLabSéparation.Location = p
        MLabSéparation.Size = s
        MLabSéparation.BackColor = Color.Goldenrod
        MLabSéparation.BorderStyle = BorderStyle.FixedSingle
        MLabSéparation.BringToFront()
        MLabSéparation.Visible = True
        '
        ' Label Nom de gammes
        ' *******************
        TabPage21.Controls.Add(MLabNomG)
        MLabNomG.AutoSize = False
        MLabNomG.Location = New Point(0, 50)
        MLabNomG.Size = New Size(525, 22)
        MLabNomG.BackColor = Color.Linen
        MLabNomG.BorderStyle = BorderStyle.FixedSingle
        MLabNomG.TextAlign = ContentAlignment.MiddleLeft

        ' Tableau des accords des modes
        ' *****************************
        TabPage21.Controls.Add(MGrid1)

        MGrid1.Location = New Point(0, 70)
        MGrid1.Size = New Size(545, 200)
        MGrid1.ScrollBars = ScrollBarsEnum.Vertical
        MGrid1.FixedCols = 0
        MGrid1.Rows = 40
        MGrid1.Cols = 9
        MGrid1.SelectionMode = SelectionModeEnum.ByCell
        MGrid1.DefaultRowHeight = 25
        MGrid1.Column(0).Width = 1
        MGrid1.DefaultFont = fnt1
        MGrid1.BackColor1 = ColorTranslator.FromHtml("#fff999")
        MGrid1.BackColor2 = ColorTranslator.FromHtml("#a3d39c")
        For i = 1 To MGrid1.Cols - 1
            Select Case i
                Case 1
                    MGrid1.Cell(0, i).Text = "I"
                Case 2
                    MGrid1.Cell(0, i).Text = "II"
                Case 3
                    MGrid1.Cell(0, i).Text = "III"
                Case 4
                    MGrid1.Cell(0, i).Text = "IV"
                Case 5
                    MGrid1.Cell(0, i).Text = "V"
                Case 6
                    MGrid1.Cell(0, i).Text = "VI"
                Case 7
                    MGrid1.Cell(0, i).Text = "VII"
                Case 8
                    MGrid1.Cell(0, i).Text = "VIII"
            End Select
            MGrid1.Column(i).Width = 65
        Next
        MGrid1.Column(MGrid1.Cols - 1).Width = 67
        AddHandler MGrid1.MouseDown, AddressOf MGrid1_MouseDown
        AddHandler MGrid1.MouseUp, AddressOf MGrid1_MouseUp2
    End Sub

    Sub Maj_TabModeAcc()
        Dim tbl() As String
        Dim xcol, xrow As Integer
        Dim Acc As String
        Dim i, ii, j As Integer

        init_MGrid1()
        MGrid1.AutoRedraw = False
        Dim L As New List(Of List(Of String))
        L.Add(MLresult3)
        L.Add(MLresult4)
        L.Add(MLresult5)

        ' MAJ des accordAccords
        ' *********************

        For i = 0 To L.Count - 1
            For j = 0 To L(i).Count - 1
                a = L(i)(j)
                tbl = a.Split("-")
                Acc = Trim(tbl(0))
                xcol = Val(tbl(1)) + 1
                xrow = 1
                For ii = 1 To MGrid1.Rows - 1
                    If Trim(MGrid1.Cell(ii, xcol).Text) = "" Then
                        Select Case i
                            Case 0
                                MGrid1.Cell(ii, xcol).ForeColor = Color.Red
                            Case 1
                                MGrid1.Cell(ii, xcol).ForeColor = Color.Blue
                            Case 2
                                MGrid1.Cell(ii, xcol).ForeColor = Color.Green
                        End Select

                        MGrid1.Cell(ii, xcol).Text = Acc
                        Exit For
                    Else
                        xrow = xrow + 1
                    End If
                Next
            Next
        Next
        MGrid1.AutoRedraw = True
        MGrid1.Refresh()
    End Sub
    Sub init_MGrid1()
        Dim i, j As Integer
        For i = 1 To MGrid1.Rows - 1
            For j = 1 To MGrid1.Cols - 1
                MGrid1.Cell(i, j).Text = ""
            Next
        Next
    End Sub
    Sub MComboModes_SelectedIndexChanged()
        Dim a As String = Trim(ComboBox1.Text)
        Dim b As String = Trim(MComboModes.Text)

        Dim tbl() As String = a.Split()
        a = LCase(tbl(0))
        ' Détermination des accords possibles
        ' ***********************************
        Calc_AccMode(a, b)
        '
        ' Mise à jour du tableau des accords possibles
        ' ********************************************
        Maj_TabModeAcc()
    End Sub
    Sub MComboMHarm_SelectedIndexChanged(sender As Object, e As EventArgs)
        Dim a As String = Trim(ComboBox2.Text)
        Dim b As String = Trim(MComboMHarm.Text)

        Dim tbl() As String = a.Split()
        a = LCase(tbl(0))
        ' Détermination des accords possibles
        ' ***********************************
        Calc_AccMode(a, b)
        '
        ' Mise à jour du tableau des accords possibles
        ' ********************************************
        Maj_TabModeAcc()
    End Sub
    Sub MComboMMel_SelectedIndexChanged(sender As Object, e As EventArgs)

    End Sub
    Sub MComboMSynth_SelectedIndexChanged(sender As Object, e As EventArgs)
        Dim a As String = Trim(ComboBox1.Text)
        Dim b As String = Trim(MComboMSynth.Text)

        Dim tbl() As String = a.Split()
        a = LCase(tbl(0))
        '
        Calc_AccMode(a, b)
        '
        ' Mise à jour du tableau des accords
        ' **********************************
        Maj_TabModeAcc()

    End Sub
    Sub MListPiano_MouseDown(sender As Object, e As MouseEventArgs)
        Dim com As Object = sender
        Dim i As Integer = Val(com.tag)

        ' Jouer note (à programmer)
        ' *************************
        If My.Computer.Keyboard.CtrlKeyDown Then
            If MListPiano.Item(i).BackColor = Color.Moccasin Or MListPiano.Item(i).BackColor = Color.Gold Then
                If i >= 0 And i <= 6 Then
                    MListPiano.Item(i).BackColor = Color.White
                Else
                    MListPiano.Item(i).BackColor = Color.Black
                End If
            Else
                If MListPiano.Item(i).BackColor = Color.White Then
                    MListPiano.Item(i).BackColor = Color.Moccasin
                Else
                    MListPiano.Item(i).BackColor = Color.Gold
                End If
            End If
        Else
            MSauvCouleur = MListPiano.Item(i).BackColor
            MListPiano.Item(i).BackColor = Color.Blue
            Mjouernote = True
        End If
    End Sub
    Sub MListPiano_MouseUp(sender As Object, e As MouseEventArgs)
        Dim com As Object = sender
        Dim i As Integer = Val(com.tag)
        ' Jouer note (à programmer)
        ' *************************
        If Mjouernote Then
            Mjouernote = False
            MListPiano.Item(i).BackColor = MSauvCouleur
        End If
    End Sub
    Sub Calc_AccMode(Tonique As String, gamme As String)
        Dim LTnotes As New List(Of String) From {
        "c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b", "c", "c#", "d", "d#", "e", "f", "f#",
        "g", "g#", "a", "a#", "b", "c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b"
        }
        Dim i, j As Integer
        Dim Lgam As New List(Of String)
        Dim Lacc As New List(Of String)

        '
        Dim a As String = MDicModes(gamme)
        Dim interv, nom, nb_Notes As String
        Dim tbl() As String = a.Split()
        Dim ok As Boolean = False
        Dim Degré As Integer = -1
        '
        Tonique = Trad_NoteEnD2(Tonique)
        Chargmt_Chiff()
        MLresult3.Clear()
        MLresult4.Clear()
        MLresult5.Clear()
        '
        ' Liste des notes de la gamme
        ' ***************************
        ' remarque : MLabNomG contient à la fois le nom de la gamme et les notes de la gamme
        If LangueIHM = "fr" Then
            MLabNomG.Text = "Gamme " + UCase(Tonique) + " " + gamme + " :   "
        Else
            MLabNomG.Text = "Scale " + UCase(Tonique) + " " + gamme + " :   "
        End If

        j = LTnotes.IndexOf(Tonique)
        For i = 0 To tbl.Count - 1
            Lgam.Add(LTnotes(j + Val(tbl(i))))
            MLabNomG.Text = MLabNomG.Text + LTnotes(j + Val(tbl(i))) + "  -  "
        Next
        ' Détermination de accords possibles du mode
        ' ******************************************
        For Each aa As String In Lgam
            Degré = Degré + 1
            For Each bb In LChiff
                interv = det_interv(bb)
                nom = det_nom(bb)
                nb_Notes = det_nbNotes(bb)
                '
                tbl = interv.Split
                '
                j = LTnotes.IndexOf(aa)
                '
                Lacc.Clear()
                For i = 0 To tbl.Count - 1
                    Lacc.Add(LTnotes(j + Val(tbl(i))))
                Next
                For Each a1 As String In Lacc
                    If Lgam.Contains(a1) Then
                        ok = True
                    Else
                        ok = False
                        Exit For
                    End If
                Next
                If ok = True Then
                    Select Case nb_Notes
                        Case 3
                            MLresult3.Add(Trim(UCase(aa) + " " + nom + "-" + Degré.ToString))
                        Case 4
                            MLresult4.Add(Trim(UCase(aa) + " " + nom + "-" + Degré.ToString))
                        Case 5
                            MLresult5.Add(Trim(UCase(aa) + " " + nom + "-" + Degré.ToString))
                    End Select
                End If
            Next
        Next
    End Sub
    Function det_interv(a As String) As String
        Dim tbl() As String = a.Split
        Dim interv As String = ""
        For i = 0 To tbl.Count - 3
            interv = interv + tbl(i) + " "
        Next
        Return Trim(interv)
    End Function
    Function det_nom(a As String) As String
        Dim tbl() As String = a.Split
        Return tbl(tbl.Count - 2)
    End Function
    Function det_nbNotes(a As String) As String
        Dim tbl() As String = a.Split
        Return tbl(tbl.Count - 1)
    End Function
    Sub Chargmt_Chiff()
        LChiff.Clear()
        ' Accords de 3 notes
        LChiff.Add("0 4 7   3")               ' C               1
        LChiff.Add("0 3 7 m 3")               ' C m             2
        LChiff.Add("0 3 6 mb5 3")             ' C mb5           3
        LChiff.Add("0 4 8 5# 3")              ' C 5#            4
        LChiff.Add("0 5 7 sus4 3")            ' C sus4          5
        ' Accords de 4 notes
        LChiff.Add("0 4 7 11 M7 4")           ' C M7            6
        LChiff.Add("0 3 6 9 7Dim 4")          ' C 7Dim           7
        LChiff.Add("0 4 7 10 7 4")            ' C 7             8
        LChiff.Add("0 5 7 10 7sus4 4")        ' C 7sus4         9
        LChiff.Add("0 3 7 11 mM7 4")          ' C mM7           10
        LChiff.Add("0 3 7 10 m7 4")           ' C m7            11
        LChiff.Add("0 3 6 10 m7b5 4")         ' C m7b5          12
        LChiff.Add("0 4 8 11 M75# 4")         ' CM75#           13
        LChiff.Add("0 4 7 14 9 4")            ' C9              14
        LChiff.Add("0 4 7 13 b9 4")           ' Cb9             15
        LChiff.Add("0 4 7 17 11 4")           ' C 11            16
        LChiff.Add("0 4 7 18 11# 4")          ' C 11#           17
        LChiff.Add("0 3 7 14 m9 4")           ' C m9            18
        LChiff.Add("0 3 7 17 m11 4")          ' C m11           19
        ' Accord de 5 notes
        LChiff.Add("0 4 7 11 14 M7(9) 5")     ' C M7(9) ok      20
        LChiff.Add("0 3 7 10 17 m7(11) 5")    ' C m7(11) ok     21
        LChiff.Add("0 4 7 11 18 M7(11#) 5")   ' C M7(11#) ok    22
        LChiff.Add("0 4 7 10 14 7(9) 5")      ' C 7(9) ok       23
        LChiff.Add("0 4 7 10 17 7(11) 5")     ' C 7(11) ok      24
        LChiff.Add("0 3 7 10 14 m7(9) 5")     ' C m7(9) ok      25
        LChiff.Add("0 3 7 10 13 m7(b9) 5")    ' C m7(b9) ok     26
        LChiff.Add("0 3 7 11 14 mM7(9) 5")    ' C mM7(9) ok     27
        LChiff.Add("0 4 7 10 13 7(b9) 5")     ' C7(b9) ok       28

    End Sub
    '
    Sub MGrid1_MouseDown(sender As Object, e As MouseEventArgs)
        Dim i As Integer = MGrid1.MouseRow
        Dim j As Integer = MGrid1.MouseCol

        ' Jouer l'accord
        ' **************
        If My.Computer.Keyboard.CtrlKeyDown And Trim(MGrid1.Cell(i, j).Text) <> "" Then
            JouerAccordLabel(Trim(MGrid1.Cell(i, j).Text))
        End If

        ' Opération de glisser/déposer
        ' ****************************

        If Not My.Computer.Keyboard.CtrlKeyDown Then
            Valeur_Drag = ""

            If Trim((MGrid1.Cell(i, j).Text)) <> "" And i > 0 Then
                MGrid1.DoDragDrop(Trim(MGrid1.Cell(i, j).Text), DragDropEffects.Copy Or DragDropEffects.Move)
            End If

            If Trim(Valeur_Drag) <> "" Then
                ' Mise à jour paramètres d'écriture
                ' *********************************
                Dim tbl() As String = MLabNomG.Text.Split()
                Dim Mode = tbl(1) + " " + tbl(2)
                '
                Flag_EcrDragDrop = True
                'Valeur_Drag = Trim(MGrid1.Cell(i, j).Text) ' MGrid1.ActiveCell.Text ' accord à écrire
                OrigineAccord = Modes.Modaux
                AccordMarqué = Trim(MGrid1.Cell(i, j).Text)
                Entrée_Accord = Trim(MGrid1.Cell(i, j).Text)    ' Entrée_Accord
                Entrée_Mode = Mode                       ' Entrée_Mode
                Entrée_Gamme = Mode                       ' Entrée_Gamme
                tbl = Trim(ComboBox1.Text).Split
                Entrée_Tonalité = tbl(0) + " " + "Maj"    ' Entrée_Tonalité
                Entrée_Degré = j - 1 'MGrid1.ActiveCell.Col  ' Entrée_Degré
                '
                ' Ecriture de l'accord
                ' *******************
                Maj_DragDrop()
                '
                Flag_EcrDragDrop = False
                Valeur_Drag = ""
                Colonne_Drag = -1
                Ligne_Drag = -1

            End If
        End If

        '


    End Sub
    Sub MGrid1_MouseUp2(sender As Object, e As MouseEventArgs)
        'MGrid1.SelectionMode = SelectionModeEnum.ByCell
        'MGrid1.DisplayFocusRect = True
        'Dim tbl() As String = MLabNomG.Text.Split()
        'Dim Mode = tbl(1) + " " + tbl(2)
        ''
        '' Simulation d'un glisser/déposer (pour l'écriturGe de l'accord)
        '' **********************************************G***************
        'If My.Computer.Keyboard.ShiftKeyDown Then
        'GridDest = TGridDest.Grid2
        'Colonne_Drag = Grid2.ActiveCell.Col
        'Ligne_Drag = Grid2.ActiveCell.Row
        'GridDest = TGridDest.Grid2
        'End If
        ''
        'If My.Computer.Keyboard.AltKeyDown Then
        'GridDest = TGridDest.Grid3
        'Colonne_Drag = Grid3.ActiveCell.Col
        'Ligne_Drag = Grid3.ActiveCell.Row
        'GridDest = TGridDest.Grid3
        'End If
        ''
        '' Mise à jour paramètres d'écriture
        '' *********************************
        'Flag_EcrDragDrop = True
        'Valeur_Drag = MGrid1.ActiveCell.Text ' accord à écrire
        'OrigineAccord = Modes.Modaux
        'AccordMarqué = MGrid1.ActiveCell.Text
        'Entrée_Accord = MGrid1.ActiveCell.Text    ' Entrée_Accord
        'Entrée_Mode = Mode                        ' Entrée_Mode
        'Entrée_Gamme = Mode                       ' Entrée_Gamme
        'tbl = Trim(ComboBox1.Text).Split
        'Entrée_Tonalité = tbl(0) + " " + "Maj"    ' Entrée_Tonalité
        'Entrée_Degré = MGrid1.ActiveCell.Col - 1  ' Entrée_Degré
        '
        ' Ecriture de l'accord
        ' *******************
        'Maj_DragDrop()
        '
        'Flag_EcrDragDrop = False
        'Valeur_Drag = ""
        'Colonne_Drag = -1
        'Ligne_Drag = -1

        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
    End Sub
    Sub ECR_MODES(Mgridest As TGridDest)
        Dim tbl() As String = MLabNomG.Text.Split()
        Dim Mode = tbl(1) + " " + tbl(2)
        '
        ' Simulation d'un glisser/déposer (pour l'écriture de l'accord)
        ' *************************************************************
        If Mgridest = TGridDest.Grid2 Then
            GridDest = TGridDest.Grid2
            Colonne_Drag = Grid2.ActiveCell.Col
            Ligne_Drag = Grid2.ActiveCell.Row
            GridDest = TGridDest.Grid2
        Else
            GridDest = TGridDest.Grid3
            Colonne_Drag = Grid3.ActiveCell.Col
            Ligne_Drag = Grid3.ActiveCell.Row
            GridDest = TGridDest.Grid3
        End If
        '
        ' Mise à jour paramètres d'écriture
        ' *********************************
        Flag_EcrDragDrop = True
        Valeur_Drag = MGrid1.ActiveCell.Text ' accord à écrire
        OrigineAccord = Modes.Modaux
        AccordMarqué = MGrid1.ActiveCell.Text
        Entrée_Accord = MGrid1.ActiveCell.Text    ' Entrée_Accord
        Entrée_Mode = Mode                        ' Entrée_Mode
        Entrée_Gamme = Mode                       ' Entrée_Gamme
        tbl = Trim(ComboBox1.Text).Split
        Entrée_Tonalité = tbl(0) + " " + "Maj"    ' Entrée_Tonalité
        Entrée_Degré = MGrid1.ActiveCell.Col - 1  ' Entrée_Degré
        '
        ' Ecriture de l'accord
        ' *******************
        Maj_DragDrop()
        '
        Flag_EcrDragDrop = False
        Valeur_Drag = ""
        Colonne_Drag = -1
        Ligne_Drag = -1
    End Sub
    '
    '*****************************
    '*****************************
    '** CREATION SUSTITUTION    **   
    '*****************************
    '*****************************
    Sub SUBSTITUTION_CREATION()
        Dim i As Integer
        Dim p As New Point
        Dim s As New Size

        Label67.Text = "---"
        Label73.Text = ""

        ' Cration des Labels
        ' ******************
        For i = 0 To 3
            LabSubsti.Add(New Label)
            Panel14.Controls.Add(LabSubsti.Item(i))
            'LabSubsti.Item(i).BackColor = Color.Goldenrod
            LabSubsti.Item(i).ForeColor = Color.Black
            LabSubsti.Item(i).Font = New Font("Arial Narrow", 18, FontStyle.Bold)
            LabSubsti.Item(i).TextAlign = ContentAlignment.MiddleCenter
            LabSubsti.Item(i).Text = "---"
            LabSubsti.Item(i).BringToFront()
            LabSubsti.Item(i).Tag = i

            Select Case i
                Case 0
                    p.X = 2
                    p.Y = 40
                    s.Width = 175
                    s.Height = 131
                    LabSubsti.Item(i).Location = p
                    LabSubsti.Item(i).Size = s
                    LabSubsti.Item(i).BackColor = ColorTranslator.FromHtml("#7cc576")

                Case 1
                    p.X = 191
                    p.Y = 40
                    s.Width = 175
                    s.Height = 60
                    LabSubsti.Item(i).Location = p
                    LabSubsti.Item(i).Size = s
                    LabSubsti.Item(i).BackColor = ColorTranslator.FromHtml("#448ccb")
                Case 2
                    p.X = 191
                    p.Y = 112
                    s.Width = 175
                    s.Height = 60
                    LabSubsti.Item(i).Location = p
                    LabSubsti.Item(i).Size = s
                    LabSubsti.Item(i).BackColor = ColorTranslator.FromHtml("#448ccb")
                Case 3
                    p.X = 376
                    p.Y = 40
                    s.Width = 175
                    s.Height = 131
                    LabSubsti.Item(i).Location = p
                    LabSubsti.Item(i).Size = s
                    LabSubsti.Item(i).BackColor = ColorTranslator.FromHtml("#f26c4f")
            End Select
            AddHandler LabSubsti.Item(i).MouseDown, AddressOf LabSubsti_MouseDown
            AddHandler LabSubsti.Item(i).MouseUp, AddressOf LabSubsti_MouseUp
        Next
        If LangueIHM = "fr" Then
            Label70.Text = "Ton mineur"
            Label71.Text = "Diatonique"
            Label72.Text = "V de tonique"
        Else
            Label70.Text = "Minor key"
            Label71.Text = "Diatonic"
            Label72.Text = "V of key"
        End If
    End Sub
    Private Sub LabSubsti_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        Dim com As Label = sender
        Dim ind As Integer = Val(com.Tag) ' numéro du label
        Dim a As String
        Dim tbl() As String


        ' Jouer l'accord avec CTRL + clic
        ' *******************************
        If e.Button() = MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown Then
            a = Trim(LabSubsti(ind).Text)
            If a <> "" And a <> "---" Then
                JouerAccordLabel(a)
            End If
        End If

        ' Mise en place du glisser/déposer
        ' ********************************
        If Not My.Computer.Keyboard.CtrlKeyDown And Trim(LabSubsti.Item(ind).Text) <> "---" And Trim(LabSubsti.Item(ind).Text) <> "N/A" Then

            tbl = EventhSubsti(0).Mode.Split
            Select Case Trim(tbl(1))
                Case "Maj"
                    OrigineAccord = Modes.Majeur
                Case "MinH"
                    OrigineAccord = Modes.MineurH
                Case "MinM"
                    OrigineAccord = Modes.MineurM
            End Select
            '
            ' Maf des Entrées pour le glisser déposer/déposer
            ' ***********************************************
            If e.Button() = MouseButtons.Left And Not (My.Computer.Keyboard.CtrlKeyDown) _
            And Not (My.Computer.Keyboard.AltKeyDown) _
            And Not (My.Computer.Keyboard.ShiftKeyDown) Then
                Valeur_Drag = ""
                AccordMarqué = Trim(LabSubsti.Item(ind).Text)
                Entrée_Accord = Trim(AccordMarqué)                         ' Entrée_Accord
                Entrée_Mode = EventhSubsti(ind).Mode                       ' Entrée_Mode
                Entrée_Gamme = EventhSubsti(ind).Gamme                     ' Entrée_Gamme
                Entrée_Tonalité = EventhSubsti(ind).Tonalité               ' Entrée_Tonalité
                Entrée_Degré = EventhSubsti(ind).Degré                     ' Entrée_Degré
                '
                LabSubsti.Item(ind).DoDragDrop(Trim(LabSubsti.Item(ind).Text), DragDropEffects.Copy Or DragDropEffects.Move)
                If Trim(Valeur_Drag) <> "" Then
                    Maj_DragDrop()
                End If
            End If
        End If

    End Sub
    Private Sub LabSubsti_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
    End Sub

    Sub MODULATION_CREATION()
        Dim i, j As Integer
        Dim p As New Point
        Dim s As New Size

        '
        ' Maj distance du splitter du splitcontainer8
        ' *******************************************
        SplitContainer8.SplitterDistance = 117

        ' Remarque : Combobox9 est mis à jour dans fr_Culture et En_Culture
        ' *****************************************************************
        '
        ' Combobox14 : liste des cadences6
        ' *******************************
        If LangueIHM = "fr" Then
            ComboBox13.Items.Add("Cadence Parfaite - V I")
            ComboBox13.Items.Add("Cadence plagale - IV I")
            ComboBox13.Items.Add("Demi_cadence - II V")
            ComboBox13.Items.Add("Demi_cadence - IV V")
            ComboBox13.Items.Add("Demi_cadence - I V")
            ComboBox13.Items.Add("Cadence rompue - V VI")
        Else
            ComboBox13.Items.Add("Perfect cadence - V I")
            ComboBox13.Items.Add("Plagal cadence - IV I")
            ComboBox13.Items.Add("Half_cadence - II V")
            ComboBox13.Items.Add("Half_cadence - IV V")
            ComboBox13.Items.Add("Half_cadence - I V")
            ComboBox13.Items.Add("Decept. cadence - V VI")
        End If
        '
        ComboBox13.SelectedIndex = 0
        '
        ' Construction de la grille
        ' *************************
        Grid5.AllowDrop = True
        '
        Grid5.Cols = 8
        Grid5.Rows = 20
        '
        Grid5.SelectionMode = FlexCell.SelectionModeEnum.ByRow
        Grid5.Selection.BackColor = Color.Transparent
        Grid5.SelectionBorderColor = Color.Transparent
        '
        Grid5.DefaultFont = New Font("Verdana", 8, FontStyle.Regular)
        Grid5.FixedCols = 1
        Grid5.FixedRows = 2
        '
        Grid5.ScrollBars = ScrollBarsEnum.Both
        '
        For i = 0 To 1
            For j = 0 To Grid5.Cols - 1
                Grid5.Cell(i, j).ForeColor = Color.Black

            Next
        Next

        For i = 0 To Grid5.Rows - 1
            Grid5.Cell(i, 0).ForeColor = Color.Black
        Next
        '
        Grid5.Row(0).Height = 15
        Grid5.Row(1).Height = 35
        '
        Grid5.SelectionBorderColor = Color.Black
        Grid5.BorderColor = Color.Black
        '
        Grid5.Column(0).Width = 55
        '
        For j = 1 To Grid5.Cols - 1
            Grid5.Column(j).Width = 68
            Grid5.Column(j).Alignment = AlignmentEnum.CenterCenter
        Next
        ''
        For i = 1 To Grid5.Rows - 1
            Grid5.Row(i).Height = 20 '14 '25
        Next
        'FF
        Aff_Degrés()
        '
        ' Ecriture de "Mode Actuel"
        ' ************************
        Grid5.Range(0, 0, 1, 0).MergeCells() = True
        Grid5.Cell(0, 0).WrapText = True
        Grid5.Cell(0, 0).BackColor = Grid5.BackColorFixed 'Color.Gainsboro
        Grid5.Cell(0, 0).Font = New Font("Verdana", 8, FontStyle.Italic)
        '
        Label15.BackColor = Color.Moccasin
        Label90.BackColor = ColorTranslator.FromHtml("#3cb878")
        If Module1.LangueIHM = "fr" Then
            Grid5.Cell(0, 0).Text = "Mode" + " départ"
            Label91.Text = "Mode départ"
            Label92.Text = "Accord pivot"
            Label93.Text = "Facultatif"
        Else
            Grid5.Cell(0, 0).Text = "Start" + " Mode"
            Label91.Text = "Start mode"
            Label92.Text = "Pivot chord"
            Label93.Text = "Optional"
        End If

        ' Construction de radiobuttons
        ' ****************************
        '
        p.Y = 7
        'For i = 0 To 2
        ' RadioModulat.Add(New RadioButton)
        ' RadioModulat.Item(i).Font = New Font("Verdana", 8, FontStyle.Regular)
        'SplitContainer5.Panel1.Controls.Add(RadioModulat.Item(i))
        'RadioModulat.Item(i).Tag = i
        'RadioModulat.Item(i).AutoSize = True
        'Select Case i
        'Case 0
        'p.X = 162
        'RadioModulat.Item(i).Text = "C Maj"
        'RadioModulat.Item(i).Checked = True
        'Case 1
        'p.X = 232
        'RadioModulat.Item(i).Text = "A MinH"
        'RadioModulat.Item(i).Checked = False
        'Case 2
        'p.X = 310
        'RadioModulat.Item(i).Text = "A MinM"
        'RadioModulat.Item(i).Checked = False
        'End Select
        'RadioModulat.Item(i).Location = p
        'AddHandler RadioModulat.Item(i).CheckedChanged, AddressOf RadioModulat_CheckedChanged
        'Next i
        '
        ' Création des 3 labels pour le système de modulation (LabModulat.Item(0) est inutilisé)
        ' ***************************************************

        s.Width = 83
        s.Height = 50
        '
        For i = 0 To 3
            LabModulat.Add(New Label)
            SplitContainer8.Panel2.Controls.Add(LabModulat.Item(i))
            LabModulat.Item(i).AutoSize = False
            LabModulat.Item(i).Size = s

            LabModulat.Item(i).BackColor = Color.Moccasin

            LabModulat.Item(i).BorderStyle = BorderStyle.FixedSingle
            LabModulat.Item(i).TextAlign = ContentAlignment.MiddleCenter
            LabModulat.Item(i).Font = New Font("Verdana", 8, FontStyle.Regular)
            LabModulat.Item(i).Text = "---" '"Label" + Str(i)
            LabModulat.Item(i).Tag = i
            '
            AddHandler LabModulat.Item(i).MouseDown, AddressOf LabModulat_MouseDown
            AddHandler LabModulat.Item(i).MouseUp, AddressOf LabModulat_MouseUp
        Next i
        '
        'LabModulat.Item(0).Visible = False '  LabModulat.Item(0) est inutilié
        '
        ' POSITIONNEMENTS
        ' ***************
        Dim f As New System.Drawing.Font("Verdana", 8, FontStyle.Regular)

        ' AccordPivot
        ' ***********
        LabModulat.Item(0).Location = Label4.Location  ' Accord Nouvelle tona
        LabModulat.Item(0).Size = Label4.Size
        LabModulat.Item(0).Font = f
        LabModulat.Item(0).BackColor = ColorTranslator.FromHtml("#3cb878") 'Label4.BackColor
        '
        ' Accord Nouvelle Tona
        ' ********************
        LabModulat.Item(1).Location = Label34.Location  ' Accord Nouvelle tona
        LabModulat.Item(1).Size = Label34.Size
        LabModulat.Item(1).Font = f
        LabModulat.Item(1).BackColor = Label34.BackColor
        '
        ' Cadence
        ' *******
        LabModulat.Item(2).Location = Label7.Location   ' cadence V
        LabModulat.Item(2).Size = Label7.Size
        LabModulat.Item(2).Font = f
        LabModulat.Item(2).BackColor = ColorTranslator.FromHtml("#00bff3") 'Label7.BackColor
        '
        LabModulat.Item(3).Location = Label20.Location  ' cadence I
        LabModulat.Item(3).Size = Label20.Size
        LabModulat.Item(3).Font = f
        LabModulat.Item(3).BackColor = ColorTranslator.FromHtml("#f26c4f") 'Label20.BackColor
        '
        Label79.Font = New System.Drawing.Font("Verdana", 6.75!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        '
        If LangueIHM = "fr" Then
            Label21.Text = "Accord pivot"
            Label38.Text = "2e Accord"
        Else
            Label21.Text = "Pivot chord"
            Label38.Text = "2nd Chord"
        End If
        '
        Label29.Visible = False
        ' Mise jour des couleurs
        ' **********************
        EffacerGrid5()

    End Sub

    Sub Aff_Degrés()
        Grid5.Cell(0, 1).Text = "I"
        Grid5.Cell(0, 2).Text = "II"
        Grid5.Cell(0, 3).Text = "III"
        Grid5.Cell(0, 4).Text = "IV"
        Grid5.Cell(0, 5).Text = "V"
        Grid5.Cell(0, 6).Text = "VI"
        Grid5.Cell(0, 7).Text = "VII"
    End Sub
    Private Sub LabModulat_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        Dim com As Label = sender
        Dim ind As Integer = Val(com.Tag) ' numéro du label
        Dim a As String
        Dim tbl() As String

        ' Jouer l'accord avec CTRL + clic
        ' *******************************
        If e.Button() = MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown Then
            a = Trim(LabModulat(ind).Text)
            If a <> "" And a <> "---" Then
                JouerAccordLabel(a)
            End If
        End If

        ' Mise en place du glisser/déposer
        ' ********************************
        If Not My.Computer.Keyboard.CtrlKeyDown And Trim(LabModulat.Item(ind).Text) <> "---" Then
            tbl = Label15.Text.Split
            Select Case tbl(1)
                Case "Maj"
                    OrigineAccord = Modes.Majeur
                Case "MinH"
                    OrigineAccord = Modes.MineurH
                Case "MinM"
                    OrigineAccord = Modes.MineurM
            End Select
            ' Maf des Entrées pour le glisser déposer/déposer
            ' ***********************************************
            If Trim(Lab_2) <> "---" And e.Button() = MouseButtons.Left And Not (My.Computer.Keyboard.CtrlKeyDown) _
            And Not (My.Computer.Keyboard.AltKeyDown) _
            And Not (My.Computer.Keyboard.ShiftKeyDown) Then
                Valeur_Drag = ""
                AccordMarqué = Trim(LabModulat.Item(ind).Text)
                Entrée_Accord = Trim(AccordMarqué)                       ' Entrée_Accord
                Entrée_Mode = Trim(Lab_2)                            ' Entrée_Mode
                Entrée_Gamme = Trim(Lab_2)                           ' Entrée_Gamme
                Entrée_Degré = Det_DegréDécimal(LigneCoursGrid5, Trim(AccordMarqué)) 'Det_DegréRomain(Grid5.ActiveCell.Row, Trim(AccordMarqué))  ' Entrée_Dégré
                tbl = Entrée_Mode.Split()                                ' Entrée_Tonalité
                If tbl(1) = "MinH" Or tbl(1) = "MinM" Then
                    Entrée_Tonalité = Det_RelativeMajeure2(Trim(Lab_2))
                Else
                    Entrée_Tonalité = Trim(Lab_2)
                End If
                '
                LabModulat.Item(ind).DoDragDrop(Trim(LabModulat.Item(ind).Text), DragDropEffects.Copy Or DragDropEffects.Move)
                If Trim(Valeur_Drag) <> "" Then
                    Maj_DragDrop()
                End If
            End If
        End If
    End Sub
    Private Sub LabModulat_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        '
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
    End Sub
    Private Sub RadioModulat_CheckedChanged(sender As Object, e As EventArgs)
        Maj_Modulation()
    End Sub
    'Private Function Det_TonInitial() As Integer
    ' Dim ind As Integer = 0
    '
    'If RadioModulat.Item(0).Checked Then
    '        OrigineAccord = Modes.Majeur
    '        ind = 0
    'Else
    'If RadioModulat.Item(1).Checked Then
    '           OrigineAccord = Modes.MineurH
    '          ind = 1
    'Else
    'If RadioModulat.Item(2).Checked Then
    '               OrigineAccord = Modes.MineurM
    '              ind = 2
    'End If
    'End If
    'End If
    ''
    'Return ind
    'End Function

    ' Mise à jour tonalité de départ pour la Modulation par Choix de tonalité (combobox1-Combobox2)
    ' ******************************************************************************************************
    Private Sub Maj_ModulationRadioB()
        Dim tbl1() As String = Trim(ComboBox1.Text).Split()
        Dim tbl2() As String = Trim(ComboBox2.Text).Split()
        Dim NoteM As String = Trim(tbl1(0))
        Dim Notemin As String = Trim(tbl2(0))


        '
        ' Maj des boutons radio de l'onglet Modulation
        ' ********************************************
        RadioModulat.Item(0).Text = NoteM + " " + "Maj"
        RadioModulat.Item(0).Checked = True
        RadioModulat.Item(1).Text = Notemin + " " + "MinH"
        RadioModulat.Item(1).Checked = False
        RadioModulat.Item(2).Text = Notemin + " " + "MinM"
        RadioModulat.Item(2).Checked = False
        '



    End Sub
    ' Mise à jour tonalité de départ pour la Modulation  par click sur grille de composition
    ' **************************************************************************************
    Private Sub Maj_ModulationRadioB2(ligne As Integer)
        Dim Tonique As String
        Dim typ As Integer = ComboBox9.SelectedIndex + 3
        If Trim(Grid1.Cell(ligne, 3).Text) <> "" Then
            Dim tonalité As String = Trim(Grid1.Cell(ligne, 3).Text) 'identification de la tonalité de départ
            Dim accord As String = Trim(Grid1.Cell(ligne, 4).Text) 'identification de l'accord commun de départ
            Dim tbl() As String = tonalité.Split()
            Dim Maj, Min As String
            Dim listMaj As New List(Of String) From {"C#", "F#", "B", "E", "A", "D", "G", "C", "F", "Bb", "Eb", "Ab"}
            Dim listMin As New List(Of String) From {"A#", "D#", "G#", "C#", "F#", "B", "E", "A", "D", "G", "C", "F"}
            '
            If Trim(tbl(1)) = "Maj" Then
                Maj = Trim(tbl(0))
                Min = listMin(listMaj.IndexOf(Maj))
            Else
                Min = Trim(tbl(0))
                Maj = listMin(listMin.IndexOf(Min))
            End If
            '
            ' Maj de la tonalité de départ
            ' ****************************
            Label15.Text = tonalité
            Label90.Text = accord
            '
            ' identification de l'accord
            ' **************************
            Dim acc = Trim(Grid1.Cell(ligne, 4).Text)
            '
            ' Ecriture de la tonalité de départ (sur ligne 0)
            ' *******************************************
            ' 
            tbl = Label15.Text.Split
            Tonique = Retab_Mode(Trim(tbl(0)), Trim(tbl(1)))
            a = Mode3(Trim(Tonique), Trim(tbl(1)), typ, False)
            tbl = a.Split("-")
            For j = 1 To tbl.Count
                Grid5.Cell(1, j).Text = tbl(j - 1)
            Next

            ' 
            ' Mise à jour des tonalités voisines de la tonalité principale
            ' ************************************************************
            EffacerTonVoisins()
            Maj_TonsVoisins(acc)
            RecheraccordGrid5(acc)
            '

        End If
    End Sub
    Sub RAZ_Modulation()
        Dim i, j As Integer

        For i = 1 To Grid5.Rows - 1
            For j = 1 To Grid5.Cols - 1
                Grid5.Cell(i, j).Text = ""
            Next
        Next
    End Sub
    Private Sub Maj_Modulation()
        Dim tbl() As String
        Dim typ As Integer = ComboBox9.SelectedIndex ' type accords 3 ou 4 notes

        tbl = Label15.Text.Split

        Grid5.AutoRedraw = False

        EffacerGrid5()
        '
        ' Maj de la tonalité principale (sur ligne 0)
        ' *******************************************
        Select Case tbl(1)
            Case "Maj" ' Maj
                For i = 0 To 6
                    Grid5.Cell(1, i + 1).Text = TableGlobalAcc(typ, 0, i) 'tbl1(i) ' 
                Next i
            Case "MinH" ' MinH
                For i = 0 To 6
                    Grid5.Cell(1, i + 1).Text = TableGlobalAcc(typ, 1, i) 'tbl1(i) '
                Next i
            Case "MinM" ' MinM
                For i = 0 To 6
                    Grid5.Cell(1, i + 1).Text = TableGlobalAcc(typ, 2, i) 'tbl1(i) ' 
                Next i

        End Select
        'End If

        Grid5.AutoRedraw = True
        Grid5.Refresh()
    End Sub
    Sub EffacerGrid5()
        Dim i, j As Integer

        ' Effacer la grille Grid5
        ' ***********************
        Lab_1 = "---"
        Lab_2 = "---"
        LabModulat.Item(0).Text = "---" ' non utilisée
        LabModulat.Item(1).Text = "---"
        LabModulat.Item(2).Text = "---"
        LabModulat.Item(3).Text = "---"
        Label79.ForeColor = Color.Black
        Label79.BackColor = ColorTranslator.FromHtml("#c4df9b")
        Label79.TextAlign = ContentAlignment.TopLeft
        Label80.Visible = False
        If LangueIHM = "fr" Then
            Label79.Text = "1 - Cliquer, dans la grille de composition, là où vous souhaitez créer un pont." + Chr(13) + "2 - Cliquer sur une ligne du tableau de cet onglet pour choisir une tonalité de destination"
        Else
            Label79.Text = "1 - Click, in the composition grid, where you wish to create a bridge." + Chr(13) + "2 - Click on a line in the table on this tab to choose a destination tone"

        End If
        For i = 0 To Grid5.Rows - 1
            For j = 0 To Grid5.Cols - 1
                ' Effacer toute les lignes sauf la ligne des degrés
                If i > 0 Then
                    Grid5.Cell(i, j).Text = ""
                End If
                ' Cellules contenant les tonalités d'appartenance
                If i > 1 And j > 0 Then
                    Grid5.Cell(i, j).BackColor = ColorTranslator.FromHtml("#fff799") 'Color.Moccasin
                End If
            Next
        Next
        '
    End Sub
    Sub Maj_TonsVoisins(Accord)
        Dim i, ii As Integer
        Dim tbl() As String = Accord.split()
        Dim Note As String = Trad_BemDies_Maj(tbl(0)) ' La note est exprimée en #
        Dim Typ As Integer = ComboBox9.SelectedIndex + 3 ' traduction de l'index de comobobox9 en Typ d'accord pour Mode2
        Dim chiffrage As String ' chiffrage de l'acord

        If tbl.Length = 1 Then
            chiffrage = ""
        Else
            chiffrage = Trim(tbl(1))
        End If
        ligneModulat = 1 ' cette variable est incrémentée dans Maj_Total
        ligne = 1
        ' Calcul de l'index i
        ' *******************
        'If Len(Note) = 2 Then
        'cc = Note(1)
        'End If
        Dim clef1 As String = "#" 'Trim(cc.ToString)
        Maj_TabNotes_Majus(clef1)

        For i = 0 To TabNotes.Length - 1
            If Note = TabNotes(i) Then
                Exit For
            End If
        Next i
        ' Maj du compte rendu dans onglet Pont
        ' ***********************************
        TextBox2.Visible = False
        TextBox2.Text = ""
        TextBox2.BackColor = Color.White

        '
        Select Case chiffrage
            Case ""
                'Maj
                Maj_Total(i, "Maj", Typ, clef1)            ' C Maj
                Maj_Total(i + 5, "Maj", Typ, clef1)        ' F Maj
                Maj_Total(i + 7, "Maj", Typ, clef1)        ' G Maj

                'MinH
                Maj_Total(i + 4, "MinH", Typ, clef1)       ' E MinH
                Maj_Total(i + 5, "MinH", Typ, clef1)       ' F MinH

                'MinM
                Maj_Total(i + 5, "MinM", Typ, clef1)       ' F MinM
                Maj_Total(i + 7, "MinM", Typ, clef1)       ' G MinM

            Case "m"
                'Maj
                Maj_Total(i + 3, "Maj", Typ, clef1)        ' Eb Maj
                Maj_Total(i + 8, "Maj", Typ, clef1)        ' Ab MaJ
                Maj_Total(i + 10, "Maj", Typ, clef1)       ' Bb Maj

                'MinH
                Maj_Total(i, "MinH", Typ, clef1)           ' C MinH
                Maj_Total(i + 7, "MinH", Typ, clef1)       ' G MinH

                'MinM
                Maj_Total(i, "MinM", Typ, clef1)           ' C  MinM
                Maj_Total(i + 10, "MinM", Typ, clef1)      ' Bb MinM

            Case "mb5" 'ex Cmb5
                'Maj
                Maj_Total(i + 1, "Maj", Typ, clef1)            ' Db Maj

                'MinH
                Maj_Total(i + 10, "MinH", Typ, clef1)          ' Bb MinH
                Maj_Total(i + 1, "MinH", Typ, clef1)           ' Db MinH

                'MinM
                Maj_Total(i + 1, "MinM", Typ, clef1)           ' Db  MinM
                Maj_Total(i + 3, "MinM", Typ, clef1)           ' Eb MinM

            Case "M7" 'ex C M7
                'Maj
                Maj_Total(i, "Maj", Typ, clef1)        ' C Maj
                Maj_Total(i + 7, "Maj", Typ, clef1)    ' G MAJ

                'MinH
                Maj_Total(i + 4, "MinH", Typ, clef1)   ' E MinH

            Case "7" 'ex C7
                'Maj
                Maj_Total(i + 5, "Maj", Typ, clef1)    ' F Maj

                'MinH
                Maj_Total(i + 5, "MinH", Typ, clef1)   ' F MinH

                'MinM
                Maj_Total(i + 5, "MinM", Typ, clef1)   ' F MinM
                Maj_Total(i + 7, "MinM", Typ, clef1)   ' G MinM

            Case "m7" 'ex Cm7 ou Eb6
                'Maj
                Maj_Total(i + 10, "Maj", Typ, clef1)       'Bb Maj
                Maj_Total(i + 8, "Maj", Typ, clef1)        'Ab MaJ
                Maj_Total(+3, "Maj", Typ, clef1)           'Eb Maj
                '
                'MinH
                Maj_Total(i + 7, "MinH", Typ, clef1)       'G MinH
                '
                'MinM
                Maj_Total(i + 10, "MinM", Typ, clef1)      'Bb MinM

            Case "m7b5" 'ex Cm7b5
                'Maj
                Maj_Total(i + 1, "Maj", Typ, clef1)         'Db Maj

                'MinH
                Maj_Total(i + 10, "MinH", Typ, clef1)       'Bb MinH

                'MinM
                Maj_Total(i + 1, "MinM", Typ, clef1)        'Db  MinM
                Maj_Total(i + 3, "MinM", Typ, clef1)        'Eb MinM

            Case "7Dim", "7dim"  'ex C7dim"
                'MinH
                'Pas d'autres tonalités contenant accord de 7Dim

            Case "mM7"
                'MinH
                Maj_Total(i, "MinH", Typ, clef1)               ' C MinH

                'MinM
                Maj_Total(i, "MinM", Typ, clef1)               ' C MinM
            Case Else
                TextBox2.Visible = True
                If LangueIHM = "fr" Then
                    TextBox2.Text = "Accord " + Accord + " non renconnu par le calcul.Prise en compte dans une version utlérieure d'HyperVoicing"
                Else
                    TextBox2.Text = "Accord " + Accord + " not recognized by the calculation, taken into account in a later version of HyperVoicing."
                End If
                TextBox2.ForeColor = ColorTranslator.FromHtml("#fff200")
                TextBox2.BackColor = ColorTranslator.FromHtml("#9e0b0f")
                '
                For ii = 0 To LabModulat.Count - 1 ' effacer les étiquette de résultat (en bas de l'onglet)
                    LabModulat.Item(ii).Text = ""
                Next
        End Select

    End Sub
    Sub Maj_Total(i As Integer, Mode As String, typ As Integer, clef1 As String)
        Dim j As Integer
        Dim a As String
        Dim Tonique As String
        Dim tbl() As String
        Dim TonCours As String


        a = Trim(Label15.Text)

        'Maj_TabNotes() ' cette méthode remplit TabNotes avec des notes majuscules en #
        Maj_TabNotes_Majus(clef1)
        Tonique = Trim(TabNotes(i))
        Tonique = Det_ToniqueClef(Trim(Tonique), Trim(Mode))
        TonCours = Trim(Tonique) + " " + Trim(Mode)
        If a <> TonCours Then
            ligneModulat = ligneModulat + 1

            Grid5.Cell(ligneModulat, 0).Text = Trim(TonCours)
            Grid5.Cell(ligneModulat, 0).Font = New Font("Verdana", 8, FontStyle.Regular)

            ' Calcul des accords
            Tonique = Retab_Mode(Trim(Tonique), Trim(Mode))
            a = Mode3(Trim(Tonique), Trim(Mode), typ, False)
            tbl = a.Split("-")
            ' Ecriture des accords
            For j = 0 To tbl.Length - 1
                Grid5.Cell(ligneModulat, j + 1).Text = tbl(j)
            Next j
        End If
    End Sub
    Function Det_ToniqueClef(Note As String, Mode As String) As String ' Note est transmis en #, c'est la tonique d'un Mode
        Dim a As Integer
        Det_ToniqueClef = Trim(Note)
        Clef = "#"
        If Mode = "Maj" Then
            Select Case Note
                Case "A#", "D#", "G#"
                    Det_ToniqueClef = Trad_DiesBem_Maj(Note)
                    Clef = "b"
                Case "a#", "d#", "g#"
                    a = Trad_DiesBemNote(Note)
                    a = UCaseBémol(a)
                    Clef = "b"
                Case Else
                    Clef = "#"
            End Select
        End If
    End Function
    Private Sub Grid5_MouseDown(Sender As Object, e As MouseEventArgs) Handles Grid5.MouseDown
        Dim i As Integer = Grid5.MouseRow ' remarque : ActiveCell.Row retourne 1 tandis que MouseRow retourne 0 (ça vient du fait que l'on clique sur une ligne fixe)
        Dim j As Integer = Grid5.MouseCol ' idem
        Dim a As String = Trim(Grid5.Cell(i, j).Text)   ' lecture de l'accords


        Dim r As Integer = Grid5.Selection.FirstRow
        Dim rr As Integer = Grid5.Selection.LastRow
        Dim c As Integer = Grid5.Selection.FirstCol
        Dim cc As Integer = Grid5.Selection.LastCol


        ' paramètre permettant de gérer les CTRL V, C, X de la courbes expression des voicing symphoniques
        ' ************************************************************************************************
        SousCas_OngletCours_Edition = 0

        LigneCoursGrid5 = i
        '
        ' Jouer accord de grid5
        ' *********************
        If a <> "" And e.Button() = MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown Then
            JouerAccordLabel(a)
        End If
        ''
        '' Mise à jour du tableau Grid5 et des label de modulation
        '' *******************************************************
        'If i = 1 And (j > 0 And j < 8) Then ' ligne de la tonalité courante
        'Effacerselections()
        '
        'If i = 1 Then
        'LabModulat.Item(0).Text = "---" ' non utilisée
        'LabModulat.Item(1).Text = "---"
        'LabModulat.Item(2).Text = "---"
        'LabModulat.Item(3).Text = "---"
        ''
        'Label79.ForeColor = Color.Red
        'Label80.Visible = False
        'If LangueIHM = "fr" Then
        'Label79.Text = "Veuillez choisir une Tonalité de modulation dans le tableau"
        'Else
        'Label79.Text = "Please choose a modulation tonality in the grid"
        'End If
        'End If
        '' 
        'LabModulat.Item(0).Text = Trim(Grid5.Cell(i, j).Text) ' mise à jour Accord Pivot
        '
        ''
        'EffacerTonVoisins()
        'Maj_TonsVoisins(Trim(Grid5.Cell(1, j).Text))
        'RecheraccordGrid5(Trim(Grid5.Cell(1, j).Text))
        ''
        'If r > 0 Then
        'Lab_1 = Grid5.Cell(r, c).Text 'accord sélectionné
        'Lab_2 = Trim(Grid5.Cell(r, 0).Text) ' sauvegarde de la "nouvelle tonalité"
        'Maj_Cadence(Lab_1, Lab_2)
        ''
        'Label79.ForeColor = Color.Black
        'Label79.Text = Trim(Lab_2)
        'Label80.Visible = True
        'End If
        '
        'End If
        '
        'Lab_1 = Trim(Grid5.Cell(i, j).Text) ' sauvegarde de l'accord cliqué dans Grid5
        '
        '
        If i > 1 Then ' lignes des tonalités du tableau Grid5
            Lab_1 = Trim(Label90.Text) 'Grid5.Cell(i, j).Text 'accord sélectionné
            Lab_2 = Trim(Grid5.Cell(i, 0).Text) ' sauvegarde de la "nouvelle tonalité"
            Maj_Cadence(Lab_1, Lab_2)
            '
            LabModulat.Item(0).Text = Lab_1
            LabModulat.Item(1).Text = Trim(Grid5.Cell(i, j).Text) ' Accord supplémentaire (avant la cadence)
            '
            'Label79.ForeColor = Color.Black
            'Label79.Text = Trim(Grid5.Cell(i, 0).Text)            ' Mise à jour de la "nouvelle tonalité"
            'Label80.Visible = True
        End If
    End Sub
    Private Sub Grid5_MouseUp(Sender As Object, e As MouseEventArgs) Handles Grid5.MouseUp

        '
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
    End Sub
    Function Det_TonaParMode(mode As String) As String
        Dim list1 As New List(Of String) ' tonalités majeures
        Dim list2 As New List(Of String) ' tonalités mineures H
        Dim list3 As New List(Of String) ' tonalités mineures M
        Dim a As String = "C Maj"
        Dim ind As Integer

        list1.Clear()
        '
        list1.Add("C# Maj")
        list1.Add("F# Maj")
        list1.Add("B Maj")
        list1.Add("E Maj")
        list1.Add("A Maj")
        list1.Add("D Maj")
        list1.Add("G Maj")
        list1.Add("C Maj")
        list1.Add("F Major")
        list1.Add("Bb Maj")
        list1.Add("Eb Maj")
        list1.Add("Ab Maj")
        '
        list2.Clear()
        '
        list2.Add("A# MinH")
        list2.Add("D# MinH")
        list2.Add("Gl# MinH")
        list2.Add("C# MinH")
        list2.Add("F# MinH")
        list2.Add("B MinH")
        list2.Add("E MinH")
        list2.Add("A MinH")
        list2.Add("D MinH")
        list2.Add("G MinH")
        list2.Add("C MinH")
        list2.Add("F MinH")
        '
        list3.Clear()
        '
        list3.Add("A# MinM")
        list3.Add("D# MinM")
        list3.Add("Gl# MinM")
        list3.Add("C# MinM")
        list3.Add("F# MinM")
        list3.Add("B MinM")
        list3.Add("E MinM")
        list3.Add("A MinM")
        list3.Add("D MinM")
        list3.Add("G MinM")
        list3.Add("C MinM")
        list3.Add("F MinM")
        '
        ind = list1.IndexOf(mode)
        If ind <> -1 Then
            a = mode
        Else
            ind = list2.IndexOf(mode)
            If ind <> -1 Then
                ind = list2.IndexOf(mode)
                a = list1(ind)
            Else
                ind = list3.IndexOf(mode)
                If ind <> -1 Then
                    ind = list3.IndexOf(mode)
                    a = list1(ind)
                End If
            End If
        End If
        Return a
    End Function

    Sub EffacerTonVoisins()
        Dim i, j As Integer
        For i = 2 To Grid5.Rows - 1
            For j = 1 To Grid5.Cols - 1
                Grid5.Cell(i, j).Text = ""
                Grid5.Cell(i, j).BackColor = Color.Moccasin
            Next
        Next
    End Sub
    '
    Sub JouerAccordLabel(accord)
        Dim a, b As String
        Dim tbl() As String
        Dim m As Integer
        Dim note, EcrNote As String

        Try
            a = Det_NotesAccord(Trim(accord))
            '
            a = Trad_ListeNotesEnD(a, "-") ' si des notes sont en bémol, elles sont traduites en #
            '
            tbl = Split(a, "-")
            Tonique = Trim(tbl(0))
            '
            b = Maj_NotesCommunes(Trim(a), Trim(ComboBox10.Text)) '  b = Maj_NotesCommunes(Trim(a), "c2")
            tbl = Split(b)
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open() ' ici ça plante si un autre instrument est ouvert : plantage avec la version d'essai de syntronik
            End If
            '
            AccordJouerPiano.Raz_NotesJouéesPiano()
            '
            'SortieMidi.Item(ChoixSortieMidi).SendNoteOn(0, 52, 100)
            Num_octave = -1
            For i = 0 To UBound(tbl)
                n = Val(Microsoft.VisualBasic.Right(tbl(i), 1))
                If n > Num_octave Then
                    Num_octave = n
                End If

                m = Val(ListNotesd.IndexOf(Trim(tbl(i)))) ' détermination du N° MIDI de la note
                SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, m, PlayC.Value)
                AccordJouerPiano.Notes(i) = m 'n
                AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(m).BackColor
                LabelPiano.Item(m).BackColor = Color.Yellow
                '
                note = Det_NoteSansOctave(Trim(tbl(i)))
                '
                If Trim(Clef) = "#" Then
                    EcrNote = ListNotesd(m) 'ListNotesd(n)
                Else
                    EcrNote = ListNotesb(m) 'ListNotesb(n)
                End If
                '
                If note = Tonique Then
                    LabelPiano.Item(m).ForeColor = Color.Red
                    LabelPiano.Item(m).Text = Trim(EcrNote) 'ListNotesd(n) 'Trim(tbl(i))
                Else
                    LabelPiano.Item(m).ForeColor = Color.Black
                    LabelPiano.Item(m).Text = Trim(EcrNote) 'ListNotesd(n) 'Trim(tbl(i))
                End If
            Next i
            '
            AccordAEtéJoué = True

        Catch ex As Exception
            messa = "Problème de ressources MIDI"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerSourceTabTon2" + "." + Constants.vbCrLf +
                "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try
    End Sub
    Sub Maj_Cadence(Accord As String, Ton As String)


        If Trim(Accord) <> "---" And Trim(Ton) <> "---" Then
            Dim i, j As Integer
            Dim a As String = ""
            Dim b As String = ""

            Dim tbl1() As String
            Dim tbl2() As String
            Dim tbl3() As String
            '
            ' Détermination des notes du ton dans un tableau
            ' *********************************************
            For i = 2 To Grid5.Rows - 1  ' Rechercher la ligne i du mode dans le tableau
                If Trim(Grid5.Cell(i, 0).Text = Trim(Ton)) Then
                    Exit For
                End If
            Next
            For j = 1 To 7  ' détermination des notes du ton
                a = Trim(Grid5.Cell(i, j).Text)
                b = b + a + "-"
            Next
            b = Microsoft.VisualBasic.Left(b, Len(b) - 1)
            tbl1 = b.Split("-") ' les notes du ton sont placées dans un tableau avec index de 0 à 7
            '
            ' Détermination des 2 degrés de la cadence
            ' ****************************************
            tbl2 = ComboBox13.Text.Split("-")
            tbl3 = Trim(tbl2(1)).Split()
            ' Détermination des 2 accords de la cadence
            ' ***************************************
            LabModulat.Item(2).Text = tbl1(Det_IndexDegré(tbl3(0)))
            LabModulat.Item(3).Text = tbl1(Det_IndexDegré(tbl3(1)))
            '
        End If
    End Sub
    Sub RecheraccordGrid5(Accord As String)
        Dim i, j As Integer
        Dim tbl() As String

        tbl = Accord.Split()
        If Len(tbl(0)) = 1 Then
            For i = 2 To Grid5.Rows - 1
                For j = 1 To Grid5.Cols - 1
                    If Trim(Accord) = Trim(Grid5.Cell(i, j).Text) Then
                        Grid5.Cell(i, j).BackColor = Color.Tan
                    End If
                Next
            Next
        Else
            Dim note As String = Trad_Acc_DB(tbl(0))
            Dim Accord2 As String
            If tbl.Count = 1 Then
                Accord2 = Trim(note)
            Else
                Accord2 = note + " " + tbl(1)
            End If
            For i = 2 To Grid5.Rows - 1
                For j = 1 To Grid5.Cols - 1
                    If Trim(Accord) = Trim(Grid5.Cell(i, j).Text) Or Trim(Accord2) = Trim(Grid5.Cell(i, j).Text) Then
                        Grid5.Cell(i, j).BackColor = Color.Tan
                    End If
                Next
            Next
        End If
    End Sub
    Function Trad_Acc_DB(note As String) As String
        Dim cc As Char
        Dim a As String
        cc = note(1)
        a = cc.ToString
        '
        If a = "#" Then
            Select Case note
                Case "C#"
                    Return "Db"
                Case "D#"
                    Return "Eb"
                Case "F#"
                    Return "Gb"
                Case "G#"
                    Return "Ab"
                Case "A#"
                    Return "Bb"
                Case Else
                    Return note

            End Select
        Else
            Select Case note
                Case "Db"
                    Return "C#"
                Case "Eb"
                    Return "D#"
                Case "Gb"
                    Return "F#"
                Case "Ab"
                    Return "G#"
                Case "Bb"
                    Return "A#"
                Case Else
                    Return note
            End Select
        End If
    End Function
    Sub Effacerselections()
        Dim i, j As Integer
        For i = 2 To Grid5.Rows - 1
            For j = 1 To Grid5.Cols - 1
                Grid5.Cell(i, j).BackColor = Color.Moccasin
            Next
        Next
    End Sub
    Sub TONSVOISINS_Création()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer

        Dim PosX As Integer
        Dim PosY As Integer
        '
        Dim Longueur As Integer
        Dim Hauteur As Integer
        '
        Dim DepL As Integer
        Dim DepH As Integer
        '
        PosY = 10 '65 '28
        PosX = 6 '
        '
        Longueur = 72
        Hauteur = 60 '90 '100
        '
        DepL = 0
        DepH = 0
        j = 0
        k = 1
        i = 0
        '
        Do ' 
            TabTonsVoisins.Add(New Label)
            TabTonsVoisinsMarq.Add(New CheckBox)
            '
            'Me.TabPage_Tonalité.Controls.Add(TabTons.Item(i))
            'Me.Panel12.Controls.Add(TabTonsVoisins.Item(i))
            'Me.Panel12.Controls.Add(TabTonsVoisinsMarq.Item(i))

            '
            j = j + 1
            '
            ' Label des accords
            ' *****************
            TabTonsVoisins.Item(i).Size = New System.Drawing.Size(Longueur, Hauteur / 2)
            TabTonsVoisins.Item(i).Location = New Point(PosX + DepL, PosY)
            '
            TabTonsVoisinsMarq.Item(i).Location = TabTonsVoisins.Item(i).Location
            TabTonsVoisinsMarq.Item(i).Checked = True
            TabTonsVoisinsMarq.Item(i).Text = ""
            TabTonsVoisinsMarq.Item(i).Visible = False
            TabTonsVoisinsMarq.Item(i).Size = New Size(12, 12)
            TabTonsVoisinsMarq.Item(i).Appearance = Appearance.Normal
            TabTonsVoisinsMarq.Item(i).FlatStyle = FlatStyle.Flat
            TabTonsVoisinsMarq.Item(i).BackColor = Color.Maroon
            TabTonsVoisinsMarq.Item(i).Enabled = True
            TabTonsVoisinsMarq.Item(i).FlatAppearance.BorderColor = Color.LightSlateGray
            TabTonsVoisinsMarq.Item(i).FlatAppearance.BorderSize = 1
            TabTonsVoisinsMarq.Item(i).BringToFront()

            '
            TabTonsVoisins.Item(i).BorderStyle = BorderStyle.FixedSingle
            '
            TabTonsVoisins.Item(i).Text = ""
            TabTonsVoisins.Item(i).Tag = Str(i)
            TabTonsVoisins.Item(i).Visible = True
            TabTonsVoisins.Item(i).TextAlign = ContentAlignment.MiddleCenter
            '
            TabTonsVoisins.Item(i).Font = New System.Drawing.Font("Calibri", 9, FontStyle.Bold)
            ' gestion de couleurs
            If i <= 34 Then
                If i >= 0 And i <= 6 Then
                    TabTonsVoisins.Item(i).BackColor = Couleur_TonCours
                Else
                    TabTonsVoisins.Item(i).BackColor = Couleur_Accord_Majeur 'Couleur_Accords
                End If
            Else
                TabTonsVoisins.Item(i).BackColor = Couleur_Accord_Mineur 'Color.LightGoldenrodYellow
            End If
            '
            TabTonsVoisins.Item(i).Visible = True
            '
            ' Evènements label Accords
            ' ************************
            'AddHandler TabTonsVoisins.Item(i).MouseDown, AddressOf TabTonsVoisins_MouseDown
            AddHandler TabTonsVoisins.Item(i).MouseUp, AddressOf TabTonsVoisins_MouseUp1
            'AddHandler TabTons.Item(i).MouseMove, AddressOf TabTons_MouseMove
            'AddHandler TabTons.Item(i).MouseLeave, AddressOf TabTons_MouseLeave
            '
            '
            DepL = DepL + Longueur + 1
            '
            If j = 7 Then
                'DepH = DepH + Hauteur - 25 '18' 38
                PosY = PosY + (Hauteur / 2) + 1
                j = 0
                DepL = 0
            End If
            i = i + 1
        Loop Until i > 55
        '
        ' Construction des étiquettes de titres des modes
        ' ***********************************************
        PosX = 10
        DepL = 0
        '
        PosY = 60
        '
        For i = 0 To 2
            TabTonsVTitreMode.Add(New Label)
            'Me.Panel12.Controls.Add(TabTonsVTitreMode.Item(i))
            '
            ' Titre du mode
            ' *************
            TabTonsVTitreMode.Item(i).Size = New System.Drawing.Size(300, 15)
            TabTonsVTitreMode.Item(i).BorderStyle = BorderStyle.None
            TabTonsVTitreMode.Item(i).Font = New System.Drawing.Font("Papyrus", 9, FontStyle.Regular)
            TabTonsVTitreMode.Item(i).Location = New Point((PosX + DepL) - 3, PosY)
            Select Case i
                Case 0
                    TabTonsVTitreMode.Item(i).Text = ""
                    PosY = 132
                Case 1
                    TabTonsVTitreMode.Item(i).Text = ""
                    PosY = 203
                Case 2
                    TabTonsVTitreMode.Item(i).Text = ""
            End Select

            TabTonsVTitreMode.Item(i).Visible = True
            '
        Next i
        '
        ' Constructon des étiquettes de degrés
        ' ************************************
        Longueur = 72
        Hauteur = 20
        '
        PosX = 7 '12
        PosY = 31 '3
        '
        DepL = 0
        i = -1
        Do
            i = i + 1
            TabTonsVDegrés.Add(New Label)
            'Me.Panel13.Controls.Add(TabTonsVDegrés.Item(i))
            '
            TabTonsVDegrés.Item(i).Size = New System.Drawing.Size(Longueur, Hauteur)
            TabTonsVDegrés.Item(i).Font = New System.Drawing.Font("Calibri", 11, FontStyle.Regular)
            TabTonsVDegrés.Item(i).Location = New Point(PosX + DepL, PosY)
            TabTonsVDegrés.Item(i).BorderStyle = BorderStyle.FixedSingle
            TabTonsVDegrés.Item(i).TextAlign = ContentAlignment.MiddleCenter
            TabTonsVDegrés.Item(i).Text = "I"
            TabTonsVDegrés.Item(i).Tag = Str(i)
            TabTonsVDegrés.Item(i).Visible = True
            '
            Select Case i
                Case 0
                    TabTonsVDegrés.Item(i).Text = "I"
                Case 1
                    TabTonsVDegrés.Item(i).Text = "II"
                Case 2
                    TabTonsVDegrés.Item(i).Text = "III"
                Case 3
                    TabTonsVDegrés.Item(i).Text = "IV"
                Case 4
                    TabTonsVDegrés.Item(i).Text = "V"
                Case 5
                    TabTonsVDegrés.Item(i).Text = "VI"
                Case 6
                    TabTonsVDegrés.Item(i).Text = "VII"
            End Select
            '
            ' Evènements sur label Degrés
            ' ***************************
            'AddHandler TabTonsVDegrés.Item(i).MouseDown, AddressOf TabTonsDegrés_MouseDown
            '
            DepL = DepL + Longueur + 1
        Loop Until i >= 6
        '

    End Sub
    Private Sub TabTonsDegrés_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        '
        DerGridCliquée = GridCours.TabTon
        '
    End Sub

    Private Sub TabTonsVoisins_MouseUp1(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        Dim ind As Integer
        Dim com As Label = sender
        '
        ind = Val(com.Tag)

        '
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
        '
    End Sub
    Private Function Det_NomTVoisin(ind As Integer)
        Dim a As String = Trim(TabTonsVoisins.Item(ind).Text)
        Dim n As String = ""
        '
        Select Case ind
            Case 0, 1, 2, 3, 4, 5, 6        ' ligne 1
                n = IdentNom_I(0)
            Case 7, 8, 9, 10, 11, 12, 13    ' ligne 2
                n = IdentNom_I(7)
            Case 14, 15, 16, 17, 18, 19, 20 ' ligne 3
                n = IdentNom_I(14)
            Case 21, 22, 23, 24, 25, 26, 27 ' ligne 4
                n = IdentNom_I(21)
            Case 28, 29, 30, 31, 32, 33, 34 ' ligne 5
                n = IdentNom_I(28)
            Case 35, 36, 37, 38, 39, 40, 41 ' ligne 6
                n = IdentNom_I(35)
            Case 42, 43, 44, 45, 46, 47, 48 ' ligne 7
                n = IdentNom_I(42)
            Case 49, 50, 51, 52, 53, 54, 55 ' ligne 8
                n = IdentNom_I(49)
        End Select
        Return Trim(n)
    End Function
    Private Function IdentNom_I(ind As String)
        Dim a As String
        Dim tbl() As String
        a = Trim(TabTonsVoisins.Item(ind).Text)
        tbl = a.Split
        n = tbl(0)
        Select Case ind
            Case 0, 7, 14, 21, 28
                If LangueIHM = "fr" Then
                    n = n + " " + "Majeur"
                Else
                    n = n + " " + "Major"
                End If
            Case Else
                If LangueIHM = "fr" Then
                    n = n + " " + "Mineur Harmonique"
                Else
                    n = n + " " + "Harmonic Minor"
                End If
        End Select
        Return Trim(n)
    End Function
    Private Sub TabTons_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) ' , e1 As System.Windows.Forms.MouseEventArgs
        Dim com As Label = sender
        Dim ind As Integer
        Dim i As Integer
        Dim a As String
        Dim tbl() As String
        '
        '
        ind = Val(com.Tag)
        LabelCours = ind
        '
        DerGridCliquée = GridCours.TabTon
        AccordMarqué = ""
        '
        '**********************************************
        '* Menus contextuel des accords : Mise à jour *
        '**********************************************
        Maj_TousAccordsMnContext1(ind) ' maj menu contextuel de choix d'accords sur clic droit - tous les accords possibles dans une cellule donnée
        Maj_Octave(ind)
        '
        i = ind '
        '
        ' Marquage d'un Accord dans le tableau
        ' ************************************
        If e.Button() = Windows.Forms.MouseButtons.Left Then
            MarquerAccord(ind) ' --> marquer accord 
        End If
        '
        ' Clic droit : menu contextuel
        ' ***************************
        If e.Button() = MouseButtons.Right Then '  And TabTonsSelect.Item(ind).Checked = True ' My.Computer.Keyboard.ShiftKeyDown And 
            If i <> -1 Then
                'MarquerAccord(ind)
                'TabTons.Item(ind).BackColor
                If Trim(TabTons.Item(i).Text) <> "___" Then
                    MarquerAccord(ind)
                    Accord1.Text = Trim(TabTons.Item(i).Text) ' valeur de l'accord dans menu contextuel
                    ContextMenuStrip1.Show(CType(sender, Object), e.Location)
                End If
            End If
        End If
        '
        ' Jouer Accord
        ' ************
        If e.Button() = MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown Then ' 
            'JouerAccord(i)
            a = Trim(ComboBox1.Text)
            tbl = Split(a)
            Clef = Trim(Det_Clef(tbl(0)))
            '
            Refresh()
            If ComboMidiOut.Items.Count > 0 Then
                accord = Trim(TabTons(ind).Text)
                JouerSourceTabTon2(accord, ind)
            End If

        End If
        '
        ' Pour glisser - déposer
        ' **********************
        If e.Button() = MouseButtons.Left And Not (My.Computer.Keyboard.CtrlKeyDown) And Not (My.Computer.Keyboard.AltKeyDown) _
                                            And Not (My.Computer.Keyboard.ShiftKeyDown) Then
            Select Case Val(com.Tag)' Mise à jour de OrigineAccord
                Case 0, 1, 2, 3, 4, 5, 6
                    OrigineAccord = Modes.Majeur
                Case 7, 8, 9, 10, 11, 12, 13
                    OrigineAccord = Modes.MineurH
                Case 14, 15, 16, 17, 18, 19, 20
                    OrigineAccord = Modes.MineurM
            End Select
            ' Appel du système de drag drop : DoDragDrop
            Valeur_Drag = ""
            TabTons.Item(ind).DoDragDrop(TabTons.Item(ind).Text, DragDropEffects.Copy Or DragDropEffects.Move)
            If Trim(Valeur_Drag) <> "" Then
                Maj_DragDrop()
            End If
        End If
        '
        '  
        ' Ecrire les notes de l'accord dans la text box
        ' *********************************************
        Dim AA As String = Trim(TabTons.Item(ind).Text)
        If Trim(AA) <> "" Then
            Dim tbl1() As String = AA.Split 'Trim(ComboBox1.Text).Split()
            Dim bb As String

            If Len(tbl1(0)) > 1 Then
                bb = Mid(AA, 2, 1)
                If Trim(bb) = "b" Then
                    TextBox1.Text = Det_NotesAccord3(AA, "b")
                Else
                    TextBox1.Text = Det_NotesAccord3(AA, "#")
                End If
            Else
                TextBox1.Text = Det_NotesAccord3(AA, "#")
            End If
        End If

        MouseIsDown = True
    End Sub
    Sub Maj_DragDrop()
        Dim ligne As Integer = Grid1.ActiveCell.Row

        ' Mise à jour à faire quand on vient d'un dragdrop (ajout d'un nouvel accord)
        ' ***************************************************************************

        If (Flag_EcrDragDrop = True) And (Trim(Valeur_Drag) <> "") And (Colonne_Drag <> -1) And (Ligne_Drag <> -1) Then 'And (Colonne_Drag <= nbMesures) Then
            If GridDest = TGridDest.Grid2 Then
                EcritureAccordDsGrid2(Valeur_Drag, Colonne_Drag)
                RAZ_Grid4()
                '
                Grid2.Cell(1, Colonne_Drag).SetFocus()
            End If
            '
            If GridDest = TGridDest.Grid3 And Colonne_Drag <= nbMesures * nbColonnesGrid3ParMesure And Colonne_Drag <> 0 Then
                Maj_PropriétésEntrée2()
                If Ligne_Drag = 1 Then Ligne_Drag = 2
                EcritureAccordDsGrid3(Valeur_Drag, Colonne_Drag, Ligne_Drag)
                RAZ_Grid4()

            End If
            '
            ' Mettre à jour le Piano Roll et Drumedit
            Flag_EcrDragDrop = False
            Valeur_Drag = ""
            Colonne_Drag = -1
            '
            Calcul_AutoVoicingZ()
            EcritUneFois = True
            LockageColonnes() ' loackage des colonnes de grid1 et grid4
            '
            Maj_PianoRoll()
            Maj_DrumEdit()
            Refresh_Courbexp()
        End If
        '
    End Sub
    Sub MarquerAccord(ind As Integer)
        Dim ligne As Integer
        Dim degré As Integer

        If Trim(TabTons.Item(ind).Text) <> "" And TabTons.Item(ind).Text <> "___" Then

            RAZ_CouleurMarquée()
            '
            TabTons.Item(ind).BackColor = Couleur_Accord_Marqué
            '
            TabTons.Item(ind).ForeColor = Couleur_lettres_Accord_Marqué 'Color.Yellow

            '
            TabTons.Item(ind).Refresh()

            '
            degré = Det_IndexDegré2(ind)
            ligne = Det_LigneTableGlobale(ind)
            '
            TableCoursAcc(ligne, degré).Marqué = True
            '
            AccordMarqué = Trim(TabTons.Item(ind).Text)
            '
            Select Case ligne
                Case 0
                    OrigineAccord = Modes.Majeur
                Case 1
                    OrigineAccord = Modes.MineurH
                Case 2
                    OrigineAccord = Modes.MineurM
            End Select
            '
            TabTons.Item(ind).Refresh()
        End If
    End Sub

    Function Det_AccordMarqué() As Integer
        Dim i As Integer
        '
        Det_AccordMarqué = -1
        For i = 0 To 20
            If TabTons.Item(i).BackColor = Couleur_Accord_Marqué Then
                Det_AccordMarqué = i
                Exit For
            End If
        Next
    End Function
    Sub RAZ_CouleurMarquée()
        Dim ind As Integer
        Dim ligne As Integer
        Dim degré As Integer

        For ind = 0 To 20
            degré = Det_IndexDegré2(ind)
            ligne = Det_LigneTableGlobale(ind)
            If TableCoursAcc(ligne, degré).Marqué = True Then
                TabTons.Item(ind).ForeColor = Color.Black

                Select Case ligne
                    Case 0
                        TabTons.Item(ind).BackColor = Couleur_Accord_Majeur
                        '
                    Case Else
                        TabTons.Item(ind).BackColor = Couleur_Accord_Mineur
                End Select
                '
            End If
        Next
        '
        AccordMarqué = "" ' indication absence accord marqué
    End Sub




    Sub JouerAccord(ind As Integer)
        Dim ligne As Integer
        Dim Degré As Integer
        Dim a As String
        Dim Renv As String
        Dim Oct As String
        Dim tbl() As String
        Dim m As Integer
        Dim n As Byte
        'Dim Clef As String
        Dim i As Integer
        Dim Tonique As String
        Dim Note As String
        Dim N_Octave As Integer = 3


        'If Tempo_StopJeuAccord.Enabled = False Then
        'If CheckBox1.Checked = True Then

        If AccordAEtéJoué = False Then
            If Trim(TabTons.Item(ind).Text) <> "" And TabTons.Item(ind).Text <> "___" Then
                For i = 0 To 7
                    AccordJouerPiano.Notes(i) = -1
                Next i
                Maj_TabNotes(Trim(Clef))
                tbl = Split(Det_NotesAccord(TabTons.Item(ind).Text), "-")
                Tonique = Trim(tbl(0))
                '
                'tbl = Split(ComboBox20.Text)
                'Clef = Det_Clef(tbl(0))


                ligne = Det_LigneTableGlobale(ind)
                Degré = Det_IndexDegré2(ind)
                '
                Renv = Det_ValeurRenv(ligne, Degré)
                Oct = Trim(Det_ValeurOct(ligne, Degré))
                '
                a = PlacementOctave(Renv, Oct)
                '
                tbl = Split(a)
                '
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    SortieMidi.Item(ChoixSortieMidi).Open()
                End If
                '
                AccordJouerPiano.Raz_NotesJouéesPiano()
                '
                For i = 0 To UBound(tbl)
                    m = Val(Det_NumNote(tbl(i)))
                    If i = UBound(tbl) Then
                        N_Octave = m
                    End If
                    n = Det_Etendu(ligne, Degré, i, m)
                    If i = 0 Then
                        Position_Piano(Trim(tbl(i)))
                    End If
                    SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, ChordsVelocity.Value)
                    'j = Det_NumNote(tbl(i))
                    'j = Det_EtenduNumNote(m, n, j)
                    AccordJouerPiano.Notes(i) = n
                    AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(n).BackColor
                    LabelPiano.Item(n).BackColor = Color.Yellow
                    '
                    Note = Det_NoteSansOctave(Trim(tbl(i)))
                    '

                    If Note = Tonique Then
                        LabelPiano.Item(n).ForeColor = Color.Red
                        LabelPiano.Item(n).Text = ListNotesd(n) 'Trim(tbl(i))
                    Else
                        LabelPiano.Item(n).ForeColor = Color.Blue
                        LabelPiano.Item(n).Text = ListNotesd(n) 'Trim(tbl(i))
                    End If
                Next i
                '
                Position_Clavier(N_Octave)
                AccordAEtéJoué = True
                '
            End If
        End If
    End Sub
    Function Det_Etendu(Ligne As Integer, degré As Integer, N_Note As Integer, Note As Byte) As Byte
        Dim Note1 As Integer
        Det_Etendu = Note
        If TableCoursAcc(Ligne, degré).EtendreChecked(N_Note) = True Then
            Note1 = Note + 12
            If Note1 > 127 Then
                Note1 = Note
            End If
            Det_Etendu = Note1
        End If

    End Function
    Function Det_EtenduNumNote(m As Integer, n As Integer, j As Integer) As Integer
        Dim Note1 As Integer
        Det_EtenduNumNote = j
        If m <> n Then 'signifie que la note a été étendue
            Note1 = j + 12 ' étendre le n° de ote pour l'affichage
            If Note1 > 127 Then
                Note1 = j
            End If
            Det_EtenduNumNote = Note1
        End If

    End Function

    Sub CAD_JouerAccord(ind As Integer)

        Dim a As String
        Dim Renv As String
        Dim Oct As String
        Dim tbl() As String
        Dim m As Integer
        Dim n, n1 As Integer
        Dim i As Integer
        Dim Tonique As String
        Dim Note As String
        Dim Indexdegré As Integer

        a = TabCadDegrés.Item(ind).Text
        Indexdegré = Det_IndexDegré(a)

        If AccordAEtéJoué = False Then
            'tbl = Split(Det_NotesAccord(CAD_TableCoursAcc(Indexdegré).Accord), "-")
            If Trim(TabCad.Item(ind).Text) <> "" And TabCad.Item(ind).Text <> "___" Then
                '
                For i = 0 To 7
                    AccordJouerPiano.Notes(i) = -1
                Next i
                '
                tbl = Split(Det_NotesAccord(TabCad.Item(ind).Text), "-")
                Tonique = Trim(tbl(0))
                '
                'tbl = Split(ComboBox20.Text)
                '
                Maj_TabNotes(Trim(Clef))
                '
                i = CAD_TableCoursAcc(Indexdegré).RenvChoisi
                '
                Renv = CAD_TableCoursAcc(Indexdegré).Renversement(i) 'Det_ValeurRenv(ligne, Degré)
                Oct = CAD_TableCoursAcc(Indexdegré).Octave
                '
                a = PlacementOctave(Renv, Oct)
                '
                tbl = Split(a)
                '
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    SortieMidi.Item(ChoixSortieMidi).Open()
                End If
                '
                AccordJouerPiano.Raz_NotesJouéesPiano()
                '
                Num_octave = -1
                For i = 0 To UBound(tbl)
                    m = Val(Det_NumNote(tbl(i)))
                    n1 = Val(Microsoft.VisualBasic.Right(tbl(i), 1))
                    '
                    If n1 > Num_octave Then
                        Num_octave = n1
                    End If
                    n = CAD_Det_Etendu(Indexdegré, i, m)
                    SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, 80)
                    'j = Det_NumNote(tbl(i))
                    AccordJouerPiano.Notes(i) = n
                    'j = CAD_Det_EtenduNumNote(m, n, j)
                    AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(n).BackColor
                    LabelPiano.Item(n).BackColor = Color.Yellow
                    '
                    Note = Det_NoteSansOctave(Trim(tbl(i)))
                    '
                    If Note = Tonique Then
                        LabelPiano.Item(n).ForeColor = Color.Red
                        LabelPiano.Item(n).Text = ListNotesd(n) 'Trim(tbl(i))
                    Else
                        LabelPiano.Item(n).ForeColor = Color.Blue
                        LabelPiano.Item(n).Text = ListNotesd(n) ' Trim(tbl(i))
                    End If
                Next i
                '
                AccordAEtéJoué = True
            End If
        End If
    End Sub
    Function CAD_Det_Etendu(Indexdegré As Integer, N_Note As Integer, Note As Byte) As Byte
        Dim Note1 As Integer
        CAD_Det_Etendu = Note
        If CAD_TableCoursAcc(Indexdegré).EtendreChecked(N_Note) = True Then
            Note1 = Note + 12
            If Note1 > 127 Then
                Note1 = Note
            End If
            CAD_Det_Etendu = Note1
        End If

    End Function
    Function CAD_Det_EtenduNumNote(m As Integer, n As Integer, j As Integer) As Integer
        Dim Note1 As Integer
        CAD_Det_EtenduNumNote = j
        If m <> n Then 'signifie que la note a été étendue
            Note1 = j + 12 ' étendre le n° de note pour l'affichage
            If Note1 > 127 Then
                Note1 = j
            End If
            CAD_Det_EtenduNumNote = Note1
        End If

    End Function
    Function Det_NoteSansOctave(a As String) As String
        Dim i As Integer

        i = InStr(a, "#")
        If i = 0 Then
            Det_NoteSansOctave = Mid(a, 1, 1)
        Else
            Det_NoteSansOctave = Mid(a, 1, 2)
        End If
    End Function


    Sub JouerSourceTabTon2(accord As String, ind As Integer)

        Dim a, b As String
        Dim tbl() As String
        Dim m, n As Integer
        Dim i As Integer
        Dim Tonique As String

        Dim Note, EcrNote As String

        'Dim ligne As Integer
        'Dim Degré As Integer
        '
        Try
            If AccordAEtéJoué = False Then
                'If Trim(TabTons.Item(ind).Text) <> "" And TabTons.Item(ind).Text <> "___" Then
                '
                For i = 0 To 7
                    AccordJouerPiano.Notes(i) = -1
                Next i
                '

                tbl = Split(Trim(ComboBox1.Text), " ")
                Clef = Det_Clef(tbl(0))
                '
                a = Det_NotesAccord3(Trim(accord), Clef)
                '
                a = Trad_ListeNotesEnD(a, "-") ' si des notes sont en bémol, elles sont traduites en #
                '
                tbl = Split(a, "-")
                Tonique = Trim(tbl(0))
                '
                '
                b = Maj_NotesCommunes(Trim(a), Trim(ComboBox10.Text)) '  b = Maj_NotesCommunes(Trim(a), "c2")
                tbl = Split(b)
                '
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    SortieMidi.Item(ChoixSortieMidi).Open() ' ici ça plante si un autre instrument est ouvert : plantage avec la version d'essai de syntronik
                End If
                '
                AccordJouerPiano.Raz_NotesJouéesPiano()
                '
                Num_octave = -1
                For i = 0 To UBound(tbl)
                    n = Val(Microsoft.VisualBasic.Right(tbl(i), 1))
                    If n > Num_octave Then
                        Num_octave = n
                    End If

                    m = Val(ListNotesd.IndexOf(Trim(tbl(i)))) 'Det_NumNote(tbl(i))
                    SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, m, PlayC.Value)
                    AccordJouerPiano.Notes(i) = m 'n
                    AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(m).BackColor
                    LabelPiano.Item(m).BackColor = Color.Yellow
                    '
                    Note = Det_NoteSansOctave(Trim(tbl(i)))
                    '
                    If Trim(Clef) = "#" Then
                        EcrNote = ListNotesd(m) 'ListNotesd(n)
                    Else
                        EcrNote = ListNotesb(m) 'ListNotesb(n)
                    End If
                    '
                    If Note = Tonique Then
                        LabelPiano.Item(m).ForeColor = Color.Red
                        LabelPiano.Item(m).Text = Trim(EcrNote) 'ListNotesd(n) 'Trim(tbl(i))
                    Else
                        LabelPiano.Item(m).ForeColor = Color.Black
                        LabelPiano.Item(m).Text = Trim(EcrNote) 'ListNotesd(n) 'Trim(tbl(i))
                    End If
                Next i
                '
                Position_Clavier(Num_octave)
                AccordAEtéJoué = True
            End If
            'End If
        Catch ex As Exception
            messa = "Problème de ressources MIDI"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerSourceTabTon2" + "." + Constants.vbCrLf +
                "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try


    End Sub

    Public Function Appartenance(Accord As String, Gamme As String) As Boolean
        Dim tblA() As String
        Dim TblG() As String
        Dim A, G As String
        Dim i, j, count_ As Integer

        Appartenance = False
        '
        A = Trad_AccordEn_D(Accord)
        A = Trim(Det_NotesAccord3(Trim(Accord), "#")) ' détermination des notes de l'accord
        '
        G = Trad_GammeEn_D(Trim(Gamme))
        G = Det_NotesGammes(Trim(Gamme)) ' détermination des notes de la gamme
        G = ListeNotesMin_EnD(G, " ")
        '
        tblA = Split(A, "-")
        TblG = Split(G)
        '
        count_ = 0
        '
        For i = 0 To UBound(tblA)
            For j = 0 To UBound(TblG)
                If tblA(i) = TblG(j) Then
                    count_ = count_ + 1
                End If
            Next j
        Next i
        '
        If ((UBound(tblA) + 1) - count_) = 0 Then ' si le nb de notes trouvés dans la gamme = au nb de notes de l'accord, alors les notes de l'accords appartiennent à la gamme
            Appartenance = True
        End If
    End Function
    Function ListeNotesMin_EnD(liste_ As String, délimit As String) As String
        Dim i As Integer
        Dim tbl() As String


        tbl = Split(liste_, délimit)
        '
        For i = 0 To UBound(tbl)
            Select Case tbl(i)
                Case "dd"
                    tbl(i) = "c#"
                Case "eb"
                    tbl(i) = "d#"
                Case "gb"
                    tbl(i) = "f#"
                Case "ab"
                    tbl(i) = "g#"
                Case "bb"
                    tbl(i) = "a#"
                Case Else
                    tbl(i) = tbl(i)
            End Select
        Next
        ListeNotesMin_EnD = Join(tbl, délimit)
    End Function
    Function Trad_AccordEn_D(Accord As String) As String
        Dim tblA() As String

        tblA = Split(Accord)
        tblA(0) = Trim(Trad_ListeNotesEnD(LCase(tblA(0)), " "))
        Trad_AccordEn_D = Trim(tblA(0))
        If UBound(tblA) > 0 Then
            Trad_AccordEn_D = UCase(tblA(0)) + " " + tblA(1)
        Else
            Trad_AccordEn_D = UCase(tblA(0))
        End If

    End Function
    Public Function Trad_GammeEn_D(Gamme As String) As String
        Dim tblG() As String

        tblG = Split(Gamme)
        tblG(0) = Trim(Trad_ListeNotesEnD(LCase(tblG(0)), "-"))
        Trad_GammeEn_D = Join(tblG, " ")

    End Function
    Function Trad_GammeEn_D_Maj(Gamme As String) As String
        Dim tblG() As String

        tblG = Split(Gamme)
        tblG(0) = Trim(Trad_ListeNotesEnDMaj(tblG(0), "-"))
        Trad_GammeEn_D_Maj = Join(tblG, " ")

    End Function
    Sub JouerSourceTabCad(ind As Integer)
        Dim accord As String
        Dim a, b As String
        Dim tbl() As String
        Dim m, n As Integer
        Dim i As Integer
        Dim Tonique As String
        Dim Note, EcrNote As String
        '
        Try
            If AccordAEtéJoué = False Then
                If Trim(TabCad.Item(ind).Text) <> "" And TabCad.Item(ind).Text <> "___" Then
                    For i = 0 To 7
                        AccordJouerPiano.Notes(i) = -1
                    Next i
                    '
                    accord = Trim(TabCad.Item(ind).Text)
                    '      


                    tbl = Split(Trim(ComboBox1.Text), " ")
                    Clef = Det_Clef(tbl(0))

                    a = Det_NotesAccord(Trim(accord))
                    '
                    a = Trad_ListeNotesEnD(a, "-") ' si des notes sont en bémol, elles sont traduites en #
                    '
                    tbl = Split(a, "-")
                    Tonique = Trim(tbl(0))
                    '
                    'If zone = -1 Then
                    'b = Maj_NotesCommunes(Trim(a), -1)
                    'b = Maj_Large_BasseMoins1(b, "PisteHorsZone", -1)
                    'Else 
                    b = Maj_NotesCommunes(Trim(a), Trim(ComboBox10.Text)) ' b = Maj_NotesCommunes(Trim(a), "c2")
                    'b = Maj_Large_BasseMoins1(b, "PisteZone", zone)
                    'End If
                    tbl = Split(b)
                    '
                    If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                        SortieMidi.Item(ChoixSortieMidi).Open()
                    End If
                    '
                    AccordJouerPiano.Raz_NotesJouéesPiano()
                    '
                    Num_octave = -1
                    For i = 0 To UBound(tbl)
                        m = Val(ListNotesd.IndexOf(Trim(tbl(i))))
                        n = Val(Microsoft.VisualBasic.Right(tbl(i), 1))
                        If n > Num_octave Then
                            Num_octave = n
                        End If
                        'n_octav
                        'SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, m, PlaybackVelocity.Value)
                        SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, m, PlayC.Value)
                        AccordJouerPiano.Notes(i) = m
                        '
                        AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(m).BackColor
                        If LabelPiano.Item(m).Height = HauteurTouche Then
                            LabelPiano.Item(m).BackColor = Color.Yellow
                            LabelPiano.Item(m).ForeColor = Color.Black
                        Else
                            LabelPiano.Item(m).BackColor = Color.Yellow
                            LabelPiano.Item(m).ForeColor = Color.Black
                        End If
                        '
                        Note = Det_NoteSansOctave(Trim(tbl(i)))
                        '
                        If Clef = "#" Then
                            EcrNote = ListNotesd(m)
                        Else
                            EcrNote = ListNotesb(m)
                        End If
                        '
                        If Note = Tonique Then
                            LabelPiano.Item(m).ForeColor = Color.Red
                            LabelPiano.Item(m).Text = Trim(EcrNote) 'ListNotesd(n) 'Trim(tbl(i))
                        Else
                            LabelPiano.Item(m).ForeColor = Color.Black
                            LabelPiano.Item(m).Text = Trim(EcrNote) 'ListNotesd(n) 'Trim(tbl(i))
                        End If
                    Next i
                    '
                    AccordAEtéJoué = True
                End If
            End If
        Catch ex As Exception
            messa = "Problème de ressources MIDI"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerSourceTabCad" + "." + Constants.vbCrLf +
            "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Sub JouerAccord123(Position As String)
        Dim a, b As String
        Dim tbl() As String
        Dim tbl2() As String
        Dim m, t, ct As Integer
        Dim n, n1 As Integer
        Dim i As Integer
        Dim Tonique As String
        Dim Note As String
        Dim Sauv_Clef As String


        'i = Val(Label50.Text)
        'i = i + 1
        'Label50.Text = Str(i)

        Try
            Sauv_Clef = Trim(Clef)
            ' Calcul indexes des positions
            ' ****************************

            If AccordAEtéJoué = False And Trim(Position) <> "" Then
                '
                'tbl = Split(ComboBox20.Text)
                tbl = Split(Trim(Position), ".")
                m = Val(tbl(0))
                t = Val(tbl(1))
                ct = Val(tbl(2))
                '
                ' Détermination de la Clef (b ou #) de la tonalité de l'accord
                ' ************************************************************
                a = TableEventH(m, t, ct).Tonalité

                tbl2 = Split(a)
                Clef = Det_Clef(tbl2(0))
                '
                Calcul_AutoVoicingZPlay()
                '
                If TableEventH(m, t, ct).Ligne <> -1 Then
                    ' Détermination de la Tonique : pour affichage en rouge sur le clavier
                    ' ********************************************************************
                    tbl = Split(Det_NotesAccord(TableEventH(m, t, ct).Accord), "-")
                    Tonique = Trim(tbl(0))
                    Tonique = Trad_ListeNotesEnD(Trim(Tonique), "-") ' traduire la tonique en #
                    ' Identification des notes de l'accord 
                    ' ************************************
                    a = TableNotesAccordsZ(m, t, ct) ' ici les notes sont toujours en # - Maj effectuée par Calcul_AutoVoicingZ()
                    tbl = Split(a)
                    ' Initialisations avant jeu de l'accord
                    ' *************************************
                    If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                        SortieMidi.Item(ChoixSortieMidi).Open()
                    End If
                    AccordJouerPiano.Raz_NotesJouéesPiano()
                    '
                    ' Jeu de l'accord (boucle sur les notes de l'accords)
                    ' **************************************************
                    NotesAff = ""
                    Num_octave = -1
                    For i = 0 To UBound(tbl)
                        n = ListNotesd.IndexOf(Trim(tbl(i)))
                        n1 = Val(Microsoft.VisualBasic.Right(tbl(i), 1))
                        If n1 > Num_octave Then ' Num_octave est utiliser par Position_Clavier(Num_octave)
                            Num_octave = n1
                        End If
                        'SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, PlaybackVelocity.Value)
                        SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, Convert.ToByte(TableEventH(m, t, ct).Vel))
                        AccordJouerPiano.Notes(i) = n
                        AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(n).BackColor
                        LabelPiano.Item(n).BackColor = Color.Yellow
                        '
                        Note = Det_NoteSansOctave(Trim(tbl(i)))
                        ''
                        ' Calcul de la clef pour affichage des notes
                        ' ******************************************
                        a = TableEventH(m, t, ct).Tonalité
                        tbl2 = Split(a)
                        Clef = Trim(Det_Clef(Trim(tbl2(0))))
                        '
                        Dim nn As Integer
                        If Clef = "b" Then
                            nn = ListNotesb.IndexOf(ListNotesb(n))
                            b = ListNotesd(nn)
                            LabelPiano.Item(n).Text = b
                            NotesAff = NotesAff + b + " "
                        Else
                            LabelPiano.Item(n).Text = ListNotesd(n)
                            NotesAff = NotesAff + ListNotesd(n) + " "
                        End If

                        If Note = Tonique Then
                            LabelPiano.Item(n).ForeColor = Color.Red
                        Else
                            LabelPiano.Item(n).ForeColor = Color.Blue
                        End If
                    Next i
                    '
                    Position_Clavier(Num_octave)
                    AccordAEtéJoué = True
                End If
            End If
            '
            NotesAff = Trim(NotesAff)
            Clef = Sauv_Clef
        Catch ex As Exception
            messa = "Problème de ressource MIDI"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerAccord123" + "." + Constants.vbCrLf +
            "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            'End
        End Try
        'End If
    End Sub
    Sub RAZ_AffNoteAcc()
        If AccordAEtéAff = True Then
            For i = 0 To UBound(AccordJouerPiano.Notes)
                If AccordJouerPiano.Notes(i) <> -1 Then
                    j = AccordJouerPiano.Notes(i)
                    LabelPiano.Item(j).BackColor = AccordJouerPiano.OldBackColor(i)
                    LabelPiano.Item(j).ForeColor = AccordJouerPiano.OldForeColor(i)
                    LabelPiano.Item(j).Text = Trim(AccordJouerPiano.OldText(i))
                End If
            Next i
            AccordAEtéAff = False
        End If
    End Sub
    Sub AfficherAccordRapport(Position As String)
        Dim a As String
        Dim tbl() As String
        Dim tbl2() As String
        Dim m, t, ct As Integer
        Dim Sauv_Clef As String
        Dim n As Integer
        Dim Note As String

        Sauv_Clef = Clef
        ' Détermintation des paramètre m,t,ct
        ' ***********************************
        tbl = Split(Trim(Position), ".")
        m = Val(tbl(0))
        t = Val(tbl(1))
        ct = Val(tbl(2))
        ' Recalcul du voicing en fonction des zones
        ' *****************************************
        a = TableEventH(m, t, ct).Tonalité
        tbl2 = Split(a)
        Clef = Det_Clef(tbl2(0))
        Calcul_AutoVoicingZ()
        ' Affichage
        ' *********
        If TableEventH(m, t, ct).Ligne <> -1 Then
            ' Détermination de la Tonique : pour affichage en rouge sur le clavier
            ' ********************************************************************
            tbl = Split(Det_NotesAccord(TableEventH(m, t, ct).Accord), "-")
            Tonique = Trim(tbl(0))
            Tonique = Trad_ListeNotesEnD(Trim(Tonique), "-") ' traduire la tonique en #
            ' Identification des notes de l'accord 
            ' ************************************
            a = TableNotesAccordsZ(m, t, ct) ' ici les notes sont toujours en # - Maj effectuée par Calcul_AutoVoicingZ()
            tbl = Split(a)
            AccordJouerPiano.Raz_NotesJouéesPiano()
            For i = 0 To UBound(tbl)
                AccordAEtéAff = True
                n = ListNotesd.IndexOf(Trim(tbl(i))) ' identification de la note
                ' sauvegarde pour restitution de la note du clavier
                AccordJouerPiano.Notes(i) = n
                AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(n).BackColor
                AccordJouerPiano.OldForeColor(i) = LabelPiano.Item(n).ForeColor
                AccordJouerPiano.OldText(i) = LabelPiano.Item(n).Text
                '
                LabelPiano.Item(n).BackColor = LabelPiano.Item(n).BackColor 'Color.Yellow
                If Clef = "b" Then
                    LabelPiano.Item(n).Text = ListNotesb(n)
                Else
                    LabelPiano.Item(n).Text = ListNotesd(n)
                End If
                Note = Det_NoteSansOctave(Trim(tbl(i)))
                'If Note = Tonique Then
                If LabelPiano.Item(n).BackColor = Color.Black Or LabelPiano.Item(n).BackColor = Color.ForestGreen Then ' Color.ForestGreen
                    LabelPiano.Item(n).ForeColor = Color.PowderBlue
                Else
                    LabelPiano.Item(n).ForeColor = Color.Blue
                End If
            Next i
        End If
        Clef = Sauv_Clef
    End Sub
    Function Det_NumNote(Note As String) As String
        'Dim tbl() As Object
        'Dim Clef As String

        'tbl = Split(ComboBox20.Text)
        'Clef = Det_Clef(tbl(0))

        If Trim(Clef) = "#" Then
            Det_NumNote = ListNotesd.IndexOf(Trim(Note))
        Else
            Det_NumNote = ListNotesb.IndexOf(Trim(Note))
        End If
    End Function

    Sub ActivationDesMenus()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim m As Integer

        Dim degré As Integer
        Dim Active9 As Boolean
        Dim Active11 As Boolean
        '
        Dim AuMoinsUneSelection As Boolean
        '
        Dim a As String
        Dim b As String
        '

        Active9 = False
        Active11 = False
        '
        AuMoinsUneSelection = False
        '
        For i = 2 To 3 ' on fait le parcours uniquement les accords 9e et 11e (les autres sont obligtoirement activés)
            m = -1
            For j = 0 To 2 ' mode Maj, MinH, MinM
                For k = 0 To 6
                    m = m + 1
                    '
                    AuMoinsUneSelection = True
                    '
                    a = TabTonsDegrés.Item(k).Text
                    degré = Det_IndexDegré(a)
                    '
                    b = TableGlobalAcc(i, j, degré)
                    If TableGlobalAcc(i, j, degré) <> "___" Then
                        Select Case i
                            Case 2
                                Active9 = True
                            Case 3
                                Active11 = True
                        End Select
                    End If
                    'End If
                Next k
            Next
        Next
        '
        If AuMoinsUneSelection = True Then
            Menu3notes.Enabled = True
            Menu4Notes.Enabled = True
            MenuNotes9.Enabled = Active9
            MenuNotes11.Enabled = Active11
        Else
            Menu3notes.Enabled = False
            Menu4Notes.Enabled = False
            MenuNotes9.Enabled = False
            MenuNotes11.Enabled = False
        End If
        '
    End Sub


    Function Calc_CadDegrés(degré As String) As Integer
        Calc_CadDegrés = 0
        Select Case Cad_OrigineAccord

            Case Modes.Majeur, Modes.Cadence_Majeure
                Calc_CadDegrés = Det_IndexDegré(Trim(degré))

            Case Modes.MineurH, Modes.Cadence_Mineure
                Calc_CadDegrés = Det_IndexDegréMin(Trim(degré))

            Case Modes.Cadence_Mixte
                Select Case Trim(degré)
                    Case "VI"
                        Calc_CadDegrés = 0
                    Case "V"
                        Calc_CadDegrés = 4
                    Case "IV"
                        Calc_CadDegrés = 3
                    Case "III"
                        Calc_CadDegrés = 2
                End Select
        End Select
    End Function
    '
    Function Det_ValeurRenv(i As Integer, j As Integer) As String
        Det_ValeurRenv = ""
        Select Case TableCoursAcc(i, j).RenvChoisi
            Case 0
                Det_ValeurRenv = Renversement1.Text
            Case 1
                Det_ValeurRenv = Renversement2.Text
            Case 2
                Det_ValeurRenv = Renversement3.Text
            Case 3
                Det_ValeurRenv = Renversement4.Text
            Case 4
                Det_ValeurRenv = Renversement5.Text
        End Select
    End Function
    Function Det_ValeurOct(i As Integer, j As Integer) As String
        Det_ValeurOct = ""
        Select Case TableCoursAcc(i, j).OctaveChoisie
            Case 0
                Det_ValeurOct = OctavePlus1.Text
            Case 1
                Det_ValeurOct = Octave0.Text
            Case 2
                Det_ValeurOct = OctaveMoins1.Text
            Case 3
                Det_ValeurOct = OctaveMoins2.Text
        End Select
    End Function

    Sub Maj_Octave(ind As Integer)
        Dim degré As Integer
        Dim ligne As Integer
        '
        'If TabTonsSelect.Item(ind).Checked = True Then
        '
        ' = TabTonsDegrés.Item(Det_IndexDegré2(ind)).Text
        'degré = Det_IndexDegré(a)
        '
        degré = Det_IndexDegré2(ind)
        ligne = Det_LigneTableGlobale(ind)
        '
        Select Case TableCoursAcc(ligne, degré).OctaveChoisie
            Case 0
                OctavePlus1.Checked = True
                Octave0.Checked = False
                OctaveMoins1.Checked = False
                OctaveMoins2.Checked = False
            Case 1
                OctavePlus1.Checked = False
                Octave0.Checked = True
                OctaveMoins1.Checked = False
                OctaveMoins2.Checked = False
            Case 2
                OctavePlus1.Checked = False
                Octave0.Checked = False
                OctaveMoins1.Checked = True
                OctaveMoins2.Checked = False
            Case 3
                OctavePlus1.Checked = False
                Octave0.Checked = False
                OctaveMoins1.Checked = False
                OctaveMoins2.Checked = True
        End Select
        ' End If
        '
    End Sub
    Private Sub TabTons_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
        Dim ind As Integer
        Dim com As Label = sender
        '
        ind = Val(com.Tag)
        '
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
        '

        ' Pour glisser - déposer
        ' **********************
        MouseIsDown = False
    End Sub
    Sub Maj_Sélection(Index As Integer)
        '

        '
        Select Case Index
            Case 0, 7, 14

                '
                TabTons.Item(0).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(7).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(14).BackColor = Couleur_Accord_DéSélectionné
                '
            Case 1, 8, 15

                '
                TabTons.Item(1).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(8).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(15).BackColor = Couleur_Accord_DéSélectionné
            Case 2, 9, 16

                '
                TabTons.Item(2).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(9).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(16).BackColor = Couleur_Accord_DéSélectionné

            Case 3, 10, 17
                '
                TabTons.Item(3).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(10).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(17).BackColor = Couleur_Accord_DéSélectionné
            Case 4, 11, 18

                '
                TabTons.Item(4).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(11).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(18).BackColor = Couleur_Accord_DéSélectionné
            Case 5, 12, 19
                '
                TabTons.Item(5).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(12).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(19).BackColor = Couleur_Accord_DéSélectionné
            Case 6, 13, 20

                '
                TabTons.Item(6).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(13).BackColor = Couleur_Accord_DéSélectionné
                TabTons.Item(20).BackColor = Couleur_Accord_DéSélectionné
        End Select
        '

        TabTons.Item(Index).BackColor = Couleur_Accord_Sélectionné
    End Sub



    Private Sub TabTonsFiltres_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        DerGridCliquée = GridCours.TabTon
    End Sub

    Private Sub TabTonsFiltres_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        Dim com As CheckBox = sender
        Dim i As Integer
        Dim Typ11 As Integer
        Dim Typ9 As Integer
        Dim Typsus4 As Integer

        Dim ind As Integer
        Dim a As String
        Dim chiff() As Object
        Dim Tonalité As Integer
        Dim Degré As String
        Dim IndexDegré As Integer

        '
        ind = Fix(Val(com.Tag) / 2)
        a = Trim(TabTons.Item(ind).Text)
        Typ11 = InStr(a, "11")
        Typsus4 = InStr(a, "sus4")
        Typ9 = InStr(a, "9")

        ' Accord 9e
        ' *********
        If Typ9 <> 0 Then
            chiff = Split(a)
            Select Case Trim(chiff(1))
                Case "7M(9)", "M7(9)", "7(9)"
                    TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 9"
                Case "m7(9)"
                    TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " m9"
                Case "7(b9)"
                    TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " b9"
                Case "7(9#)"
                    TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 9#"
                Case "9", "m9", "b9", "9#"
                    Tonalité = Det_LigneTableGlobale(ind)
                    i = Det_IndexDansLigne(ind)
                    Degré = TabTonsDegrés.Item(i).Text
                    IndexDegré = Det_IndexDegré(Degré)
                    a = TableGlobalAcc(2, Tonalité, IndexDegré)
                    TabTons.Item(ind).Text = TableGlobalAcc(2, Tonalité, IndexDegré)
            End Select
            '
            'Maj_Renversement(ind)
        End If
        '
        ' Accord 11e
        ' **********
        If Typ11 <> 0 Or Typsus4 <> 0 Then
            chiff = Split(a)
            If EstPair(Val(com.Tag)) Then
                ' filtre sus 4
                Select Case Trim(chiff(1))
                    Case "7(11)"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 7sus4"
                    Case "11"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " sus4"
                    Case "7sus4"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 7(11)"
                    Case "sus4"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 11"
                End Select
            Else
                ' filtre 7
                Select Case Trim(chiff(1))
                    Case "7M(11#)", "M7(11#)"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 11#"
                    Case "11#"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " M7(11#)"
                    Case "7(11)"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 11"
                    Case "11"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 7(11)"
                    Case "7sus4"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " sus4"
                    Case "sus4"
                        TabTons.Item(ind).Text = Trim(Det_Tonique(a)) + " 7sus4"

                End Select
            End If
            'Maj_Renversement(ind)
        End If
    End Sub
    Private Sub QuitterToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles QuitterToolStripMenuItem.Click
        FermetureAppli()
    End Sub
    Sub FermetureAppli()
        Dim i As Integer

        i = NouveauConfirm() ' la question est : voulez-vous enregistrez votre projet actuel ?
        Select Case i
            Case DialogResult.Yes
                Enregistrer()
                FermerMidi()
                FermetureParQuitter = True
                Transport.Close()
                Me.Close()
            Case DialogResult.No
                FermerMidi()
                FermetureParQuitter = True
                Transport.Close()
                Me.Close()
            Case DialogResult.Cancel ' on ne fait rien
        End Select

    End Sub
    Sub FermerMidi()
        ' If ComboMidiOut.Items.Count > 0 Then
        ' If SortieMidi.Item(ChoixSortieMidi).IsOpen Then
        'SortieMidi.Item(ChoixSortieMidi).Close()
        'End If
        'End If


        If Horloge1.IsRunning Then
            Horloge1.Stop()
            ToutesNotesOff()

            For i = 0 To EntréeMidi.Count - 1
                If EntréeMidi(i).Name <> Nothing Then
                    If EntréeMidi(i).IsOpen Then
                        EntréeMidi(i).StopReceiving()
                    End If
                End If
            Next
            '
            For i = 0 To SortieMidi.Count - 1
                If SortieMidi.Item(i).IsOpen Then
                    SortieMidi(i).SilenceAllNotes()
                End If
            Next
        End If
        '
        For i = 0 To SortieMidi.Count - 1
            If SortieMidi.Item(i).IsOpen Then
                SortieMidi(i).Close()
            End If
        Next
        '

        For i = 0 To EntréeMidi.Count - 1
            If EntréeMidi(i).Name <> Nothing Then
                If EntréeMidi(i).IsOpen Then
                    EntréeMidi(i).Close()
                    EntréeMidi(i).RemoveAllEventHandlers()
                End If
            End If
        Next
    End Sub

    Private Sub AssurerVisibilitéCellule(Col_Active As Integer)
        Dim r As Integer
        Dim c As Integer
        '
        r = Grid3.ActiveCell.Row
        c = Col_Active 'Grid3.ActiveCell.Col
        '
        Grid3.Cell(r, c).EnsureVisible()
    End Sub
    Private Sub AssurerVisibilitéCelluleGrid2(Col_Active As Integer)
        Dim r As Integer
        Dim c As Integer
        '
        r = Grid2.ActiveCell.Row
        c = Col_Active 'Grid3.ActiveCell.Col
        '
        Grid2.Cell(r, c).EnsureVisible()
    End Sub
    Private Sub NouveauAvecSignatireToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NouveauAvecSignatireToolStripMenuItem.Click
        Signature.ShowDialog()
        If Retour = "OK" Then
            Nouv(RetourSTR)
        End If

    End Sub
    Sub Nouv(RetourSTR1 As String)
        Dim i As Integer
        Dim a, b, c, d As String

        Try
            EcritUneFois = False

            ' Reinit des onglets généaux Tabcontrol4 et Tabcontrol2
            ' ***************************************************
            TabControl4.SelectedIndex = 0
            TabControl2.SelectedIndex = 0

            ' Reinit PianoRoll
            ' ****************
            For i = 0 To nb_PianoRoll - 1
                listPIANOROLL(i).Clear_Notes()
                listPIANOROLL(i).Init_BarrOut()
                listPIANOROLL(i).Clear_AllLayers()
                listPIANOROLL(i).Init_ControlSys()
                listPIANOROLL(i).Clear_Courbes()
            Next

            ' Réinit DrumEdit
            ' ***************
            Drums.FocusSurA()

            ' MIXAGE : Reinit des curseurs de la table de mixage
            ' *************************************************
            For i = 0 To nb_TotalCurseurs - 1
                Mix.PisteVolume.Item(i).Value = 100
                Mix.soloVolume.Item(i).Checked = True
                Mix.PisteVolume.Item(i).Enabled = True ' nécessaire si soloVolume était à false
            Next i
            ' désativation de la table
            ' ************************
            RemoveHandler Mix.AutorisVol.MouseClick, AddressOf Mix.AutorisVol_MouseClick
            Mix.AutorisVol.Checked = False
            AddHandler Mix.AutorisVol.MouseClick, AddressOf Mix.AutorisVol_MouseClick
            Mix.VolumesEnabled(False)

            NomduSon.Text = "" ' nom du son de HyperVoicing (Boite texte jaune)

            Grid1.AutoRedraw = False
            Grid2.AutoRedraw = False
            Grid3.AutoRedraw = False
            Grid4.AutoRedraw = False
            '
            Grid3.Row(0).Locked = False
            Grid3.Row(1).Locked = False
            Grid3.Row(2).Locked = False
            '
            For i = 0 To Grid1.Cols - 1
                Grid1.Column(i).Locked = False
            Next i
            '
            For i = 0 To Grid2.Cols - 1
                Grid2.Column(i).Locked = False
            Next i
            '
            For i = 0 To Grid3.Cols - 1
                Grid3.Column(i).Locked = False
            Next i

            Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearText()
            Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearAll()
            '
            Grid2.Range(0, 0, (Grid2.Rows - 1), (Grid2.Cols - 1)).ClearAll()
            Grid3.Range(0, 0, (Grid3.Rows - 1), (Grid3.Cols - 1)).ClearAll()
            Grid4.Range(0, 0, (Grid4.Rows - 1), (Grid4.Cols - 1)).ClearAll()
            '
            Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearFormat()
            Grid2.Range(0, 0, (Grid2.Rows - 1), (Grid2.Cols - 1)).ClearFormat()
            Grid3.Range(0, 0, (Grid3.Rows - 1), (Grid3.Cols - 1)).ClearFormat()
            Grid4.Range(0, 0, (Grid4.Rows - 1), (Grid4.Cols - 1)).ClearFormat()
            '
            Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearText()
            Grid2.Range(0, 0, (Grid2.Rows - 1), (Grid2.Cols - 1)).ClearText()
            Grid3.Range(0, 0, (Grid3.Rows - 1), (Grid3.Cols - 1)).ClearText()
            Grid4.Range(0, 0, (Grid4.Rows - 1), (Grid4.Cols - 1)).ClearText()
            '
            Effacer_Grid4()
            '
            For i = 0 To Grid1.Cols - 1
                'If i <> 2 Then ' la colonne des marqueurs reste non lockée
                Grid1.Column(i).Locked = True
                'End If
            Next i
            '
            For i = 0 To Grid2.Cols - 1
                ' RAZ 1er ligne de grid2 pour le as où il y avait des marqueurs
                Grid2.Cell(0, i).BackColor = Color.Beige
                Grid2.Cell(0, i).ForeColor = Color.Black
                '
                Grid2.Cell(0, i).Locked = True
            Next i
            '
            For i = 0 To Grid3.Cols - 1
                Grid3.Column(i).Locked = True
            Next i
            Grid1.Refresh()
            Grid2.Refresh()
            Grid3.Refresh()
            Grid4.Refresh()
            '
            Grid1.AutoRedraw = True
            Grid2.AutoRedraw = True
            Grid3.AutoRedraw = True
            Grid4.AutoRedraw = True
            '
            Maj_TAccents(Trim(RetourSTR1))
            Construction(Trim(RetourSTR1), 2)
            '
            ComboBox1.SelectedIndex = 7 ' Pour C Maj 
            ComboBox2.SelectedIndex = 7 ' Pour A Min
            ComboBox23.SelectedIndex = 0
            ComboBox9.SelectedIndex = 0
            ComboBox6.SelectedIndex = 0
            '
            ComboBox4.SelectedIndex = 0
            ComboBox3.SelectedIndex = 0

            ' barre d'outils du player
            Button10.Enabled = False

            Répéter.Checked = False
            '
            ' choix des gammes
            CheckMaj.Checked = True
            CheckMinH.Checked = True
            CheckMinM.Checked = True
            CheckPentaMin.Checked = True
            CheckBlues.Checked = True
            '
            Init_Fichier()
            '
            RAZ_Clavier()
            '
            Grid1.TopRow = 1
            Grid2.LeftCol = 1
            Grid3.LeftCol = 1
            Grid4.TopRow = 1
            '
            'AffTona()
            '
            ' Rafraichissement des onglets PIANOROLL, DRUMEDIT
            ' ************************************************
            ' Mise à jour PianoRoll
            ' *********************
            a = Trim(Det_ListAcc())
            b = Trim(Det_ListGam())
            c = Trim(Det_ListMarq())
            d = Trim(Det_ListTon())
            For i = 0 To nb_PianoRoll - 1
                If PIANOROLLChargé(i) = True Then

                    listPIANOROLL(i).PListAcc = a 'Det_ListAcc()
                    listPIANOROLL(i).PListGam = b 'Det_ListGam()
                    listPIANOROLL(i).PListMarq = c 'Det_ListMarq()
                    listPIANOROLL(i).PListTon = d 'Det_ListAcc()
                    listPIANOROLL(i).F1_Refresh()
                    listPIANOROLL(i).Nouv_CalquesMIDI()
                End If
            Next
            '
            ' Mise à jour DrumEdit
            ' ********************
            Drums.PListAcc = Det_ListAcc()
            Drums.PListMarq = Det_ListMarq()
            Drums.F2_Refresh()
            Drums.Refresh_Drums_Init()
            '
            '
            ' Barre de TRANSPORT
            ' ******************
            Transport.TRANSPORT_Refresh()

            ' Mise à jour Voicing Ochestral
            ' *****************************
            Init_StackMode()

            ' Ré écriture des labels des objets graphiques
            ' ********************************************
            '
            If LangueIHM = "fr" Then
                Fr_Culture()
            Else
                En_Culture()
            End If
            '
            ListGS.SelectedIndex = 0


            ' Vue Notes
            ' *********

            Maj_VueNotes()

        Catch ex As Exception
            Dim titre As String

            titre = "Avertissement"
            Avertis = "Erreur interne : procédure 'Nouv' : " + ex.Message
            MessageHV.PContenuMess = Avertis
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
            'Dim result As DialogResult = MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
        End Try


    End Sub

    Sub NouvPourOuvrir()
        Dim i As Integer

        Grid1.AutoRedraw = False
        Grid2.AutoRedraw = False
        Grid3.AutoRedraw = False
        Grid4.AutoRedraw = False
        '
        Grid3.Row(0).Locked = False
        Grid3.Row(1).Locked = False
        Grid3.Row(2).Locked = False
        '
        For i = 0 To Grid1.Cols - 1
            'If i <> 2 Then
            Grid1.Column(i).Locked = True
            'End If
        Next i
        '
        For i = 0 To Grid2.Cols - 1
            Grid2.Column(i).Locked = False
        Next i
        '
        For i = 0 To Grid3.Cols - 1
            Grid3.Column(i).Locked = False
        Next i
        Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearText()
        Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearAll()
        '
        Grid2.Range(0, 0, (Grid2.Rows - 1), (Grid2.Cols - 1)).ClearAll()
        Grid3.Range(0, 0, (Grid3.Rows - 1), (Grid3.Cols - 1)).ClearAll()
        Grid4.Range(0, 0, (Grid4.Rows - 1), (Grid4.Cols - 1)).ClearAll()
        '
        Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearFormat()
        Grid2.Range(0, 0, (Grid2.Rows - 1), (Grid2.Cols - 1)).ClearFormat()
        Grid3.Range(0, 0, (Grid3.Rows - 1), (Grid3.Cols - 1)).ClearFormat()
        Grid4.Range(0, 0, (Grid4.Rows - 1), (Grid4.Cols - 1)).ClearFormat()

        Grid1.Range(0, 0, (Grid1.Rows - 1), (Grid1.Cols - 1)).ClearText()
        Grid2.Range(0, 0, (Grid2.Rows - 1), (Grid2.Cols - 1)).ClearText()
        Grid3.Range(0, 0, (Grid3.Rows - 1), (Grid3.Cols - 1)).ClearText()
        Grid4.Range(0, 0, (Grid4.Rows - 1), (Grid4.Cols - 1)).ClearText()
        '
        Effacer_Grid4()
        '
        For i = 0 To Grid1.Cols - 1
            Grid1.Column(i).Locked = True

        Next i
        '
        For i = 0 To Grid2.Cols - 1
            Grid2.Column(i).Locked = True
        Next i
        '
        For i = 0 To Grid3.Cols - 1
            Grid3.Column(i).Locked = True
        Next i

        Grid1.Refresh()
        Grid2.Refresh()
        Grid3.Refresh()
        Grid4.Refresh()
        '
        Grid1.AutoRedraw = True
        Grid2.AutoRedraw = True
        Grid3.AutoRedraw = True
        Grid4.AutoRedraw = True
        '
        '
        RAZ_Clavier()
        '
        Grid1.TopRow = 1
        Grid2.LeftCol = 1
        Grid3.LeftCol = 1
        Grid4.TopRow = 1
        '
        a = SortieMidi.Item(ChoixSortieMidi).IsOpen
        If a = True Then
            SortieMidi.Item(ChoixSortieMidi).Close() ' fermeture pour re-init de la sortie à la fin de la méthode NouvPourOuvrir sur .Open
        End If

        Dim s As New Size With {
            .Height = Jauge.Height
        }

        s.Width = s.Width + 1
        Jauge.Size = s
        LJauge1.Text = "NouvPourOuvrir2 passé"
        LJauge1.Refresh()
        '
        Nouv("4/4")
        '
        s.Width = s.Width + 1
        Jauge.Size = s
        LJauge1.Text = "Nouv(4/4) passé"
        LJauge1.Refresh()
        '
        For i = 0 To nb_PianoRoll - 1
            listPIANOROLL(i).Clear_Notes()
            listPIANOROLL(i).Init_BarrOut()
        Next
        '
        a = SortieMidi.Item(ChoixSortieMidi).IsOpen
        If a = False Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        '
    End Sub

    Private Sub EnglishToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EnglishToolStripMenuItem.Click
        '
        'LangueIHM = "en"
        MessageHV.PTitre = "Language change"
        MessageHV.PContenuMess = "You must restart the application to validate the language change."
        MessageHV.PTypBouton = "OK"
        Cacher_FormTransparents()
        MessageHV.ShowDialog()
        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Langue", "LangueIHM", "en")
        Me.BringToFront()
    End Sub
    Private Sub FrançaisToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles FrançaisToolStripMenuItem.Click
        'LangueIHM = "fr"
        MessageHV.PTitre = "Changement de langue"
        MessageHV.PContenuMess = "Vous devez redémarrer l'application pour valider les modifications de langue."
        MessageHV.PTypBouton = "OK"
        Cacher_FormTransparents()
        MessageHV.ShowDialog()
        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Langue", "LangueIHM", "fr")
        Me.BringToFront()
    End Sub
    Sub Restit_CoursAcc()
        Dim i, j, k, nbCol As Integer

        nbCol = 7
        If EnChargement = False Then
            For i = 0 To UBound(TableCoursAcc, 1)
                For j = 0 To UBound(TableCoursAcc, 2)
                    k = j + (nbCol * i)
                    TabTons.Item(k).Text = S_TableCoursAcc(i, j).Accord     'TableCoursAcc(i, j)
                Next j
            Next i
            '
            For i = 0 To 4
                TabCad.Item(i).Text = S_CAD_TableCoursAcc(i).Accord
            Next i
        End If
        '
        Refresh()
    End Sub
    Function Det_IndexCadAccCours(Ind As Integer) As Integer
        Dim a As String


        a = TabCadDegrés.Item(Ind).Text
        If Cad_OrigineAccord = Modes.Cadence_Mixte Then
            Select Case Trim(a)
                Case "V", "IV"
                    Det_IndexCadAccCours = Det_IndexDegré(a)
                Case "VI", "III"
                    Det_IndexCadAccCours = Det_IndexDegréMin(a)
                Case Else
                    Det_IndexCadAccCours = -1
            End Select
        Else
            Det_IndexCadAccCours = Det_IndexDegré(a)
        End If
    End Function

    Sub CréationRegistry()
        Dim CalquesMIDI As RegistryKey
        Dim Appli As RegistryKey
        Dim a As String
        Dim j As Integer
        Dim DossierDocuments As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)

        CalquesMIDI = My.Computer.Registry.CurrentUser.CreateSubKey("Software\CalquesMIDI") ' CreateSubKey : Crée une sous-clé ou en ouvre une existante
        '
        Appli = My.Computer.Registry.CurrentUser.OpenSubKey("Software\CalquesMIDI\HyperVoicing")
        If Appli Is Nothing Then 'si l'appli n'est pas créée
            '
        End If
        '
        ' Chargement des pramètres de registres
        ' *************************************
        '
        ' Langues
        ' *******
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Langue", "LangueIHM", Nothing)
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Langue", "LangueIHM", "fr")
            'Langue = "en"
            Module1.LangueIHM = "fr"
            'LanguesToolStripMenuItem.Image = My.Resources.France 'My.Resources.France16x11
        Else
            Langue = a
            If Trim(a) = "fr" Then
                'LanguesToolStripMenuItem.Image = My.Resources.France 'My.Resources.France16x11
                'Langue = "en"
                Module1.LangueIHM = "fr"
                'Fr_Culture()
            Else
                'LanguesToolStripMenuItem.Image = My.Resources.us 'My.Resources.Grande_Bretagne20x18
                'Langue = "en"
                Module1.LangueIHM = "en"
            End If
        End If
        ' CheminFichierOuvrir
        ' *******************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminFichierOuvrir", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminFichierOuvrir", DossierDocuments)
            CheminFichierOuvrir = DossierDocuments
        Else
            CheminFichierOuvrir = a
        End If


        ' Chemin CheminEnregistrer
        ' ************************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminEnregistrer", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "CheminEnregistrer", DossierDocuments)
            CheminFichierEnreg = DossierDocuments
        Else
            CheminFichierEnreg = a
        End If


        ' Chemin ExportCalquesMIDI
        ' ************************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportCalquesMIDI", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportCalquesMIDI", DossierDocuments)
            CheminFichierCalques = DossierDocuments
        Else
            CheminFichierCalques = a
        End If

        '
        ' Chemin ExportFichierMIDI (fichier pour  les accords MIDI)
        ' ************************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportFichierMIDI", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportFichierMIDI", DossierDocuments)
            CheminFichierMIDI = DossierDocuments
        Else
            CheminFichierMIDI = a
        End If

        ' Chemin ExportMarqueursMIDI
        ' ***************************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportMarqueursMIDI", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportMarqueursMIDI", DossierDocuments)
            CheminMarqueursMIDI = DossierDocuments
        Else
            CheminMarqueursMIDI = a
        End If
        '
        ' Chemin ExportDocument
        ' *********************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportfichierDoc", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Chemins", "ExportfichierDoc", DossierDocuments)
            CheminFichierExportDoc = DossierDocuments

        Else
            CheminFichierExportDoc = a
        End If
        ' Sorties MIDI
        ' ************
        Dim o As Object
        Try
            o = Midi.OutputDevice.InstalledDevices
            '
            If o.count > 0 Then ' o.count donne le nombre de device /l'index max est donc o.count-1
                For j = 0 To (o.count - 1) '  j = 0 To (o.count - 1)
                    SortieMidi.Add(OutputDevice.InstalledDevices(j))
                    ComboMidiOut.Items.Add(SortieMidi.Item(j).Name)
                Next
                '
                a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixSortieMIDI", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
                If a = Nothing Then
                    My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixSortieMIDI", "0")
                    ComboMidiOut.SelectedIndex = 0
                    ChoixSortieMidi = ComboMidiOut.SelectedIndex
                Else
                    If Val(a) > o.count - 1 Then
                        ComboMidiOut.SelectedIndex = 0
                        ChoixSortieMidi = ComboMidiOut.SelectedIndex
                        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixSortieMIDI", "0")
                    Else
                        ComboMidiOut.SelectedIndex = Val(a)
                        ChoixSortieMidi = ComboMidiOut.SelectedIndex
                    End If
                End If
            Else
                ComboMidiOut.Enabled = False
                Exist_MIDIout = False
                'MessageBox.Show("Vous n'avez pas de sorties MIDI sur votre  PC : l'application ne peut pas fonctionner" + Chr(13) _
                '+ "There is no MIDI Output in your PC : the software can't work")
                'Application.Exit()
            End If

            '
            ' Entrées MIDI
            ' ************
            Dim oIn As Object
            oIn = Midi.InputDevice.InstalledDevices
            '
            If (oIn.count > 0) Then
                ExistenceEntréeMidi = True
                ComboMidiIn.Enabled = True
                Thru.Enabled = True
                '
                For j = 0 To (oIn.count - 1)
                    EntréeMidi.Add(InputDevice.InstalledDevices(j))
                    ComboMidiIn.Items.Add(EntréeMidi.Item(j).Name)
                    '
                    AddHandler EntréeMidi.Item(j).NoteOn, AddressOf Reception_NoteOn
                    AddHandler EntréeMidi.Item(j).NoteOff, AddressOf Reception_NoteOff
                    AddHandler EntréeMidi.Item(j).ControlChange, AddressOf Reception_ControlChange
                    AddHandler EntréeMidi.Item(j).PitchBend, AddressOf Reception_PitchBend

                    'AddHandler EntréeMidi.Item(j).PitchBend, AddressOf Reception_PitchBend
                    'AddHandler InputDevice.NoteOn(j), AddressOf Reception_NoteOn
                    'EntréeMidi.Item(j).NoteOffHandler += New InputDevice.NoteOffHandler(AddressOf Reception_NoteOff)
                    'EntréeMidi.
                Next j
                '
                'EntréeMidi.NoteOn += New InputDevice.NoteOnHandler(AddressOf Me.NoteOn)
                'InputDevice.NoteOff += New InputDevice.NoteOffHandler(AddressOf Me.NoteOff)
                '
                a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixEntréeMIDI", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
                If a = Nothing Then
                    My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixEntréeMIDI", "0")
                    ComboMidiIn.SelectedIndex = 0
                    ChoixEntréeMidi = ComboMidiIn.SelectedIndex
                Else
                    If Val(a) > oIn.count - 1 Then
                        ComboMidiIn.SelectedIndex = 0
                        ChoixEntréeMidi = ComboMidiIn.SelectedIndex
                        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixEntréeMIDI", "0")
                    Else
                        ComboMidiIn.SelectedIndex = Val(a)
                        ChoixEntréeMidi = ComboMidiIn.SelectedIndex
                    End If
                End If
                '
                ' activation de l'entrée MIDI en cours
                ' ************************************
                Try
                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsOpen) Then
                        EntréeMidi.Item(ChoixEntréeMidi).Open()
                    End If

                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsReceiving) Then
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    Else
                        EntréeMidi.Item(ChoixEntréeMidi).StopReceiving()
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    End If
                Catch ex As Exception
                    a = "Warning ! : you could have a MIDI device problem"
                    If LangueIHM = "fr" Then
                        a = "Avertissement ! : il pourrait y avoir un problème d'interface MIDI"
                    End If
                    'MessageBox.Show(a)
                End Try
            Else
                ExistenceEntréeMidi = False
                ComboMidiIn.Enabled = False
                Thru.Enabled = False
            End If
            '
            ' Thru
            ' ****
            a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Thru", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
            If a = Nothing Then
                My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Thru", "0")
                Thru.Checked = False
            Else
                Select Case a
                    Case "0"
                        Thru.Checked = False
                    Case "1"
                        Thru.Checked = True
                End Select
                '

            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try

        ' 
        ' Vélocité des Accords
        ' ********************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéAccords", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéAccords", "72")
            ChordsVelocity.Value = 72
        Else
            ChordsVelocity.Value = Val(a)
        End If
        '
        ' Vélocité des Notes
        ' ********************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéNotes", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéNotes", "80")
            NotesVelocity.Value = 80
        Else
            NotesVelocity.Value = Val(a)
        End If
        ' 
        ' Vélocité du PlayBack
        ' ********************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéPlayback", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "VécolitéPlayback", "72")
            PlaybackVelocity.Value = 72
        Else
            PlaybackVelocity.Value = Val(a)
        End If

        ' Nombre de Mesures de Fin
        ' ************************
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NombreMesuresFin", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NombreMesuresFin", "2")
        'Else
        'End If

        ' Nombre de Répétitions
        ' *********************
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NombredeBoucles", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NombredeBoucles", "1")
            Transport.LoopNumber.Value = 1
        Else
            Transport.LoopNumber.Value = Val(a)
        End If
        '
        ' Basse Octave
        ' ***********
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "BasseOctave", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "BasseOctave", "0")
        'Octave_Moins1.Checked = False
        'Else
        'Select Case a
        'Case "0"
        'Octave_Moins1.Checked = False
        'Case "1"
        'Octave_Moins1.Checked = True
        'End Select

        'End If
        '
        ' Notes Communes
        ' **************
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NotesCommunes", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        ' My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "NotesCommunes", "0")
        ' NotesCommunes.Checked = False
        ' Else
        'Select Case a
        '    Case "0"
        'NotesCommunes.Checked = False
        '    Case "1"
        'NotesCommunes.Checked = True
        'End Select
        '
        '        End If
        '        '
        ' If a = "1" Then
        ' NoteRacine.Enabled = True
        ' OctaveRacine.Enabled = True
        ' Else
        ' NoteRacine.Enabled = False
        ' OctaveRacine.Enabled = False
        ' End If
        '
        ' Canal THRU
        ' **********
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Canal_THRU", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Canal_THRU", "1")
        'CanalThru.Value = 1
        'Else
        'CanalThru.Value = Val(a)
        'End If
        'Canal = CanalThru.Value ' Canal est un byte mais  CanalThru.Value ne dépasse jamais 16


        ' Dimensions du Help
        ' ******************
        Dim h As Integer
        Dim w As Integer
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "WidthForm", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "WidthForm", "1157")
            h = Me.Size.Height
            Me.Size = New Size(1157, h)
        Else
            h = Me.Size.Height
            Me.Size = New Size(Val(a), h)
        End If
        '
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "HeightForm", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "HeightForm", "740")
            w = Me.Size.Width
            Me.Size = New Size(w, 740)
        Else
            w = Me.Size.Width
            Me.Size = New Size(w, Val(a))
        End If
        '

        ' Mode étendu
        ' ***********
        ' 
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ModeEtendu", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ModeEtendu", "0")
            FlagMode = 0
        Else
            Select Case a
                Case "0"
                    FlagMode = 0    ' toujours à 0 
                Case "1"
                    FlagMode = 1    ' toujours à 0
                Case "2"
                    FlagMode = 2
            End Select
        End If

        ' Ecoute eventH avec CTRL + clic
        ' *******************************
        ' gamme + accord
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "GammePlusAccord", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "GammePlusAccord", "1")
            GammePlusAccord.Checked = True
        Else
            Select Case a
                Case "0"
                    GammePlusAccord.Checked = False    ' toujours à 0 
                Case "1"
                    GammePlusAccord.Checked = True    ' 
            End Select
        End If
        ' TempoEcoute de CTRL + clic
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "TempoEcoute", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "TempoEcoute", "1")
            ComboBox7.SelectedIndex = 1
        Else
            ComboBox7.SelectedIndex = Val(a)
        End If

        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "PlayC", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "PlayC", "80")
            PlayC.Value = 74
        Else
            PlayC.Value = Val(a)
        End If
        a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "PlayN", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        If a = Nothing Then
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "PlayN", "90")
            PlayN.Value = 100
        Else
            PlayN.Value = Val(a)
        End If



        ' Réduction de longueur de notes (Compression (Comp)
        ' **************************************************
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ReducLongNote", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ReducLongNote", "0")
        'ComboBox8.SelectedIndex = 0
        'Else
        'ComboBox8.SelectedIndex = Val(a)
        'End If

        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "WidthSplitter", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        ' My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "WidthSplitter", "550")
        ' SplitContainer2.SplitterDistance = 554
        ' Else
        ' h = Me.Size.Height
        ' SplitContainer2.SplitterDistance = Val(a)
        ' End If
        '
        ' Délimiteurs gauche et droit
        ' ***************************
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Délimiteur_Gauche", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Délimiteur_Gauche", "1")
        'Début.Value = 3
        'Else
        'Début.Value = Val(a)
        'End If
        '
        'a = My.Computer.Registry.GetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Délimiteur_Droit", Nothing) ' Nothing est la valeur à retourner si pas de valeur dans le registre
        'If a = Nothing Then
        'My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Délimiteur_Droit", "12")
        'Terme.Value = 12
        'Else
        'Terme.Value = Val(a)
        'End If
    End Sub
    Private Sub OuvrirToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles OuvrirToolStripMenuItem.Click, Button12.Click
        Dim i As Integer
        Me.Cursor = Cursors.WaitCursor
        'If EcritUneFois = True Then
        i = NouveauConfirm() ' la question est : voulez-vous enregistrez préalablement votre projet
        Select Case i
            Case DialogResult.Yes
                Enregistrer()
                Ouvrir2()
                Vue_Réduite()
            Case DialogResult.No
                Ouvrir2()
                Vue_Réduite()
            Case DialogResult.Cancel ' on ne fait rien
        End Select
        'Else
        ' Ouvrir2()
        'End If
        Me.Cursor = Cursors.Default

    End Sub
    Sub Ouvrir2()
        Dim Line As String
        Dim ETAT As String = "Rien"
        Dim TBL() As String
        Dim FInfo As FileInfo
        Dim s As New Size
        Dim i As Integer
        Dim aa, bb, cc, dd As String
        '
        EnChargement = True
        Try

            Cacher_FormTransparents()
            '
            TabControl4.Enabled = False
            '
            FichierOuvrir = ""
            If Trim((FichierEntréSurClic)) = "" Then
                OpenFileDialog1.FilterIndex = 2
                '
                OpenFileDialog1.InitialDirectory = CheminFichierOuvrir
                OpenFileDialog1.FileName = ""

                If Module1.LangueIHM = "fr" Then
                    OpenFileDialog1.Title = "Ouverture projet"
                Else
                    OpenFileDialog1.Title = "Open project"
                End If

                OpenFileDialog1.Filter = "HyperVoicing (*.zic3*)|*.zic3"
                '
                If OpenFileDialog1.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                    FichierOuvrir = OpenFileDialog1.FileName
                End If
            Else
                FichierOuvrir = Trim(FichierEntréSurClic)
                'MessageBox.Show("Chemin du fichier récupéré : " + FichierOuvrir)
            End If
            ' test cas de l'ouverture directe par dbl clic sur le fichier zic3
            ' ****************************************************************
            ' FichierOuvrir=C:\TRAVAUX\DEV\54 - Projet HyperVoicing\Projets de tests\02 - Majeurs-4notes.zic3
            FichierEntréSurClic = ""
            '
            Dim a As String = System.IO.Path.GetExtension(FichierOuvrir) ' extension du fichier choisi - il est utile de tester l'extension même s'il y a un filtre dans la boite de dialogue

            If Trim(FichierOuvrir) <> "" And a = ".zic3" Then
                RichTextBox2.Text = FichierOuvrir
                NomFichier = Dir(FichierOuvrir)
                If My.Computer.FileSystem.FileExists(FichierOuvrir) Then
                    Me.Visible = True
                    Transport.Visible = False
                    '
                    ' Positionnement de la jauge d'ouverture
                    ' **************************************
                    Dim pp As New Point
                    'pp.X = 750 'Me.Location.X + (Me.Size.Width - Transport.Width) \ 2) + 378 ' même position x que la barre de transport (voir Transport_Position
                    'pp.Y = Jauge.Location.Y
                    'Jauge.Location = NomduSon.Location ' pp

                    NomduSon.Visible = False
                    LJauge1.Visible = True
                    '
                    pp.Y = LJauge1.Location.Y
                    LJauge1.Location = pp
                    s.Width = 2
                    s.Height = 15
                    'Jauge.Size = s
                    Jauge.Visible = True
                    Jauge.BringToFront()
                    LJauge1.Visible = True
                    LJauge1.Text = "Départ"
                    LJauge1.Refresh()
                    pp = Jauge.Location
                    pp.Y = pp.Y + Jauge.Size.Height + 5
                    LJauge1.Location = pp
                    LJauge1.Size = Jauge.Size
                    '
                    NouvPourOuvrir() ' redessiner l'appli
                    '
                    Refresh()
                    '
                    LJauge1.Text = "NouvPourOuvrir passé"
                    LJauge1.Refresh()

                    NomFichier = Dir(FichierOuvrir)
                    Me.Text = NomFichier
                    '
                    FInfo = My.Computer.FileSystem.GetFileInfo(FichierOuvrir)
                    CheminFichierOuvrir = FInfo.DirectoryName
                    '
                    CheminFichierEnreg = CheminFichierOuvrir
                    FichierEnreg = FichierOuvrir

                    IndicateurEnreg = True
                    ETAT = ""
                    '
                    FileOpen(1, FichierOuvrir, OpenMode.Input) ' Ouvre en lecture
                    'Me.Visible = False
                    s.Width = s.Width + 1
                    Jauge.Size = s
                    LJauge1.Text = "FileOpen passé"
                    LJauge1.Refresh()


                    While Not EOF(1) ' Boucler jusqu'à la fin du fichier
                        '
                        Line = ReadLine() ' Lire chaque ligne
                        TBL = Split(Line)
                        If TBL(0) = "PARAM" Then
                            ETAT = Line
                            If ETAT <> "PARAM FIN" And ETAT <> "PARAM MIDI" Then
                                Line = ReadLine()
                            End If

                        Else
                            TBL = Split(Line, ",")
                            If TBL(0) = "VARIATIONS" Or TBL(0) = "STACKING" Or TBL(0) = "PianoRoll" Or TBL(0) = "ListDrumInst" Or TBL(0) = "ListDrumNotes" Or
                                TBL(0) = "ListTimeLPres" Or TBL(0) = "NomPréset" Or TBL(0) = "MixListVolumes" Or TBL(0) = "MixListMute" Or TBL(0) = "AutorisVolumes" Or TBL(0) = "TRANSPORT" Then '  

                                ETAT = TBL(0)
                            End If

                        End If
                        '
                        '
                        Select Case ETAT
                            Case "PARAM MUSIQUE"
                                TBL = Split(Line, ";")
                                Ouvrir_MUSIQUE(TBL(1), TBL(2))
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param Musique passé"
                                LJauge1.Refresh()

                            Case "PARAM ONGLET_TONALITE"
                                'Line = ReadLine(1) ' Lire chaque ligne
                                TBL = Split(Line, ";")
                                Ouvrir_ONGLET_TONALITE(TBL(1), TBL(2))
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param Onglet Tonalité passé"
                                LJauge1.Refresh()

                            Case "PARAM ONGLET_CADENCES"
                                'Line = ReadLine(1) ' Lire chaque ligne
                                TBL = Split(Line, ";")
                                Ouvrir_ONGLET_CADENCES(TBL(1), TBL(2))
                                '
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param Onglet Cadence passé"
                                LJauge1.Refresh()

                            Case "PARAM EVENTH"
                                TBL = Split(Line, ";")
                                Ouvrir_EVENTH(TBL(1), TBL(2), TBL(3), TBL(4), TBL(5), TBL(6), TBL(7), TBL(8), TBL(9), TBL(10), TBL(11))
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param EVENTH passé"
                                LJauge1.Refresh()


                            Case "PARAM ZONES"
                                'supprimé


                            Case "PARAM SYSTEM"
                                TBL = Split(Line, ";")
                                Ouvrir_SYSTEM(TBL(1), TBL(2))
                                LJauge1.Text = "Param Système passé"
                                LJauge1.Refresh()

                            Case "PARAM GM/GS"
                                TBL = Split(Line, ";")
                                Ouvrir_GMGS(TBL(1), TBL(2))
                                '
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param GM/GS passé"
                                LJauge1.Refresh()

                            Case "PARAM VARIATIONS"
                                TBL = Split(Line, ";")
                                Ouvrir_Variations(Line)

                            Case "STACKING"
                                Select Case TBL(1)
                                    Case "MUTEVOICE"
                                        For i = 0 To 4
                                            MUTEVOICE.Item(i).Checked = Convert.ToBoolean(TBL(i + 2))
                                        Next i
                                    Case "NOMSON"
                                        For i = 0 To 4
                                            NOMSON.Item(i).Text = TBL(i + 2)
                                        Next i
                                    Case "TRANSP"
                                        For i = 0 To 4
                                            OCT.Item(i).Value = Convert.ToDecimal(TBL(i + 2))
                                        Next i
                                    Case "PAN"
                                        For i = 0 To 4
                                            PAN.Item(i).Value = Convert.ToDecimal(TBL(i + 2))
                                        Next i
                                    Case "VEL"
                                        For i = 0 To 4
                                            VEL.Item(i).Value = Convert.ToDecimal(TBL(i + 2))
                                        Next i
                                    Case "VOLSTACK"
                                        For i = 0 To 4
                                            VOLSTACK.Item(i).Value = Convert.ToDecimal(TBL(i + 2))
                                        Next i
                                    Case "PRG"
                                        For i = 0 To 4
                                            PRG.Item(i).SelectedIndex = Convert.ToInt16(TBL(i + 2))
                                        Next i
                                    Case "CANAUX"
                                        For i = 0 To 4
                                            CANAUX.Item(i).Value = Convert.ToInt16(TBL(i + 2))
                                        Next i
                                    Case "InitialVoicing"
                                        InitialVoicing.Checked = Convert.ToBoolean(TBL(2)) ' Accords standards
                                    Case "MixActivationSM"
                                        MixActivationSM.Checked = Convert.ToBoolean(TBL(2))
                                    Case "StackMode"
                                        StackMode.Checked = Convert.ToBoolean(TBL(2))
                                End Select

                            ' PIANOROLL
                            ' *********
                            Case "PianoRoll"
                                i = Convert.ToInt16(TBL(1)) - 1
                                'If i <= nb_PianoRoll - 1 Then
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param PianoRoll en cours"
                                LJauge1.Refresh()
                                Select Case Trim(TBL(2))
                                    Case "ParamMélo", "ParamMelo"
                                        listPIANOROLL(i).Charger_Param(Line)
                                    Case "NotesMélo", "NotesMelo"
                                        listPIANOROLL(i).Charger_Notes(Line)
                                    Case "Control"
                                        listPIANOROLL(i).Charger_Ctrl(Line)
                                    Case "ControlSys"
                                        listPIANOROLL(i).Charger_ControlSys(Line)
                                    Case "Pédale" ' 
                                        listPIANOROLL(i).Charger_CtrlPédale(Line)
                                    Case "CalquesMIDI"
                                        listPIANOROLL(i).Charger_CalquesMIDI(Line)
                                    Case "ParamCalquesMIDI"
                                        listPIANOROLL(i).Charger_ParamCalquesMIDI(Line)
                                End Select
                                '

                            ' DRUMS
                            ' *****
                            Case "ListDrumInst" ' DRUM EDIT
                                For i = 1 To TBL.Count - 1 ' 13
                                    Drums.Charger_ListDrumInst(i, TBL(i))
                                Next
                            Case "ListDrumNotes"
                                Drums.Charger_ListDrumNotes(Line)
                            Case "ListTimeLPres"
                                Drums.Charger_ListTimeLPres(Line)
                            Case "NomPréset"
                                Drums.Charger_LNomPréset(Line)
                                Drums.FocusSurA()
                                '
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param Drum Edit passé"
                                LJauge1.Refresh()

                            ' MIXAGE
                            ' ******"
                            Case "MixListVolumes"
                                Mix.Maj_ListVolumesMix(Line)
                                '

                            Case "MixListMute"
                                Mix.Maj_ListMute(Line)

                            Case "AutorisVolumes"
                                Mix.Maj_AutorisVolumes(Line)

                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param Mixage passé"
                                LJauge1.Refresh()

                            ' TRANSPORT
                            ' *********
                            Case "TRANSPORT"
                                Transport.Maj_TRANSPORT(Line)
                                '
                                s.Width = s.Width + 1
                                Jauge.Size = s
                                LJauge1.Text = "Param Transport passé"
                                LJauge1.Refresh()

                            Case "PARAM PRINT-EXPORT"
                            Case "PARAM MIDI"
                            Case "PARAM FIN"
                        End Select
                    End While
                    FileClose(1) ' Fermer.
                End If
            End If
            ' Mise à jour des Grillesgrid1.
            ETAT = "LECTURE FICHIER TERMINEE"
            'Me.Visible = True
            'Refresh()

            Maj_Grilles()
            Ecriture_Entrée_Ds_CompoGrid()

            '
            'AffTona()
            'Init_BarresBleuRouge()

            LockageColonnes()
            '
            s.Width = s.Width + 1
            Jauge.Size = s
            LJauge1.Text = "MajGrille - Compogrid passé"
            LJauge1.Refresh()

            EnChargement = False
            EcritUneFois = False
            ' 
            Maj_TonEtModes()
            '
            'EnvoyerTout() ' à placer obligatoirement après  'EnChargement = False'
            '
            Calcul_AutoVoicingZ()
            '
            '
            s.Width = s.Width + 1
            Jauge.Size = s
            LJauge1.Text = "Onglet Tons Voisins passé"
            LJauge1.Refresh()
            '
            '
            ' Mise à jour entête des PianoRoll 
            ' ********************************


            aa = Trim(Det_ListAcc())
            bb = Trim(Det_ListGam())
            cc = Trim(Det_ListMarq())
            dd = Trim(Det_ListTon())
            For i = 0 To nb_PianoRoll - 1
                listPIANOROLL(i).F1.Visible = False
                listPIANOROLL(i).PListAcc = aa 'Det_ListAcc()
                listPIANOROLL(i).PListGam = bb 'Det_ListGam()
                listPIANOROLL(i).PListMarq = cc 'Det_ListMarq()
                listPIANOROLL(i).PListTon = dd '
                listPIANOROLL(i).F1_Refresh()
                listPIANOROLL(i).Clear_AllLayers()
                listPIANOROLL(i).F1_Refresh()
                listPIANOROLL(i).Maj_CalquesMIDI() ' à placer obligatoirement après F1_Refresh
                listPIANOROLL(i).F1.Visible = True
                s.Width = s.Width + 5
                Jauge.Size = s
                LJauge1.Text = "Refresh PianoRoll " + i.ToString + " passé"
                LJauge1.Refresh()
            Next
            '
            ' Mise à jour de drumedit (timeline et drumedit = Grid1 et Grid2)
            ' ***************************************************************
            Drums.PListAcc = Det_ListAcc()
            Drums.PListMarq = Det_ListMarq()
            Drums.F2_Refresh()
            Drums.Refresh_Drums_Ouvrir()
            '
            s.Width = s.Width + 1
            Jauge.Size = s
            LJauge1.Text = "Refresh Drum Edit passé"
            LJauge1.Refresh()
            '
            Transport.Visible = True
            Transport.BringToFront()
            '
            Jauge.Visible = False
            LJauge1.Visible = False
            '
            NomduSon.Visible = True
            '
            TabControl4.Enabled = True
            '
            Refresh()
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure Ouvrir2 - " + "ETAT : " + ETAT + " - " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
            ' Dim result As DialogResult = MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
        End Try
        '
    End Sub
    Sub Maj_TonEtModes()
        Dim a, b As String
        Dim i As Integer
        ' Lire la 1ere ligne de ce qui vient d'être ouvert
        a = Grid1.Cell(1, 3).Text
        tbl = a.Split()
        If Trim(tbl(1)) = "Maj" Then
            b = "Major"
        Else
            b = "Minor"
        End If
        a = " " + Trim(tbl(0)) + " " + Trim(b)
        '
        ' Maj TON
        ' *******
        i = ComboBox1.Items.IndexOf(a)
        If i <> -1 Then
            ComboBox1.SelectedIndex = i
        End If
        ' Maj MODES
        ' *********
        Maj_MODES(1)
    End Sub
    Private Sub Ouvrir_GMGS(Rubrique As String, valeur1 As String)
        Select Case Rubrique
            Case "Canal"
                CanalThru.Value = Val(valeur1)
            Case "Dyn"
                PlaybackVelocity.Value = Val(valeur1)
            Case "ListGS"
                ListGS.SelectedIndex = Val(valeur1)
            Case "Volume"
                Vol.Value = Val(valeur1)
            Case "Reverb"
                Reverb.Value = Val(valeur1)
            Case "Chorus"
                Chorus.Value = Val(valeur1)
            Case "OnGM"
                'OnGM.Checked = valeur1 --> supprimé
            Case "4Notes"
                ComboBox12.SelectedIndex = Val(valeur1)
            Case "Basse-1"
                ComboBox11.SelectedIndex = Val(valeur1)
        End Select
    End Sub
    Sub Ouvrir_Variations(a As String)
        Dim tbl() As String
        tbl = a.Split(";")
        Select Case tbl(0)

            Case "BasseMoins"
                BasseMoins12.Checked = Convert.ToBoolean(tbl(1))
                ComboBox11.SelectedIndex = Convert.ToInt16(tbl(2))
                UpDown1.Value = Convert.ToDecimal(tbl(3))

            Case "4Notes"
                QuatreNotes.Checked = Convert.ToBoolean(tbl(1))
                ComboBox12.SelectedIndex = Convert.ToInt16(tbl(2))
                UpDown2.Value = Convert.ToDecimal(tbl(3))

        End Select
    End Sub




    Function ReadLine() As String
        Dim a As String
        a = LineInput(1) ' Lire chaque ligne
        ReadLine = Mid(a, 2, Len(a) - 2)
    End Function
    Private Sub Ouvrir_NOTES(Positions As String, Notes As String)
        Dim TBL() As String
        Dim m, t, ct As Integer

        TBL = Split(Positions, " ")
        m = Val(TBL(0))
        t = Val(TBL(1))
        ct = Val(TBL(2))
        '
        ' mise à jour
        TableNotesAccords(m, t, ct) = Trim(Notes)

    End Sub
    Private Sub Ouvrir_SYSTEM(Intitulé As String, Valeur As String)
        Select Case Intitulé
            Case "OrigineAccord"
                OrigineAccord = Val(Valeur)
            Case "Début"
                If Valeur = "0" Then Valeur = "1" ' verrue pour compatibilité ascendante
                Transport.Début.Value = Val(Valeur)
            Case "Terme"
                If Valeur = "0" Then Valeur = "1" ' verrue pour compatibilité ascendante
                Transport.Terme.Value = Val(Valeur)
            Case "Compression"
                If Valeur = "0" Then Valeur = "1" ' verrue pour compatibilité ascendante
                Transport.Comp.Value = Val(Valeur)
            Case "DuréeFin"
                If Valeur = "0" Then Valeur = "1" ' verrue pour compatibilité ascendante
                Transport.LFinal.Value = Val(Valeur)

        End Select
    End Sub
    Private Sub Ouvrir_MUSIQUE(Intitulé As String, Valeur As String)
        Dim tbl() As String

        Select Case Intitulé
            Case "Métrique"
                '
                Métrique.Text = Trim(Valeur)
                '
                'EffacerTout()
                'Maj_TAccents(Trim(Valeur))    '

                'Construction(Trim(Valeur), 2) ' reconstruire l'IHM en fonction de la métrique


                '
            Case "Tonalité"
                tbl = Split(Valeur)

                Dim P1, P2 As New Point
                P1.X = 1
                P1.Y = 18
                P2.X = 1
                P2.Y = 36
                '
                Label32.Location = P1
                Label33.Location = P2
                '
                Label32.Visible = True
                Label33.Visible = True
                '
            Case "TonalitéListe"

            Case "Tempo"
                Tempo.Value = Val(Valeur)
                Transport.Tempo.Value = Val(Valeur)
            Case "NomDuSon" ' nom du son de HyperVoicing
                NomduSon.Text = Trim(Valeur)
        End Select
    End Sub

    Private Sub Ouvrir_ONGLET_TONALITE(Intitulé As String, Valeur As String)
        Dim i As Integer
        Dim tbl() As String
        Dim a, b As String

        Select Case Intitulé
            Case "Onglet_Courant"
                Select Case Valeur
                    Case 0
                        OngletCours = 0
                        'TabPage_Cadences.Show()
                        'TabPage_Cadences.Select()
                        'TabControl4.SelectedTab = TabPage_Cadences
                    Case 1
                        OngletCours = 1
                        'TabPage_Tonalité.Show()
                        'TabPage_Tonalité.Select()
                        'TabControl4.SelectedTab = TabPage_Tonalité
                    Case 2
                        OngletCours = 2
                        'Cartozones.Show()
                        'Cartozones.Select()
                        'TabControl4.SelectedTab = TabPage3
                        '
                End Select

            Case "Tonalité_Majeure" ' tonalité majeure : combobox1
                ComboBox1.SelectedIndex = Val(Valeur)
                'Refresh() '
                ComboBox2.SelectedIndex = Val(Valeur)
                '
                a = Det_TonaCours2()
                b = Det_TonaMinCours2()
                Maj_TableGlobalAcc(Trim(a), Trim(b))
                Maj_TableGlobalAccVoisin(Trim(a), Trim(b))
                '
            Case "Tonalité_Mineure" ' tonalité majeure : combobox1
                'ComboBox2.SelectedIndex = Val(Valeur)
            Case "TypAccord"
                ComboBox23.SelectedIndex = Val(Valeur)
            Case "Accords"
                tbl = Split(Valeur, "-")
                For i = 0 To TabTons.Count - 1
                    TabTons.Item(i).Text = Trim(tbl(i + 1))
                Next i
            Case "AccordsVoisins"

            Case "RadioB_Mode"

        End Select
    End Sub
    Private Sub Ouvrir_ONGLET_CADENCES(Intitulé As String, Valeur As String)
        Dim i As Integer
        Dim tbl() As String

        Select Case Intitulé
            'Case "Onglet_Courant"
            '   If Valeur = "TabPage_Cadences" Then
            'TabPage_Cadences.Show()
            '       TabPage_Cadences.Select()
            'TabControl4.SelectedTab = TabPage_Cadences
             '   End If
            Case "Cadences_Majeures"
                ComboBox3.SelectedIndex = Val(Valeur)
            Case "Cadences_Mineures"
                ComboBox4.SelectedIndex = Val(Valeur)
            Case "TypAccord"
                ComboBox6.SelectedIndex = Val(Valeur)
            Case "Accords"
                tbl = Split(Valeur, "-")
                For i = 0 To TabCad.Count - 1
                    TabCad.Item(i).Text = Trim(tbl(i))
                    If Trim(tbl(i)) = "" Then
                        TabCadDegrés.Item(i).Visible = False
                        TabCad.Item(i).Visible = False
                    End If
                Next i
                Refresh()

                'Next i
                'Case "Filtres4Visible"
                ' tbl = Split(Valeur, "-")
                'For i = 0 To TabCadFiltres4.Count - 1
                'TabCadFiltres4.Item(i).Visible = False
                'If tbl(i + 1) = "True" Then
                'TabCadFiltres4.Item(i).Visible = True
                'End If
                'Next i
                'Case "Filtres4Checked"
                '   tbl = Split(Valeur, "-")
                '  For i = 0 To TabCadFiltres4.Count - 1
                ' TabCadFiltres4.Item(i).Checked = False
                'If tbl(i + 1) = "True" Then
                'TabCadFiltres4.Item(i).Checked = True
                'End If
                'Next
                'Case "Filtres7Visible"
                '   tbl = Split(Valeur, "-")
                '  For i = 0 To TabCadFiltres7.Count - 1
                ' TabCadFiltres7.Item(i).Visible = False
                'If tbl(i + 1) = "True" Then
                'TabCadFiltres7.Item(i).Visible = True
                'End If
                'Next i
                'Case "Filtres7Checked"
                '   tbl = Split(Valeur, "-")
                '  For i = 0 To TabCadFiltres7.Count - 1
                ' TabCadFiltres7.Item(i).Checked = False
                'If tbl(i + 1) = "True" Then
                'TabCadFiltres7.Item(i).Checked = True
                'End If
                'Next
            Case "indicCadence"
                EnChargement = False
                If Trim(Valeur) = "Maj" Then
                    'OuvrirCadences(Trim(ComboBox3.Text))
                Else
                    'OuvrirCadences(Trim(ComboBox4.Text))
                End If
                EnChargement = True
        End Select
    End Sub

    Private Sub Ouvrir_EVENTH(Ligne As String, Position As String, Marqueur As String, Tonalité As String, Accord As String,
                              Gamme As String, Mode As String, Degré As String, Détails As String, Vélo As String, Racine As String)
        Dim tbl() As String
        Dim m, t, ct As Integer

        tbl = Split(Position, ".")
        m = Val(tbl(0))
        t = Val(tbl(1))
        ct = Val(tbl(2))
        '
        TableEventH(m, t, ct).Ligne = Val(Ligne)
        TableEventH(m, t, ct).Position = Trim(Position)
        TableEventH(m, t, ct).Marqueur = Trim(Marqueur)
        TableEventH(m, t, ct).Tonalité = Trim(Tonalité)
        TableEventH(m, t, ct).Accord = Trim(Accord)
        TableEventH(m, t, ct).Gamme = Trim(Gamme)
        TableEventH(m, t, ct).Mode = Trim(Mode)
        TableEventH(m, t, ct).Degré = Val(Degré)
        TableEventH(m, t, ct).Détails = Trim(Détails)
        TableEventH(m, t, ct).Vel = Trim(Vélo)
        TableEventH(m, t, ct).Racine = Trim(Racine)
        '
    End Sub
    Sub Maj_Grilles()
        Dim i As Integer
        Dim m, t, ct As Integer
        Dim ligne As Integer
        Dim tbl() As String
        Dim P1 As New Point(1, 100)
        Dim P2 As New Point(1, 100)
        Dim a As String

        Grid1.AutoRedraw = False
        Grid2.AutoRedraw = False
        Grid3.AutoRedraw = False
        Grid4.AutoRedraw = False

        '
        For m = 0 To nbMesures '- 1
            For t = 0 To 5
                For ct = 0 To 4
                    ligne = TableEventH(m, t, ct).Ligne
                    If ligne = 1 Then
                        Entrée_Tonalité = TableEventH(m, t, ct).Tonalité
                    End If
                    If ligne <> -1 Then

                        ' Maj Grid1
                        ' *********
                        Grid1.Cell(Val(ligne), 1).Text = Trim(TableEventH(m, t, ct).Position)
                        '
                        If Trim(TableEventH(m, t, ct).Marqueur) <> "" Then
                            Grid1.Cell(Val(ligne), 2).Text = Trim(TableEventH(m, t, ct).Marqueur)
                            Grid1.Cell(Val(ligne), 2).BackColor = Color.Green
                            Grid1.Cell(Val(ligne), 2).ForeColor = Color.Yellow
                            '
                            Grid2.AutoRedraw = False
                            Grid2.Cell(0, m).Locked = False
                            Grid2.Cell(0, m).BackColor = Color.Green
                            Grid2.Cell(0, m).ForeColor = Color.Yellow
                            Grid2.Cell(0, m).Locked = True
                            Grid2.Cell(0, m).SetFocus()
                            Grid2.Refresh()
                            Grid2.AutoRedraw = True
                            '
                        Else
                            Grid1.Cell(Val(ligne), 2).Text = Trim(TableEventH(m, t, ct).Marqueur)
                            Grid1.Cell(Val(ligne), 2).BackColor = Couleur_Marqueurs
                            Grid1.Cell(Val(ligne), 2).ForeColor = Color.Black
                        End If
                        '
                        Grid1.Cell(Val(ligne), 3).Text = Trim(Trim(TableEventH(m, t, ct).Mode))
                        Grid1.Cell(Val(ligne), 4).Text = Trim(Trim(TableEventH(m, t, ct).Accord))
                        Grid1.Cell(Val(ligne), 5).Text = Trim(Trim(TableEventH(m, t, ct).Gamme))

                        a = Trad_DegréRomains(Trim(TableEventH(m, t, ct).Degré))
                        Grid1.Cell(Val(ligne), 6).Text = Trim(a)
                        '
                        a = Trim(TableEventH(m, t, ct).Tonalité)
                        Maj_CouleurTona_Cell(ligne, a)
                        '
                        ' Maj Grid2
                        ' *********
                        Grid2.Cell(0, m).Locked = False
                        If Grid2.Cell(0, m).BackColor <> Color.Green Then ' si déjà jaune c'est que la mesure contient plusieurs accords et qu'un marqueur a déjà été indiqué
                            Grid2.Cell(0, m).BackColor = Color.Beige
                        End If
                        Grid2.Cell(0, m).Locked = True
                        Grid2.Cell(0, m).SetFocus()
                        Grid2.Refresh()

                        If Trim(Grid2.Cell(1, m).Text) = "" Then
                            Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
                            Grid2.Cell(1, m).Text = Trim(Trim(TableEventH(m, t, ct).Accord))
                        Else
                            Grid2.Cell(1, m).Text = ChaineAccord(m)
                        End If
                        '
                        tbl = Split(Trim(TableEventH(m, t, ct).Tonalité))
                        If m <> 1 Then
                            Grid2.Cell(1, m).BackColor = DicoCouleur.Item(tbl(0)) ' la couleur est fonction de la tonalité
                            Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(tbl(0)) ' la couleur est fonction de la tonalité
                        Else
                            Grid2.Cell(1, m).BackColor = Color.Red ' la couleur est fonction de la tonalité
                            Grid2.Cell(1, m).ForeColor = Color.White ' la couleur est fonction de la tonalité
                        End If
                        '
                        ' Maj Grid3
                        ' *********
                        i = Det_IndexGrid3_De_ColGrid2(m)
                        i = i + ((t - 1) * Det_DivParBeat()) + (ct - 1)
                        Grid3.Cell(2, i).BackColor = Couleur_Accord_Grid3
                        Grid3.Cell(2, i).ForeColor = Color.White
                    End If
                Next ct
            Next t
        Next m
        '
        ' Effacer Grid4
        ' *************
        Effacer_Grid4()
        '
        Grid1.TopRow = 1
        Grid2.LeftCol = 1
        Grid3.LeftCol = 1
        Grid4.TopRow = 1
        '
        ' divers
        Grid1.Cell(1, 1).SetFocus()
        Grid2.Cell(1, 1).SetFocus()
        Grid3.Cell(1, 1).SetFocus()

        ' Positionnement des barres de sélection rouge et bleue
        ' *****************************************************
        P1.Y = 19
        P2.Y = 38
        '
        Label32.Location = P1
        Label33.Location = P2
        '
        Label32.Visible = True
        Label33.Visible = True

        ' Ré écriture des labels des objets graphiques
        ' ********************************************
        If LangueIHM = "fr" Then
            'Fr_Culture()
        Else
            'En_Culture()
        End If
        '
        ' Numérotation de Grid4
        ' *********************
        For i = 1 To Grid4.Rows - 1
            Grid4.Cell(i, 0).Text = i.ToString
        Next i
        '
        Grid1.AutoRedraw = True
        Grid2.AutoRedraw = True
        Grid3.AutoRedraw = True
        Grid4.AutoRedraw = True
        Grid1.Refresh()
        Grid2.Refresh()
        Grid3.Refresh()
        Grid4.Refresh()
    End Sub
    Function Det_DivParBeat() As Integer
        If Dénominateur = 4 Then
            Det_DivParBeat = 2 ' dénominateur = 4
        Else
            Det_DivParBeat = 3 ' dénominateur = 8
        End If
    End Function
    Private Sub Début_ValueChanged(sender As Object, e As EventArgs)
        If Début.Value >= Terme.Value Then
            If Terme.Value <> 0 Then
                Début.Value = Terme.Value - 1
            End If
        End If
    End Sub
    Private Sub Fin_ValueChanged(sender As Object, e As EventArgs)
        If Début.Value >= Terme.Value Then
            If Terme.Value <> 0 Then
                Terme.Value = Terme.Value + 1
            End If
        End If
    End Sub

    Private Sub Button2_Click_1(sender As Object, e As EventArgs)
        ZoomMoins()
    End Sub

    Private Sub Button1_Click_1(sender As Object, e As EventArgs)
        ZoomPlus()
    End Sub
    Private Sub ZoomPlus()
        Dim Largeur As Integer
        Dim j As Integer
        '
        Select Case Largeur_Zoom
            Case Grid3Largeur1
                Largeur = Grid3Largeur2
                Largeur_Zoom = Grid3Largeur2
            Case Grid3Largeur2
                Largeur = Grid3Largeur3
                Largeur_Zoom = Grid3Largeur3
            Case Grid3Largeur3
                Largeur = Grid3Largeur4
                Largeur_Zoom = Grid3Largeur4
            Case Grid3Largeur4
                Largeur = Largeur_Zoom
        End Select
        '
        Grid3.AutoRedraw = False
        j = Grid3.LeftCol
        For i = 1 To (nbColonnesGrid3) ' - 1)
            Grid3.Column(i).Width = Largeur
        Next i
        Grid3.LeftCol = j
        '
        Grid3.Refresh()
        Grid3.AutoRedraw = True
        '
        AssurerVisibilitéCellule(Grid3.LeftCol)
    End Sub

    Private Sub ZoomMoins()
        Dim Largeur As Integer
        Dim j As Integer

        Select Case Largeur_Zoom
            Case Grid3Largeur1
                Largeur = Largeur_Zoom
            Case Grid3Largeur2
                Largeur = Grid3Largeur1
                Largeur_Zoom = Grid3Largeur1
            Case Grid3Largeur3
                Largeur = Grid3Largeur2
                Largeur_Zoom = Grid3Largeur2
            Case Grid3Largeur4
                Largeur = Grid3Largeur3
                Largeur_Zoom = Grid3Largeur3
        End Select
        '
        Grid3.AutoRedraw = False
        j = Grid3.LeftCol
        For i = 1 To (nbColonnesGrid3) ' - 1)
            Grid3.Column(i).Width = Largeur
        Next i
        Grid3.LeftCol = j
        '
        Grid3.Refresh()
        Grid3.AutoRedraw = True
        '
        AssurerVisibilitéCellule(Grid3.LeftCol)
    End Sub
    Private Sub ZoomPlusGrid2()
        Dim Largeur As Integer
        Dim j As Integer
        '
        Select Case Largeur_ZoomGrid2
            Case Grid2Largeur0
                Largeur_ZoomGrid2 = Grid2Largeur1
            Case Grid2Largeur1
                Largeur_ZoomGrid2 = Grid2Largeur2
            Case Grid2Largeur2
                Largeur_ZoomGrid2 = Grid2Largeur3
            Case Grid2Largeur3
                Largeur_ZoomGrid2 = Grid2Largeur4
            Case Grid2Largeur4
                Largeur = Largeur_ZoomGrid2
        End Select
        '
        Grid2.AutoRedraw = False
        j = Grid2.LeftCol
        For i = 1 To (Grid2.Cols - 1) ' - 1)
            Grid2.Column(i).Width = Largeur_ZoomGrid2
        Next i
        Grid2.LeftCol = j
        '
        Grid2.Refresh()
        Grid2.AutoRedraw = True
        '
        AssurerVisibilitéCelluleGrid2(Grid2.ActiveCell.Col) '(Grid2.LeftCol)
    End Sub
    Private Sub ZoomMoinsGrid2()
        Dim Largeur As Integer
        Dim j As Integer

        Select Case Largeur_ZoomGrid2
            Case Grid2Largeur0
                Largeur = Largeur_ZoomGrid2
            Case Grid2Largeur1
                Largeur_ZoomGrid2 = Grid2Largeur0
            Case Grid2Largeur2
                Largeur_ZoomGrid2 = Grid2Largeur1
            Case Grid2Largeur3
                Largeur_ZoomGrid2 = Grid2Largeur2
            Case Grid2Largeur4
                Largeur_ZoomGrid2 = Grid2Largeur3
        End Select
        '
        Grid2.AutoRedraw = False
        j = Grid2.LeftCol
        For i = 1 To (Grid2.Cols - 1) ' - 1)
            Grid2.Column(i).Width = Largeur_ZoomGrid2
        Next i
        Grid2.LeftCol = j
        '
        Grid2.Refresh()
        Grid2.AutoRedraw = True
        '
        AssurerVisibilitéCelluleGrid2(Grid2.ActiveCell.Col) '(Grid2.LeftCol)
    End Sub

    Private Sub SplitContainer1_SplitterMoved(sender As Object, e As SplitterEventArgs)
        'Label17.Text = Str(SplitContainer1.SplitterDistance)
        'Label21.Text = "SplitContainer1"
    End Sub

    Private Sub Button10_Click(sender As Object, e As EventArgs)
        'flèche vers la gauche
        LargeursColGrid1()
        Select Case EtatSplit1
            Case "Notes"
                EtatSplit1 = "Gammes"
                SplitContainer1.SplitterDistance = SplitGammes
            Case "Gammes"
                EtatSplit1 = "Accords"
                SplitContainer1.SplitterDistance = SplitAccords
            Case "Accords"
                EtatSplit1 = "Tonalités"
                SplitContainer1.SplitterDistance = SplitTonalités
            Case "Tonalités"
                EtatSplit1 = "Marqueurs"
                SplitContainer1.SplitterDistance = SplitMarqueurs
            Case "Marqueurs"
                EtatSplit1 = "Positions"
                SplitContainer1.SplitterDistance = SplitPositions
            Case "Positions"
                EtatSplit1 = "NLignes"
                SplitContainer1.SplitterDistance = SplitNligne
            Case Else
                EtatSplit1 = "NLignes"
                SplitContainer1.SplitterDistance = SplitNligne
        End Select
    End Sub

    Private Sub Button11_Click(sender As Object, e As EventArgs)
        'flèche vers la droite
        LargeursColGrid1()
        Select Case EtatSplit1
            Case "NLignes"
                EtatSplit1 = "Positions"
                SplitContainer1.SplitterDistance = SplitPositions
            Case "Positions"
                EtatSplit1 = "Marqueurs"
                SplitContainer1.SplitterDistance = SplitMarqueurs
            Case "Marqueurs"
                EtatSplit1 = "Tonalités"
                SplitContainer1.SplitterDistance = SplitTonalités
            Case "Tonalités"
                EtatSplit1 = "Accords"
                SplitContainer1.SplitterDistance = SplitAccords
            Case "Accords"
                EtatSplit1 = "Gammes"
                SplitContainer1.SplitterDistance = SplitGammes
            Case "Gammes"
                EtatSplit1 = "Notes"
                SplitContainer1.SplitterDistance = SplitNotes
            Case Else
        End Select
    End Sub

    Private Sub SplitContainer3_SplitterMoved(sender As Object, e As SplitterEventArgs)
        'Label17.Text = Str(SplitContainer3.SplitterDistance)
    End Sub
    Sub EffacerGrid1()
        Dim lig As Integer
        Dim col As Integer
        Grid1.AutoRedraw = False
        '
        For lig = 0 To Grid1.Rows - 1
            For col = 0 To Grid1.Cols - 1
                Grid1.Cell(lig, col).Text = ""
            Next
        Next
        '
        Grid1.Refresh()
        Grid1.AutoRedraw = True
    End Sub
    '
    Sub EffacerGrid2()
        Dim lig As Integer
        Dim col As Integer
        Grid2.AutoRedraw = False
        '
        For lig = 0 To Grid2.Rows - 1
            For col = 0 To Grid2.Cols - 1
                Grid2.Cell(lig, col).Text = ""
            Next
        Next
        '
        Grid2.Refresh()
        Grid2.AutoRedraw = True
    End Sub
    Sub EffacerGrid3()
        Dim lig As Integer
        Dim col As Integer
        Grid3.AutoRedraw = False
        '
        For lig = 0 To Grid3.Rows - 1
            For col = 0 To Grid3.Cols - 1
                Grid3.Cell(lig, col).Text = ""
            Next
        Next
        '
        Grid3.Refresh()
        Grid3.AutoRedraw = True
    End Sub
    Sub EffacerTableEventH()
        Dim m, t, ct As Integer

        For m = 0 To UBound(TableEventH, 1)
            For t = 0 To UBound(TableEventH, 2)
                For ct = 0 To UBound(TableEventH, 3)
                    TableEventH(m, t, ct).Ligne = -1
                    TableEventH(m, t, ct).Position = ""
                    TableEventH(m, t, ct).Position = ""
                    TableEventH(m, t, ct).Marqueur = ""
                    TableEventH(m, t, ct).Tonalité = ""
                    TableEventH(m, t, ct).Accord = ""
                    TableEventH(m, t, ct).Gamme = ""
                Next ct
            Next t
        Next m
    End Sub
    Sub EffacerTout()
        EffacerGrid1()
        EffacerGrid2()
        EffacerGrid3()
        EffacerTableEventH()
    End Sub

    Private Sub Button14_Click(sender As Object, e As EventArgs)
        Select Case EtatSplit3
            Case "SansDétail"
                'SplitContainer3.SplitterDistance = SplitDétails
                'EtatSplit3 = "Détails"
            Case "Détails", "SansGrid3"
                'SplitContainer3.SplitterDistance = SplitSansDétail
                'EtatSplit3 = "SansDétail"
        End Select
    End Sub

    Private Sub DessinApplication2() 'Private Sub DessinApplication2(SplitGrid1 As Integer, SplitGrid2 As Integer, splitgrid4 As Integer)

        Grid1.LeftCol = 0 '
        Grid2.LeftCol = 0
        Grid3.LeftCol = 0
        '
        '
        ' Splitters verticaux
        ' *******************
        SplitContainer1.SplitterDistance = 560 ' 538 '530 SplitGrid1


        '
        ' Splitters horizontaux
        ' *********************
        '

        SplitContainer6.SplitterDistance = 432  ' séparateur piano/liste des gammes avec le reste au dessus


        SplitContainer12.IsSplitterFixed = False
        SplitContainer12.SplitterDistance = 475 '475  ' 425
        SplitContainer12.FixedPanel = FixedPanel.Panel1
        SplitContainer12.IsSplitterFixed = True   ' splitter situé au dessus de la barre de transport(grid2)
        '
        SplitContainer13.IsSplitterFixed = True    ' splitter situé au dessus du navigateur détaillé (grid3)
        SplitContainer13.SplitterDistance = 358 '410 ' 360
        SplitContainer13.FixedPanel = FixedPanel.Panel1
        '
        SplitContainer9.SplitterDistance = 302 '351 ' 300
        SplitContainer9.IsSplitterFixed = True   ' splitter situé au dessus du navigateur global
        SplitContainer9.FixedPanel = FixedPanel.Panel1

        SplitContainer3.IsSplitterFixed = True          ' Splitter la grille des gammes et le clavier
        SplitContainer3.SplitterDistance = 560
        SplitContainer3.FixedPanel = FixedPanel.Panel1
        '
        Maj_FlagMode(1)
        '
        '

        DimApp = Me.Size ' sauvegarde taille appli pour les onglets principaux "HyperVoicing" (Tabpage8) et "Aide " (Tabpage9)

    End Sub

    Private Sub Button10_Click_1(sender As Object, e As EventArgs)
        'flèche vers la gauche
        LargeursColGrid1()
        Select Case EtatSplit1
            Case "Notes"
                EtatSplit1 = "Gammes"
                SplitContainer1.SplitterDistance = SplitGammes
            Case "Gammes"
                EtatSplit1 = "Accords"
                SplitContainer1.SplitterDistance = SplitAccords
            Case "Accords"
                EtatSplit1 = "Tonalités"
                SplitContainer1.SplitterDistance = SplitTonalités
            Case "Tonalités"
                EtatSplit1 = "Marqueurs"
                SplitContainer1.SplitterDistance = SplitMarqueurs
            Case "Marqueurs"
                EtatSplit1 = "Positions"
                SplitContainer1.SplitterDistance = SplitPositions
            Case "Positions"
                EtatSplit1 = "NLignes"
                SplitContainer1.SplitterDistance = SplitNligne
            Case Else
                EtatSplit1 = "NLignes"
                SplitContainer1.SplitterDistance = SplitNligne
        End Select
    End Sub

    Private Sub Button11_Click_1(sender As Object, e As EventArgs)
        'flèche vers la droite
        LargeursColGrid1()
        Select Case EtatSplit1
            Case "NLignes"
                EtatSplit1 = "Positions"
                SplitContainer1.SplitterDistance = SplitPositions
            Case "Positions"
                EtatSplit1 = "Marqueurs"
                SplitContainer1.SplitterDistance = SplitMarqueurs
            Case "Marqueurs"
                EtatSplit1 = "Tonalités"
                SplitContainer1.SplitterDistance = SplitTonalités
            Case "Tonalités"
                EtatSplit1 = "Accords"
                SplitContainer1.SplitterDistance = SplitAccords
            Case "Accords"
                EtatSplit1 = "Gammes"
                SplitContainer1.SplitterDistance = SplitGammes
            Case "Gammes"
                EtatSplit1 = "Notes"
                SplitContainer1.SplitterDistance = SplitNotes
            Case Else
        End Select
    End Sub
    Private Sub Button2_Click_2(sender As Object, e As EventArgs)
        'ZoomMoins()
        AssurerVisibilitéCelluleGrid2(Grid2.ActiveCell.Col)
        ZoomMoinsGrid2()
    End Sub

    Private Sub Button1_Click_3(sender As Object, e As EventArgs)
        'ZoomPlus()
        AssurerVisibilitéCelluleGrid2(Grid2.ActiveCell.Col)
        ZoomPlusGrid2()
    End Sub
    Private Sub SplitContainer9_SplitterMoved(sender As Object, e As SplitterEventArgs)
        'Label17.Text = Str(SplitContainer9.SplitterDistance)
        'Label21.Text = "SplitContainer9"
    End Sub
    Public Function TrouverLignedePosition(mesure As String) As Integer
        Dim i As Integer
        Dim a As String

        TrouverLignedePosition = 0
        '
        For i = 1 To Grid1.Rows - 1
            a = Det_NMesure(Grid1.Cell(i, 1).Text)
            If Trim(mesure) = Trim(a) Then
                TrouverLignedePosition = i
                Exit For
            End If
        Next
    End Function
    Public Function TrouverLignedePosition2(mesure As String) As Integer
        Dim i As Integer
        Dim a As String

        TrouverLignedePosition2 = -1
        '
        For i = 1 To Grid1.Rows - 1
            a = Grid1.Cell(i, 1).Text
            If Trim(mesure) = Trim(a) Then
                TrouverLignedePosition2 = i
                Exit For
            End If
        Next
    End Function
    Public Function TrouverLignedePosition3(mesure As String) As Integer
        Dim i As Integer
        Dim a As String
        Dim tbl1() As String
        Dim tbl2() As String

        TrouverLignedePosition3 = -1
        '
        tbl1 = Split(mesure, ".")
        For i = 1 To Grid1.Rows - 1
            a = Grid1.Cell(i, 1).Text
            If Trim(a) <> "" Then
                tbl2 = Split(a, ".")
                If Trim(Trim(tbl1(0)) = Trim(tbl2(0))) Then
                    TrouverLignedePosition3 = i
                    Exit For
                End If
            End If
        Next
    End Function
    Private Sub Button11_Click_2(sender As Object, e As EventArgs)
        SplitContainer1.SplitterDistance = 895
        SplitContainer2.SplitterDistance = 300
    End Sub

    Private Sub Button10_Click_2(sender As Object, e As EventArgs)
        SplitContainer1.SplitterDistance = 0
        SplitContainer2.SplitterDistance = 1000
    End Sub
    Function Det_Index_De_Ligne(ligne As Integer) As String
        Dim a As String
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim sortir As Boolean
        '
        a = ""
        sortir = False
        For m = 0 To UBound(TableEventH, 1)
            For t = 0 To UBound(TableEventH, 2)
                For ct = 0 To UBound(TableEventH, 3)
                    If TableEventH(m, t, ct).Ligne = ligne Then
                        a = Trim(Str(m) + "-" + Str(t) + "-" + Str(ct))
                        sortir = True
                        Exit For
                    End If
                Next ct
                If sortir Then Exit For
            Next t
            If sortir Then Exit For
        Next m
        Det_Index_De_Ligne = a
    End Function
    Sub RAZ_DétailsEventH(ligne As Integer)
        Dim i As Integer
        For i = 10 To Grid1.Cols - 2 ' on met -2 pour ne pas toucher aux checkbox de la dernière colonne
            Grid1.Cell(ligne, i).Text = ""
            Grid1.Cell(ligne, i).BackColor = Color.White
        Next
    End Sub
    Function Det_ValCelluleMarquée() As String
        Dim ind As Integer
        Dim ligne As Integer
        Dim degré As Integer
        '

        Det_ValCelluleMarquée = ""
        For ind = 0 To 20
            degré = Det_IndexDegré2(ind)
            ligne = Det_LigneTableGlobale(ind)
            If TableCoursAcc(ligne, degré).Marqué = True Then
                Det_ValCelluleMarquée = TableCoursAcc(ligne, degré).Accord
            End If
        Next
    End Function

    Function Det_PosPremierAccordMesure(col As Integer) As String
        Dim i As Integer
        '
        Dim Position As String
        Dim indexGrid3DébutMesure As Integer
        Dim indexGrid3FinMesure As Integer
        Dim tbl() As String

        Position = ""
        Det_PosPremierAccordMesure = ""
        indexGrid3DébutMesure = Det_IndexGrid3_De_ColGrid2(col)
        indexGrid3FinMesure = Det_IndexGrid3_De_ColGrid2(col + 1)
        For i = indexGrid3DébutMesure To indexGrid3FinMesure - 1
            If Grid3.Cell(2, i).BackColor = Couleur_Accord_Grid3 Then
                Position = Det_IndexDansGrid3(i)
                '
                tbl = Split(Position)
                Det_PosPremierAccordMesure = Trim(tbl(0) + "." + tbl(1) + "." + tbl(2))
                Exit For
            End If
        Next
    End Function


    Sub Maj_MenuTousAccords(m As Integer, t As Integer, ct As Integer)
        Dim tbl1() As String
        Dim tbl2() As String
        Dim tbl3() As String
        Dim tbl4() As String
        Dim tbl5() As String
        Dim tbl6() As String
        Dim tbl7() As String
        '
        Dim Accord As String
        Dim Tonique As String
        Dim Chiffrage As String
        Dim Enrich As String
        '
        Dim i, k As Integer

        Dim degré As Integer
        Dim SuiteAcc As String

        k = -1

        degré = TableEventH(m, t, ct).Degré          ' détermination du degré de l'accord
        tbl1 = Split(TableEventH(m, t, ct).Mode, " ") ' détermination du mode de l'accord
        '
        ' version 3notes de l'accord
        ' **************************
        '
        SuiteAcc = Mode(tbl1(0), tbl1(1), 3)
        tbl3 = Split(SuiteAcc, "-")
        k = k + 1
        ReDim Preserve tbl2(k)
        tbl2(k) = tbl3(degré) '' lecture de l'accord

        ' version 4notes7 de l'accord
        ' ***************************
        '
        SuiteAcc = Mode(tbl1(0), tbl1(1), 4)
        tbl3 = Split(SuiteAcc, "-")
        k = k + 1
        ReDim Preserve tbl2(k)
        tbl2(k) = tbl3(degré) ' ' lecture de l'accord

        ' version 4notes9 de l'accord
        ' ***************************
        '
        SuiteAcc = Mode(tbl1(0), tbl1(1), 5)
        tbl3 = Split(SuiteAcc, "-") ' lecture de la suite des accords 9e
        '
        If Trim(tbl3(degré)) <> "___" Then
            tbl4 = Split(Trim(tbl3(degré)), "(") ' tbl3(degré)= l'accord
            tbl6 = Split(Trim(tbl4(0)), " ")
            tbl7 = Split(Trim(tbl4(1)), ")")
            Tonique = Trim(tbl6(0))
            Chiffrage = Microsoft.VisualBasic.Left(Trim(tbl6(1)), 1)
            Enrich = Trim(tbl7(0))
            If Chiffrage = "m" Then
                Accord = Tonique + " " + Chiffrage + Enrich
            Else
                Accord = Tonique + " " + Enrich
            End If

            k = k + 1
            ReDim Preserve tbl2(k)
            tbl2(k) = Accord
            k = k + 1
            ReDim Preserve tbl2(k)
            tbl2(k) = Trim(tbl3(degré))
        End If
        '
        ' version 4notes11 de l'accord
        ' ****************************
        SuiteAcc = Mode(tbl1(0), tbl1(1), 6)
        tbl3 = Split(SuiteAcc, "-") ' lecture de l'accord
        If Trim(tbl3(degré)) <> "___" Then
            tbl5 = Split(Trim(tbl3(degré)), " ") ' tbl5(0) = tonique;tbl5(1) = chiffrage
            Select Case tbl5(1)
                Case "m11"
                    k = k + 1
                    ReDim Preserve tbl2(k)
                    tbl2(k) = Trim(tbl3(degré))
                Case "11"
                    tbl4 = Split(tbl3(degré), " ")
                    Tonique = tbl4(0)
                    Accord = Tonique + " " + "sus4"
                    k = k + 1
                    ReDim Preserve tbl2(k)
                    tbl2(k) = Trim(Accord)
                    '
                    k = k + 1
                    ReDim Preserve tbl2(k)
                    tbl2(k) = Trim(tbl3(degré))
                Case "M7(11#)", "7(11)"
                    tbl4 = Split(Trim(tbl3(degré)), "(") ' dans tbl4(1) --> soit "(11" soit "(11#"
                    Select Case tbl4(1)
                        Case "11#)"
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 11#"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " M7(11#)"

                        Case "11)"
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 11"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " sus4"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 7sus4"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 7(11)"
                    End Select
            End Select
        End If
        '
        ' Mise à jour dans le menu
        ' ************************
        '
        Accord11.Visible = False
        Accord12.Visible = False
        Accord13.Visible = False
        Accord14.Visible = False
        Accord15.Visible = False
        Accord16.Visible = False
        Accord17.Visible = False
        Accord18.Visible = False
        '
        For i = 0 To UBound(tbl2)
            Select Case i
                Case 0
                    Accord11.Visible = True
                    Accord11.Text = tbl2(i)
                Case 1
                    Accord12.Visible = True
                    Accord12.Text = tbl2(i)
                Case 2
                    Accord13.Visible = True
                    Accord13.Text = tbl2(i)
                Case 3
                    Accord14.Visible = True
                    Accord14.Text = tbl2(i)
                Case 4
                    Accord15.Visible = True
                    Accord15.Text = tbl2(i)
                Case 5
                    Accord16.Visible = True
                    Accord16.Text = tbl2(i)
                Case 6
                    Accord17.Visible = True
                    Accord17.Text = tbl2(i)
                Case 7
                    Accord18.Visible = True
                    Accord18.Text = tbl2(i)
            End Select
        Next i
    End Sub
    Sub Maj_TousAccordsMnContext1(ind As Integer)
        Dim degré As Integer
        Dim ligne As Integer
        Dim tonique As String
        Dim Mode_ As String
        Dim tbl1() As String
        Dim tbl2() As String
        Dim tbl3() As String
        Dim ListeAcc As String
        Dim signe As String

        degré = Det_IndexDegré2(ind)
        ligne = Det_LigneTableGlobale(ind)
        '
        ' détermination du mode
        ' *********************
        Select Case ligne
            Case 0
                tbl1 = Split(Trim(ComboBox1.Text), " ")
                tonique = Trim(tbl1(0))

                signe = Det_ClefAngl(Trim(tonique))


                Mode_ = Trim(UCaseBémol(tonique)) + " Maj"
            Case 1
                tbl1 = Split(Trim(ComboBox2.Text), " ")
                tonique = Trim(tbl1(0))

                signe = Det_ClefAngl(Trim(tonique))


                Mode_ = Trim(UCaseBémol(tonique)) + " MinH"
            Case Else
                tbl1 = Split(Trim(ComboBox2.Text), " ")
                tonique = Trim(tbl1(0))

                signe = Det_ClefAngl(Trim(tonique))

                Mode_ = Trim(UCaseBémol(tonique)) + " MinM"
        End Select
        '
        ' Détermination de la liste des accords possibles dans la cellule courante
        ' ************************************************************************
        Tonacours = Trim(ComboBox1.Text) ' variable globale utilisée par NoteInterval2 (Maj_MenuTousAccords2 --> Mode --> NoteInterval2
        ListeAcc = Maj_MenuTousAccords2(degré, Mode_)
        tbl2 = Split(ListeAcc, "-")
        '
        For i = 0 To UBound(tbl2)
            tbl3 = Split(tbl2(i), " ")
            tonique = Trim(LCase(tbl3(0)))

            tbl2(i) = Trim(tonique)
            If UBound(tbl3) > 0 Then
                tbl2(i) = tbl2(i) + " " + tbl3(1)
            End If
        Next
        '
        ' Mise à jour dans le menu
        ' ************************
        '
        Accord11_1.Visible = False
        Accord11_1.Tag = ind
        '
        Accord12_1.Visible = False
        Accord12_1.Tag = ind
        '
        Accord13_1.Visible = False
        Accord13_1.Tag = ind
        '
        Accord14_1.Visible = False
        Accord14_1.Tag = ind
        '
        Accord15_1.Visible = False
        Accord15_1.Tag = ind
        '
        Accord16_1.Visible = False
        Accord16_1.Tag = ind
        '
        Accord17_1.Visible = False
        Accord17_1.Tag = ind
        '
        Accord18_1.Visible = False
        Accord18_1.Tag = ind
        '
        For i = 0 To UBound(tbl2)
            Select Case i
                Case 0
                    Accord11_1.Visible = True
                    Accord11_1.Text = tbl2(i)
                Case 1
                    Accord12_1.Visible = True
                    Accord12_1.Text = tbl2(i)
                Case 2
                    Accord13_1.Visible = True
                    Accord13_1.Text = tbl2(i)
                Case 3
                    Accord14_1.Visible = True
                    Accord14_1.Text = tbl2(i)
                Case 4
                    Accord15_1.Visible = True
                    Accord15_1.Text = tbl2(i)
                Case 5
                    Accord16_1.Visible = True
                    Accord16_1.Text = tbl2(i)
                Case 6
                    Accord17_1.Visible = True
                    Accord17_1.Text = tbl2(i)
                Case 7
                    Accord18_1.Visible = True
                    Accord18_1.Text = tbl2(i)
            End Select
        Next i
    End Sub


    Sub Maj_TousAccordsMnContextCAD(ind As Integer)
        Dim tonique As String
        Dim Mode_ As String = ""
        Dim tbl1() As String
        Dim tbl2() As String

        Dim ListeAcc, a As String
        Dim IndexDegré As Integer

        ' détermination du degré et du mode
        ' *********************************
        a = TabCadDegrés.Item(ind).Text

        If Cad_OrigineAccord = Modes.Cadence_Majeure Then
            tbl1 = Split(Trim(ComboBox1.Text), " ")
            tonique = tbl1(0)
            IndexDegré = Det_IndexDegré(a)
            Mode_ = Trim(tonique) + " Maj"
        Else
            Select Case Trim(ComboBox4.Text)
                Case "Hispanique", "Hispanic" ' cas d'une cadence mineure mixte (Hispanique)
                    Select Case Trim(a)
                        Case "VI", "V", "IV"
                            tbl1 = Split(Trim(ComboBox1.Text), " ")
                            tonique = Trim(tbl1(0))
                            IndexDegré = Det_IndexDegré(a)
                            Mode_ = Trim(tonique) + " Maj"
                        Case "III", "I"
                            tbl1 = Split(Trim(ComboBox2.Text), " ")
                            tonique = Trim(tbl1(0))
                            IndexDegré = Det_IndexDegréMin(a)
                            Mode_ = Trim(tonique) + " MinH"
                    End Select
                Case Else ' cas cadence mineure non mixte
                    tbl1 = Split(Trim(ComboBox2.Text), " ")
                    tonique = Trim(tbl1(0))
                    IndexDegré = Det_IndexDegréMin(a)
                    Mode_ = Trim(tonique) + " MinH"
            End Select
        End If
        '
        ' Détermination de la liste des accords possibles dans la cellule courante
        ' ************************************************************************
        ListeAcc = Maj_MenuTousAccords2(IndexDegré, Mode_)
        tbl2 = Split(ListeAcc, "-")
        '
        ' Mise à jour dans le menu
        ' ************************
        '
        Accord11_2.Visible = False
        Accord11_2.Tag = ind
        '
        Accord12_2.Visible = False
        Accord12_2.Tag = ind
        '
        Accord13_2.Visible = False
        Accord13_2.Tag = ind
        '
        Accord14_2.Visible = False
        Accord14_2.Tag = ind
        '
        Accord15_2.Visible = False
        Accord15_2.Tag = ind
        '
        Accord16_2.Visible = False
        Accord16_2.Tag = ind
        '
        Accord17_2.Visible = False
        Accord17_2.Tag = ind
        '
        Accord18_2.Visible = False
        Accord18_2.Tag = ind
        '
        For i = 0 To UBound(tbl2)
            Select Case i
                Case 0
                    Accord11_2.Visible = True
                    Accord11_2.Text = tbl2(i)
                Case 1
                    Accord12_2.Visible = True
                    Accord12_2.Text = tbl2(i)
                Case 2
                    Accord13_2.Visible = True
                    Accord13_2.Text = tbl2(i)
                Case 3
                    Accord14_2.Visible = True
                    Accord14_2.Text = tbl2(i)
                Case 4
                    Accord15_2.Visible = True
                    Accord15_2.Text = tbl2(i)
                Case 5
                    Accord16_2.Visible = True
                    Accord16_2.Text = tbl2(i)
                Case 6
                    Accord17_2.Visible = True
                    Accord17_2.Text = tbl2(i)
                Case 7
                    Accord18_2.Visible = True
                    Accord18_2.Text = tbl2(i)
            End Select
        Next i
    End Sub
    Sub Maj_TousAccordsMnContext3(m As Integer, t As Integer, ct As Integer)
        Dim degré As Integer
        Dim Mode_ As String
        Dim tbl1() As String
        Dim tbl2() As String
        Dim ListeAcc As String


        degré = TableEventH(m, t, ct).Degré           ' détermination du degré de l'accord
        Mode_ = TableEventH(m, t, ct).Mode
        tbl1 = Split(Mode_, " ")

        ListeAcc = Maj_MenuTousAccords2(degré, Mode_)
        tbl2 = Split(ListeAcc, "-")
        '
        ' Mise à jour dans le menu
        ' ************************
        '
        Accord11.Visible = False
        Accord12.Visible = False
        Accord13.Visible = False
        Accord14.Visible = False
        Accord15.Visible = False
        Accord16.Visible = False
        Accord17.Visible = False
        Accord18.Visible = False
        '
        For i = 0 To UBound(tbl2)
            Select Case i
                Case 0
                    Accord11.Visible = True
                    Accord11.Text = tbl2(i)

                Case 1
                    Accord12.Visible = True
                    Accord12.Text = tbl2(i)

                Case 2
                    Accord13.Visible = True
                    Accord13.Text = tbl2(i)

                Case 3
                    Accord14.Visible = True
                    Accord14.Text = tbl2(i)

                Case 4
                    Accord15.Visible = True
                    Accord15.Text = tbl2(i)

                Case 5
                    Accord16.Visible = True
                    Accord16.Text = tbl2(i)

                Case 6
                    Accord17.Visible = True
                    Accord17.Text = tbl2(i)

                Case 7
                    Accord18.Visible = True
                    Accord18.Text = tbl2(i)
            End Select
        Next i
    End Sub

    Function Det_EquivMinMaj(degré As Integer) ' cette procédure donne le degré d'un accord en mode mineur selon son degré en mode majeur
        Select Case degré
            Case 0
                Det_EquivMinMaj = 2
            Case 1
                Det_EquivMinMaj = 3
            Case 2
                Det_EquivMinMaj = 4
            Case 3
                Det_EquivMinMaj = 5
            Case 4
                Det_EquivMinMaj = 6
            Case 5
                Det_EquivMinMaj = 0
            Case 6
                Det_EquivMinMaj = 1
            Case Else
                Det_EquivMinMaj = 0
        End Select
    End Function

    Function Maj_MenuTousAccords2(degré As Integer, Mode_ As String) As String
        Dim tbl1() As String
        Dim tbl2() As String
        Dim tbl3() As String
        Dim tbl4() As String
        Dim tbl5() As String
        Dim tbl6() As String
        Dim tbl7() As String
        '
        Dim Accord As String
        Dim Tonique As String
        Dim Chiffrage As String
        Dim Enrich As String
        '
        Dim k As Integer
        Dim SuiteAcc As String

        k = -1

        tbl1 = Split(Mode_, " ") ' décomposition du mode de l'accord en tonalité et chiffrage
        '
        ' version 3notes de l'accord
        ' **************************
        '
        SuiteAcc = Mode(tbl1(0), tbl1(1), 3)
        tbl3 = Split(SuiteAcc, "-")
        k = k + 1
        ReDim Preserve tbl2(k)
        tbl2(k) = tbl3(degré) '' lecture de l'accord

        ' version 4notes7 de l'accord
        ' ***************************
        '
        SuiteAcc = Mode(tbl1(0), tbl1(1), 4)
        tbl3 = Split(SuiteAcc, "-")
        k = k + 1
        ReDim Preserve tbl2(k)
        tbl2(k) = tbl3(degré) ' ' lecture de l'accord

        ' version 4notes9 de l'accord
        ' ***************************
        '
        SuiteAcc = Mode(tbl1(0), tbl1(1), 5)
        tbl3 = Split(SuiteAcc, "-") ' lecture de la suite des accords 9e
        '
        If Trim(tbl3(degré)) <> "___" Then
            tbl4 = Split(Trim(tbl3(degré)), "(") ' tbl3(degré)= l'accord
            tbl6 = Split(Trim(tbl4(0)), " ")
            tbl7 = Split(Trim(tbl4(1)), ")")
            Tonique = Trim(tbl6(0))
            Chiffrage = Microsoft.VisualBasic.Left(Trim(tbl6(1)), 1)
            Enrich = Trim(tbl7(0))
            If Chiffrage = "m" Then
                Accord = Tonique + " " + Chiffrage + Enrich
            Else
                Accord = Tonique + " " + Enrich
            End If

            k = k + 1
            ReDim Preserve tbl2(k)
            tbl2(k) = Accord
            k = k + 1
            ReDim Preserve tbl2(k)
            tbl2(k) = Trim(tbl3(degré))
        End If
        '
        ' version 4notes11 de l'accord
        ' ****************************
        SuiteAcc = Mode(tbl1(0), tbl1(1), 6)
        tbl3 = Split(SuiteAcc, "-") ' lecture de l'accord
        If Trim(tbl3(degré)) <> "___" Then
            tbl5 = Split(Trim(tbl3(degré)), " ") ' tbl5(0) = tonique;tbl5(1) = chiffrage
            Select Case tbl5(1)
                Case "m11"
                    k = k + 1
                    ReDim Preserve tbl2(k)
                    tbl2(k) = Trim(tbl3(degré))
                    If (tbl1(1) = "Maj" And (degré = 1 Or degré = 2 Or degré = 5)) Or (tbl1(1) = "MinM" And degré = 1) Then
                        k = k + 1
                        ReDim Preserve tbl2(k)
                        tbl4 = Split(Trim(tbl3(degré)), "(") ' tbl3(degré)= l'accord
                        tbl6 = Split(Trim(tbl4(0)), " ")
                        tbl2(k) = tbl6(0) + " " + "m7(11)"
                    End If
                Case "11"
                    tbl4 = Split(tbl3(degré), " ")
                    Tonique = tbl4(0)
                    Accord = Tonique + " " + "sus4"
                    k = k + 1
                    ReDim Preserve tbl2(k)
                    tbl2(k) = Trim(Accord)
                    '
                    k = k + 1
                    ReDim Preserve tbl2(k)
                    tbl2(k) = Trim(tbl3(degré))
                Case "7M(11.0#)", "M7(11#)", "7(11)"
                    tbl4 = Split(Trim(tbl3(degré)), "(") ' dans tbl4(1) --> soit "11)" soit "11#)"
                    Select Case tbl4(1)
                        Case "11#)"
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 11#"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " M7(11#)"

                        Case "11)"
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 11"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " sus4"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 7sus4"
                            '
                            k = k + 1
                            ReDim Preserve tbl2(k)
                            tbl2(k) = Trim(tbl5(0)) + " 7(11)"
                    End Select
            End Select
        End If
        '
        Maj_MenuTousAccords2 = Join(tbl2, "-")
    End Function

    Function Det_IndexDansGrid3(col As Integer) As String
        Dim i, j As Integer
        Dim m, t, ct As Integer
        Dim a As String
        Dim mesure As String = "0"
        Dim temps As String = "0"
        Dim ColMesure As Integer
        Dim contretemps As Integer = 0
        Dim résultat As String = ""

        ' détermination de la mesure
        ' **************************
        '
        j = col 'Grid3.ActiveCell.Col
        '
        For i = j To 0 Step -1
            a = Grid3.Cell(1, i).Text
            If Trim(a) <> "" Then
                mesure = Trim(a)
                ColMesure = i
                Exit For
            End If
        Next i
        '
        ' détermination des index t et ct
        ' *******************************
        contretemps = 1
        For i = j To 0 Step -1
            a = Grid3.Cell(2, i).Text
            If Trim(a) <> "" Then
                temps = Trim(a)
                résultat = Trim(mesure) + "." + Trim(temps) + "." + Trim(Str(contretemps + 1))
                Exit For
            End If
            contretemps = contretemps + 1 ' détermination du contretemps
        Next i
        '
        If Trim(mesure) <> "0" Then
            'Grid2.Cell(1, 0).Text = Trim(résultat)
        End If
        '
        m = Val(mesure)
        t = Val(temps) '-1
        ct = Val(contretemps) '-1
        '
        Det_IndexDansGrid3 = Trim(Str(mesure)) + " " + Trim(Str(t)) + " " + Trim(Str(ct))
    End Function
    Function ChaineAccord(m As Integer) As String
        Dim a As String
        '
        Dim t, ct, nbAccords As Integer

        a = ""
        nbAccords = 0
        For t = 0 To 5 ' t temps
            For ct = 0 To 4 ' ct contre temps 
                If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                    nbAccords = nbAccords + 1
                    If Trim(a) = "" Then
                        a = Trim(Trim(Trim(TableEventH(m, t, ct).Accord)))
                    Else
                        a = a + " / " + (Trim(TableEventH(m, t, ct).Accord))
                    End If
                End If
            Next ct
        Next t
        '
        If nbAccords = 1 Then
            Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
        Else
            Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.LeftCenter
        End If
        '
        ChaineAccord = Trim(a)
    End Function
    Function Det_NbDivisionMesure() As String
        If Dénominateur = 4 Then
            Det_NbDivisionMesure = Numérateur * 2
        Else '(toujours 8)
            Det_NbDivisionMesure = Numérateur
        End If
    End Function



    Sub Maj_TabTons(Typ As Integer) ' typ est le type d'accord : 3 ntes, 4 notes avec 7, 9e, 11e

        Dim i As Integer
        ' ton majeur
        ' **********
        'tbl1 = Split(Mode("C", "Maj", 3), "-")
        For i = 0 To 6
            TabTons.Item(i).Text = TableGlobalAcc(Typ, 0, i) 'tbl1(i) ' 
        Next i
        ' tons mineurs Harmonique
        ' ***********************
        'tbl1 = Split(Mode("A", "MinH", 3), "-")
        For i = 7 To 13
            TabTons.Item(i).Text = TableGlobalAcc(Typ, 1, i - 7) 'tbl1(i - 7) ' 
        Next i
        '
        ' tons mineurs Mélodiques
        ' ***********************
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 14 To 20
            TabTons.Item(i).Text = TableGlobalAcc(Typ, 2, i - 14) 'tbl1(i - 14)
        Next i
        '
    End Sub
    Sub Maj_TabTonsVoisins(Typ As Integer) ' typ est le type d'accord : 0=3 ntes, 1=4 notes avec 7, 2=9e, 3=11e

        Dim i As Integer
        ' TONALITES MAJEURES
        ' ******************
        ' I Majeur
        ' **********
        'tbl1 = Split(Mode("C", "Maj", 3), "-")
        For i = 0 To 6
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 0, i) 'tbl1(i)
        Next i
        ' IV Majeur
        ' *********
        'tbl1 = Split(Mode("A", "MinH", 3), "-")
        For i = 7 To 13
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 1, i - 7) 'tbl1(i - 7)
        Next i
        '
        ' V Majeur
        ' ********
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 14 To 20
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 2, i - 14) 'tbl1(i - 14)
        Next i
        '
        '
        ' VIb Majeur
        ' **********
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 21 To 27
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 3, i - 21) 'tbl1(i - 14)
        Next i
        '
        ' II Majeur
        ' **********
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 28 To 34
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 4, i - 28) 'tbl1(i - 14)
        Next i

        ' TONALITES MINEURS
        ' *****************
        ' I Mineur
        ' **********
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 35 To 41
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 5, i - 35) 'tbl1(i - 14)
        Next i
        ' III Mineur
        ' **********
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 42 To 48
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 6, i - 42) 'tbl1(i - 14)
        Next i
        ' VII Mineur
        ' **********
        'tbl1 = Split(Mode("A", "MinM", 3), "-")
        For i = 49 To 55
            TabTonsVoisins.Item(i).Text = TableGlobalAccVoisin(Typ, 7, i - 49) 'tbl1(i - 14)
        Next i
    End Sub

    Public Sub Maj_TableGlobalAcc(tona As String, tonaMin As String)
        Dim tbl() As String
        Dim i As Integer
        Dim j As Integer

        ' Maj
        For i = 3 To 6
            tbl = Split(Mode2(Trim(tona), "Maj", i, False), "-")
            For j = 0 To 6
                TableGlobalAcc(i - 3, 0, j) = tbl(j)
            Next j
        Next i
        ' MinH
        For i = 3 To 6
            tbl = Split(Mode2(Trim(tonaMin), "MinH", i, False), "-")
            For j = 0 To 6
                TableGlobalAcc(i - 3, 1, j) = tbl(j)
            Next j
        Next i
        ' MinM
        For i = 3 To 6
            tbl = Split(Mode2(Trim(tonaMin), "MinM", i, False), "-")
            For j = 0 To 6
                TableGlobalAcc(i - 3, 2, j) = tbl(j)
            Next j
        Next i

    End Sub
    Public Sub Maj_TableGlobalAccSubsti(tona As String, tonaMin As String, tonaMinN As String)
        Dim tbl() As String
        Dim i As Integer
        Dim j As Integer
        ' TableGlobalAccSubsti(i,j,k)
        ' ***************************
        ' i=type d'accord 0 = 3note, 1=4notes avec 7e,2=4 notes avec 9e,3=4 notes avec 11e
        ' j=type de gamme 0=Majeure, 1=Minh et 2 = MInM
        ' k = liste de 7 accords pour chaque couple (i,j)
        '
        ' Maj
        For i = 3 To 6
            tbl = Split(Mode2(Trim(tona), "Maj", i, False), "-")
            For j = 0 To 6
                TableGlobalAccSubsti(i - 3, 0, j) = tbl(j)
            Next j
        Next i
        ' MinH
        For i = 3 To 6
            tbl = Split(Mode2(Trim(tonaMin), "MinH", i, False), "-")
            For j = 0 To 6
                TableGlobalAccSubsti(i - 3, 1, j) = tbl(j)
            Next j
        Next i
        ' MinM
        For i = 3 To 6
            tbl = Split(Mode2(Trim(tonaMin), "MinM", i, False), "-")
            For j = 0 To 6
                TableGlobalAccSubsti(i - 3, 2, j) = tbl(j)
            Next j
        Next i
        ' MinN
        For i = 3 To 4
            tbl = Split(Mode2(Trim(tonaMinN), "MinN", i, False), "-")
            For j = 0 To 6
                TableGlobalAccSubsti(i - 3, 3, j) = tbl(j)
            Next j
        Next i
    End Sub
    Public Sub Maj_TableGlobalAccVoisin(tona As String, tonaMin As String) ' les paramètres tona et tonamin sont reçus 
        Dim Mode1Voisin As String = Trim(tona) ' 
        Dim Mode2Voisin As String ' 
        Dim Mode3Voisin As String ' 
        Dim Mode4Voisin As String  ' 
        Dim Mode5Voisin As String '
        Dim Mode6Voisin As String = Trim(tonaMin) '
        Dim Mode7Voisin As String '
        Dim Mode8Voisin As String '
        Dim i, j As Integer


        ' Détermination des Modes 
        ' ***********************
        ' Mode Voisin I majeur (Do Majeur)
        ' ********************************
        Mode1Voisin = Det_TonStandardMaj(Trim(Mode1Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode1Voisin), "Maj", i, True), "-") ' Mode1Voisin est mis à jour dans sa déclaration
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 0, j) = tbl(j)
            Next j
        Next i
        ' Mode Voisin IV majeur (Fa Majeur)
        ' *********************************
        Mode2Voisin = NoteInterval(LCaseBémol(tona), "4")
        Mode2Voisin = UCaseBémol(Mode2Voisin)
        Mode2Voisin = Det_TonStandardMaj(Trim(Mode2Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode2Voisin), "Maj", i, True), "-")
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 1, j) = tbl(j)
            Next j
        Next i
        ' Mode voisin V majeur (Sol Majeur)
        ' *********************************
        Mode3Voisin = NoteInterval(LCaseBémol(tona), "5")
        Mode3Voisin = UCaseBémol(Mode3Voisin)
        Mode3Voisin = Det_TonStandardMaj(Trim(Mode3Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode3Voisin), "Maj", i, True), "-")
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 2, j) = tbl(j)
            Next j
        Next i
        '
        ' Mode voisin VIIb majeur (Sib Majeur)
        ' ************************************
        Mode4Voisin = NoteInterval(LCaseBémol(tona), "7")
        Mode4Voisin = UCaseBémol(Mode4Voisin)
        Mode4Voisin = Det_TonStandardMaj(Trim(Mode4Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode4Voisin), "Maj", i, True), "-")
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 3, j) = tbl(j)
            Next j
        Next i

        ' Mode voisin II majeur (Ré Majeur)
        ' *********************************
        Mode5Voisin = NoteInterval(LCaseBémol(tona), "2")
        Mode5Voisin = UCaseBémol(Mode5Voisin)
        Mode8Voisin = Det_TonStandardMaj(Trim(Mode5Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode5Voisin), "Maj", i, True), "-")
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 4, j) = tbl(j)
            Next j
        Next i


        ' Mode Voisin I mineur (La Mineur)
        ' ********************************
        Mode6Voisin = Det_TonStandardMin(Trim(Mode6Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode6Voisin), "MinH", i, True), "-") ' Mode1Voisin est mis à jour dans sa déclaration
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 5, j) = tbl(j)
            Next j
        Next i
        '
        ' Mode voisin IV mineur (Mi mineur)
        ' *********************************
        Mode7Voisin = NoteInterval(LCaseBémol(tonaMin), "5")
        Mode7Voisin = UCaseBémol(Mode7Voisin)
        Mode7Voisin = Det_TonStandardMin(Trim(Mode7Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode7Voisin), "MinH", i, True), "-")
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 6, j) = tbl(j)
            Next j
        Next i
        '
        ' Mode voisin V mineur (Si mineur)
        ' *******************************
        Mode8Voisin = NoteInterval(LCaseBémol(tonaMin), "2")
        Mode8Voisin = UCaseBémol(Mode8Voisin)
        Mode8Voisin = Det_TonStandardMin(Trim(Mode8Voisin))
        For i = 3 To 6
            tbl = Split(Mode2(Trim(Mode8Voisin), "MinH", i, True), "-")
            For j = 0 To 6
                TableGlobalAccVoisin(i - 3, 7, j) = tbl(j)
            Next j
        Next i
        ' Mise à jour de TableGlobalAccVoisin (4 tonalité à mettre à jour)
        Refresh()
    End Sub
    '
    Public Function Det_TonStandardMaj(Ton As String) As String
        Dim a As String
        Select Case Ton
            Case "Db"
                a = "C#"
            Case "Gb"
                a = "F#"
            Case "A#"
                a = "Bb"
            Case "D#"
                a = "Eb"
            Case "G#"
                a = "Ab"
            Case Else
                a = Trim(Ton)
        End Select
        Det_TonStandardMaj = a
    End Function
    Public Function Det_TonStandardMin(Ton As String)
        Dim a As String
        Select Case Ton
            Case "Bb"
                a = "A#"
            Case "Eb"
                a = "D#"
            Case "Ab"
                a = "G#"
            Case "Db"
                a = "C#"
            Case "Gb"
                a = "F#"
            Case Else
                a = Trim(Ton)
        End Select
        Det_TonStandardMin = a
    End Function

    Public Sub RAZ_AccTransit()
        Dim i As Integer
        '
        For i = 0 To 34
            TabTonsVoisinsMarq.Item(i).Visible = False
        Next i
    End Sub
    Public Function Mode2(Tonique As String, Type_Mode As String, Typ As Integer, Voisin As Boolean) As String 'TYpe_Mode = Maj, MinH, MinM Typ= 3 -> 3note,Type=4 -> Accord7,Typ=5->Accord9,Typ=6 -> Accord11
        Dim ton As String
        Dim Sauv_Clef As String
        Dim tbl() As String
        Dim a As String
        Dim toni As String

        ton = LCase(Tonique)
        Mode2 = ""
        Sauv_Clef = Clef
        '
        If Voisin = False Then
            tbl = Split(Trim(ComboBox1.Text)) ' on considère ici la tonalité pour déterminer la clef
            a = Trim(tbl(0))
        Else
            a = Trim(Tonique)
        End If
        '

        '
        ' OngletCours = 0   Onglet Progression
        ' OngletCours = 1   Onglet Tonalité
        ' OngletCours = 7   Onglet Modulation
        ' OngletCours = 16  Onglet Substitution
        '
        If OngletCours = 0 Or OngletCours = 1 Then
            tbl = Trim(ComboBox1.Text).Split()
            Clef = Det_Clef(Trim(tbl(0)))
        Else
            If Type_Mode <> "Maj" Then
                toni = Det_RelativeMajeure(Trim(Tonique) + " " + Trim(Type_Mode)) ' on passe le mode en entier
                tbl = toni.Split
                toni = Trim(tbl(0))
            Else
                toni = Tonique
            End If
            Clef = Det_Clef(Trim(toni))
            '
            If Clef = "b" Then
                ton = Trad_DiesBemNote(ton)
            Else
                ton = Trad_BemDies(ton)
            End If
        End If
        '
        Maj_TabNotes(Trim(Clef))

        Select Case Type_Mode
            Case "Maj"
                Select Case Typ
                    Case 3
                        Mode2 =
                            Tonique + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " mb5"
                    Case 4 ' 7

                        Mode2 =
                            Tonique + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " m7b5"
                    Case 5 ' 9

                        Mode2 =
                            Tonique + " M7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7(9)" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " M7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m7(9)" + "-" _
                            + "___" + "-"
                    Case 6 ' 11

                        Mode2 =
                            Tonique + " 11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3", Clef)) + " m11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " M7(11#)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(11)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m11" + "-" _
                            + "___"
                End Select
            Case "MinH"
                Select Case Typ
                    Case 3
                        Mode2 =
                            Tonique + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " mb5" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " 5#" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " mb5"
                    Case 4 ' 7
                        Mode2 =
                            Tonique + " mM7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7b5" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " M75#" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " 7Dim"
                    Case 5 ' 9

                        Mode2 =
                            "___" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(b9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " 7(9#)" + "-" _
                            + "___"
                    Case 6 '11
                        Mode2 =
                              Tonique + " m11" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(11)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " M7(11#)" + "-" _
                            + "___"

                End Select
            Case "MinM"
                Select Case Typ
                    Case 3
                        Mode2 =
                        Tonique + " m" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " 5#" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "4", Clef)) + "-" _
                        + UCaseBémol(NoteInterval3(ton, "5", Clef)) + "-" _
                        + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " mb5" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " mb5"

                    Case 4 ' 7
                        Mode2 =
                        Tonique + " mM7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " M75#" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " 7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m7b5" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " m7b5"
                    Case 5 '9

                        Mode2 =
                            "___" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " 7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(9)" + "-" _
                            + "___" + "-" _
                            + "___"
                    Case 6 '11
                        Mode2 =
                            Tonique + " m11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m11" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(11)" + "-" _
                            + "___" + "-" _
                            + "___"
                End Select
            Case "MinN"
                Sauv_Clef = Clef
                a = Det_RelativeMajeure(Tonique + " MinH")
                Clef = Det_Clef(Trim(a))
                Maj_TabNotes(Trim(Clef))
                Select Case Typ
                    Case 3
                        Mode2 =
                            Tonique + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " mb5" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "7", Clef)) + ""
                    Case 4 ' 7
                        Mode2 =
                            Tonique + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7b5" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "7", Clef)) + " 7"
                End Select
        End Select
        Clef = Sauv_Clef
    End Function



    Public Function Mode3(Tonique As String, Type_Mode As String, Typ As Integer, Voisin As Boolean) As String 'TYpe_Mode = Maj, MinH, MinM Typ= 3 -> 3note,Type=4 -> Accord7,Typ=5->Accord9,Typ=6 -> Accord11
        Dim ton As String
        Dim toni As String
        Dim tbl() As String
        Dim Sauv_Clef As String = Clef


        Mode3 = ""

        ' Réglage des # et b pour l'exécution de Mode3
        ' ********************************************
        'Tonique = Det_ToniqueClef(Trim(Tonique), Type_Mode) ' Tonique en b sin D#, F,G#,A#
        'If Tonique = "F" Or Tonique = "Eb" Or Tonique = "Ab" Or Tonique = "Bb" Then ' tonalités dont les accords doivent être exprimés en b
        'Clef = "b"
        'End If


        ton = LCase(Tonique)
        Maj_TabNotes(Trim(Clef))

        ' OngletCours = 0   Onglet Progression
        ' OngletCours = 1   Onglet Tonalité
        ' OngletCours = 7   Onglet Modulation
        ' OngletCours = 16  Onglet Substitution
        '
        If OngletCours = 0 Or OngletCours = 1 Then
            tbl = Trim(ComboBox1.Text).Split()
            Clef = Det_Clef(Trim(tbl(0)))
        Else
            If Type_Mode <> "Maj" Then
                toni = Det_RelativeMajeure(Trim(Tonique) + " " + Trim(Type_Mode)) ' on passe le mode en entier
                tbl = toni.Split
                toni = Trim(tbl(0))
            Else
                toni = Tonique
            End If
            Clef = Det_Clef(Trim(toni))
            '
            If Clef = "b" Then
                ton = Trad_DiesBemNote(ton)
            Else
                ton = Trad_BemDies(ton)
            End If
        End If
        '
        Maj_TabNotes(Trim(Clef))
        '

        Select Case Type_Mode
            Case "Maj"
                Select Case Typ
                    Case 3
                        Mode3 =
                            Tonique + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " mb5"
                    Case 4 ' 7

                        Mode3 =
                            Tonique + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " m7b5"
                    Case 5 ' 9

                        Mode3 =
                            Tonique + " M7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7(9)" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " M7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m7(9)" + "-" _
                            + "___" + "-"
                    Case 6 ' 11

                        Mode3 =
                            Tonique + " 11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3", Clef)) + " m11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " M7(11#)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(11)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m11" + "-" _
                            + "___"
                End Select
            Case "MinH"
                Select Case Typ
                    Case 3
                        Mode3 =
                            Tonique + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " mb5" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " 5#" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " mb5"
                    Case 4 ' 7
                        Mode3 =
                            Tonique + " mM7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7b5" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " M75#" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " M7" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " 7Dim"
                    Case 5 ' 9

                        Mode3 =
                            "___" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " m7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(b9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " 7(9#)" + "-" _
                            + "___"
                    Case 6 '11
                        Mode3 =
                              Tonique + " m11" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(11)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5#", Clef)) + " M7(11#)" + "-" _
                            + "___"

                End Select
            Case "MinM"
                Select Case Typ
                    Case 3
                        Mode3 =
                        Tonique + " m" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " 5#" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "4", Clef)) + "-" _
                        + UCaseBémol(NoteInterval3(ton, "5", Clef)) + "-" _
                        + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " mb5" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " mb5"

                    Case 4 ' 7
                        Mode3 =
                        Tonique + " mM7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "3m", Clef)) + " M75#" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " 7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "6", Clef)) + " m7b5" + "-" _
                        + UCaseBémol(NoteInterval3(ton, "M7", Clef)) + " m7b5"
                    Case 5 '9

                        Mode3 =
                            "___" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "4", Clef)) + " 7(9)" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(9)" + "-" _
                            + "___" + "-" _
                            + "___"
                    Case 6 '11
                        Mode3 =
                            Tonique + " m11" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "9", Clef)) + " m11" + "-" _
                            + "___" + "-" _
                            + "___" + "-" _
                            + UCaseBémol(NoteInterval3(ton, "5", Clef)) + " 7(11)" + "-" _
                            + "___" + "-" _
                            + "___"
                End Select
        End Select
        Clef = Sauv_Clef
    End Function
    Public Function NoteInterval3(Tonique As String, Interval As String, clef As String) As String
        ' La présente fonction NoteInterval3 est très proche de NoteInterval 
        ' qui se trouve dans le module Harmonie. La différence entre ces deux fonction est la suivante :
        '   1 - NoteInterval3 prend la valeur de Clef dans la tonalite courante (Combobox1.text)
        '   2 - NoteInterval prend la valeur de Clef dans la tonique d'un accord, d'une gamme ou d'un mode
        ' En conclusion, si une modification est à faire dans l'un de ces deux fonctions, elle sera 
        ' sans doute à faire dans l'autre fonction.
        Dim IndexTonique As Integer
        '
        Maj_TabNotes(Trim(clef))
        '
        NoteInterval3 = ""
        IndexTonique = TrouverNoteDansTabNotes(LCase(Tonique))
        '
        Select Case Interval
            Case "b2", "b9"
                NoteInterval3 = TabNotes(IndexTonique + 1)
            Case "2", "9"
                NoteInterval3 = TabNotes(IndexTonique + 2)
            Case "9#", "3m"
                NoteInterval3 = TabNotes(IndexTonique + 3)
            Case "3"
                NoteInterval3 = TabNotes(IndexTonique + 4)
            Case "4", "11"
                NoteInterval3 = TabNotes(IndexTonique + 5)
            Case "b5", "4#", "11#"
                NoteInterval3 = TabNotes(IndexTonique + 6)
            Case "5"
                NoteInterval3 = TabNotes(IndexTonique + 7)
            Case "5#", "6m", "13b"
                NoteInterval3 = TabNotes(IndexTonique + 8)
            Case "6", "13"
                NoteInterval3 = TabNotes(IndexTonique + 9)
            Case "7"
                NoteInterval3 = TabNotes(IndexTonique + 10)
            Case "7M", "M7"
                NoteInterval3 = TabNotes(IndexTonique + 11)
        End Select
        '
    End Function
    Public Function Det_NotesAccord3(Accord As String, Clef As String) As String
        ' La présente fonction Det_NotesAccord3 est très proche d'une autre fonction Det_NotesAccord 
        ' La différence entre ces deux fonctions est la suivante :
        '   1 - Det_NotesAccord3 prend la valeur de Clef dans ses paramètres d'entrée
        '   2 - Det_NotesAccord prend la valeur de Clef dans la fonction NoteInterval qu'elle appelle
        ' En conclusion, si une modification est à faire dans l'un de ces deux fonctions Det_NotesAccord3 ou Det_NotesAccord, elle sera 
        ' sans doute à faire dans l'autre fonction.
        Dim Tonique As String
        Dim Chiffrage As String
        '
        Tonique = LCase(Det_Tonique(Accord))
        Chiffrage = Det_Chiffrage(Accord)
        '
        Det_NotesAccord3 = ""
        Select Case Trim(Chiffrage)
            Case "Maj"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef))
            Case "m"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef))
            Case "mb5"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "b5", Clef))
            Case "7M", "M7"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "M7", Clef))
            Case "7"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef))
            Case "m7"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef))
            Case "m7b5"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "b5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef))
            Case "5#"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5#", Clef))
            Case "m7M", "mM7"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "M7", Clef))
            Case "7M5#", "M75#"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5#", Clef) + "-" + NoteInterval3(Tonique, "M7", Clef))
            Case "7Dim", "7dim"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "b5", Clef) + "-" + NoteInterval3(Tonique, "6", Clef))
            Case "7M(9)", "M7(9)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "M7", Clef) + "-" + NoteInterval3(Tonique, "9", Clef))
            Case "m7(9)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "9", Clef))
            Case "m7(b9)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "b9", Clef))
            Case "m7b5(b9)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "b5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "b9", Clef))
            Case "7(9)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "9", Clef))
            Case "7(b9)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "b9", Clef))
            Case "7(9#)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "9#", Clef))
            Case "b9"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "b9", Clef))
            Case "9#"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "9#", Clef))
            Case "m9"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "9", Clef))
            Case "9"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "9", Clef))
            Case "7M(11#)", "M7(11#)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "M7", Clef) + "-" + NoteInterval3(Tonique, "11#", Clef))
            Case "7(11)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "11", Clef))
            Case "11#"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "11#", Clef))
            Case "11"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "11", Clef))
            Case "7Sus4"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "4", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef))
            Case "sus4"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "4", Clef) + "-" + NoteInterval3(Tonique, "5", Clef))
            Case "m11"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "11", Clef))
            Case "m7(11)"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3m", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "7", Clef) + "-" + NoteInterval3(Tonique, "11", Clef))
            Case "11"
                Det_NotesAccord3 = Trim(Tonique + "-" + NoteInterval3(Tonique, "3", Clef) + "-" + NoteInterval3(Tonique, "5", Clef) + "-" + NoteInterval3(Tonique, "11", Clef))
        End Select
    End Function






    Public Sub Maj_TableCoursAccInit()
        Dim i As Integer
        Dim j As Integer
        '
        For i = 0 To 2
            For j = 0 To 6
                TableCoursAcc(i, j).TyAcc = "3 Notes"
                TableCoursAcc(i, j).Accord = TableGlobalAcc(0, i, j)
                TableCoursAcc(i, j).Octave = "0"
                '
            Next
        Next
        '
    End Sub
    Public Sub Maj_TableCoursVoisinsAccInit()
        Dim i As Integer
        Dim j As Integer
        '
        For i = 0 To 7
            For j = 0 To 6
                TableCoursAccVoisins(i, j).TyAcc = "3 Notes"
                TableCoursAccVoisins(i, j).Accord = TableGlobalAccVoisin(0, i, j)
                TableCoursAccVoisins(i, j).Octave = "0"
                '
            Next
        Next
        '
    End Sub

    Public Function Det_TonaCours() As String
        Dim tbl() As String
        '
        tbl = Split(Trim(ComboBox1.Text))
        Det_TonaCours = Trim(tbl(0))
        '
    End Function
    '
    Public Function Det_TonaCours2() As String
        Dim tbl() As String
        Dim a As String
        '
        tbl = Split(Trim(ComboBox1.Text))
        'clef = Det_ClefLat(Trim(tbl(0)))
        a = Trim(tbl(0))
        '
        Det_TonaCours2 = Trim(a)
        'Det_TonaCours2 = TradNoteEnMaj(a)
    End Function
    Public Function Det_TonaCours3() As String
        Dim tbl() As String
        '
        tbl = Split(Trim(ComboBox2.Text))
        Det_TonaCours3 = Trim(tbl(0))
        '
    End Function
    'Public Function Det_TonaMinCours() As String
    '    Dim tbl() As String
    '    '
    '    tbl = Split(Trim(ComboBox21.Text))
    '   Det_TonaMinCours = Trim(tbl(0))
    '   '
    'End Function
    Public Function Det_TonaMinCours2() As String
        Dim tbl() As String
        Dim a As String

        '
        tbl = Split(Trim(ComboBox2.Text))
        a = Trim(tbl(0))
        Det_TonaMinCours2 = Trim(a)

        '
    End Function
    Public Function Det_TonaMinCours3(tonaMaj As String) As String
        Dim tbl() As String
        Dim i As Integer
        Dim TonaMin As String

        '
        Dim TonaMajEn As New ArrayList
        Dim TonaMajFr As New ArrayList
        Dim TonaMinEn As New ArrayList
        Dim TonaMinFr As New ArrayList

        TonaMajFr.Add("Do# Majeur")
        TonaMajFr.Add("Fa# Majeur")
        TonaMajFr.Add("Si Majeur")
        TonaMajFr.Add("Mi Majeur")
        TonaMajFr.Add("La Majeur")
        TonaMajFr.Add("Ré Majeur")
        TonaMajFr.Add("Sol Majeur")
        TonaMajFr.Add("Do Majeur")
        TonaMajFr.Add("Fa Majeur")
        TonaMajFr.Add("Sib Majeur")
        TonaMajFr.Add("Mib Majeur")
        TonaMajFr.Add("Lab Majeur")
        '
        TonaMinFr.Add("La# Mineur")
        TonaMinFr.Add("Ré# Mineur")
        TonaMinFr.Add("Sol# Mineur")
        TonaMinFr.Add("Do# Mineur")
        TonaMinFr.Add("Fa# Mineur")
        TonaMinFr.Add("Si Mineur")
        TonaMinFr.Add("Mi Mineur")
        TonaMinFr.Add("La Mineur")
        TonaMinFr.Add("Ré Mineur")
        TonaMinFr.Add("Sol Mineur")
        TonaMinFr.Add("Do Mineur")
        TonaMinFr.Add("Fa Mineur")


        TonaMajEn.Add("C# Major")
        TonaMajEn.Add("F# Major")
        TonaMajEn.Add("B Major")
        TonaMajEn.Add("E Major")
        TonaMajEn.Add("A Major")
        TonaMajEn.Add("D Major")
        TonaMajEn.Add("G Major")
        TonaMajEn.Add("C Major")
        TonaMajEn.Add("F Major")
        TonaMajEn.Add("Bb Major")
        TonaMajEn.Add("Eb Major")
        TonaMajEn.Add("Ab Major")


        TonaMinEn.Add("A# Minor")
        TonaMinEn.Add("D# Minor")
        TonaMinEn.Add("G# Minor")
        TonaMinEn.Add("C# Minor")
        TonaMinEn.Add("F# Minor")
        TonaMinEn.Add("B Minor")
        TonaMinEn.Add("E Minor")
        TonaMinEn.Add("A Minor")
        TonaMinEn.Add("D Minor")
        TonaMinEn.Add("G Minor")
        TonaMinEn.Add("C Minor")
        TonaMinEn.Add("F Minor")


        i = TonaMajEn.IndexOf(Trim(tonaMaj))
            TonaMin = TonaMinEn(i)
            tbl = Split(TonaMin, " ")
            Det_TonaMinCours3 = tbl(0)

        '
    End Function
    Public Function Det_IndexLigneColonne(Ligne As Integer, Colonne As Integer, NbCols As Integer) As Integer
        Det_IndexLigneColonne = (Ligne * NbCols) + Colonne
    End Function
    Public Function Det_IndexDegréMouv(Degré As String) As Integer '
        Dim i As Integer
        Det_IndexDegréMouv = -1
        For i = 0 To 6
            If Trim(TabTonsDegrés.Item(i).Text) = Degré Then
                Det_IndexDegréMouv = i
            End If
        Next

    End Function
    Public Function Det_IndexDegré(Degré As String) As Integer '

        Select Case Trim(Degré)
            Case "I"
                Det_IndexDegré = 0
            Case "II"
                Det_IndexDegré = 1
            Case "III"
                Det_IndexDegré = 2
            Case "IV"
                Det_IndexDegré = 3
            Case "V"
                Det_IndexDegré = 4
            Case "VI"
                Det_IndexDegré = 5
            Case "VII"
                Det_IndexDegré = 6
            Case Else
                Det_IndexDegré = -1
        End Select

    End Function
    Public Function Det_DegréRomain(ligne As Integer, acc As String) ' Fonction réservée à l'onglet modulation
        Dim j As Integer
        Dim a As String = ""
        Dim b As String
        For j = 1 To Grid5.Cols - 1
            b = Trim(Grid5.Cell(ligne, j).Text)
            If Trim(acc) = Trim(Grid5.Cell(ligne, j).Text) Then
                Exit For
            End If
        Next j
        Select Case j - 1' 
            Case 0
                a = "I"
            Case 1
                a = "II"
            Case 2
                a = "III"
            Case 3
                a = "IV"
            Case 4
                a = "V"
            Case 5
                a = "VI"
            Case 6
                a = "VII"
        End Select
        Return a
    End Function
    Public Function Det_DegréDécimal(ligne As Integer, acc As String) ' Ind va de 0 à 6
        Dim j As Integer = 1
        Dim a As String = ""
        Dim b As String
        For j = 1 To Grid5.Cols - 1
            b = Trim(Grid5.Cell(ligne, j).Text)
            If Trim(acc) = Trim(Grid5.Cell(ligne, j).Text) Then
                Exit For
            End If
        Next
        Return j - 1
    End Function

    Public Function Det_DegréRomain2(ind As Integer) ' Ind va de 0 à 6
        Dim a As String = ""
        Select Case ind
            Case 0
                a = "I"
            Case 1
                a = "II"
            Case 2
                a = "III"
            Case 3
                a = "IV"
            Case 4
                a = "V"
            Case 5
                a = "VI"
            Case 6
                a = "VII"
        End Select
        Return a
    End Function

    Public Function Det_IndexDegréMin(Degré As String) As Integer '
        'Dim i As Integer
        'For i = 0 To 6
        ' If Trim(TabTonsDegrés.Item(i).Text) = Degré Then
        ' Det_IndexDegré = i
        ' End If
        ' Next
        Select Case Trim(Degré)
            Case "I"
                Det_IndexDegréMin = 2
            Case "II"
                Det_IndexDegréMin = 3
            Case "III"
                Det_IndexDegréMin = 4 ' E est II en majeur et V en mineur
            Case "IV"
                Det_IndexDegréMin = 5
            Case "V"
                Det_IndexDegréMin = 6
            Case "VI"
                Det_IndexDegréMin = 0
            Case "VII"
                Det_IndexDegréMin = 1
            Case Else
                Det_IndexDegréMin = -1
        End Select

    End Function

    '   Det_IndexDegré2 : détermine le n° de colonne d'un Degré dans TableCoursAcc
    Public Function Det_IndexDegré2(ind As Integer) As Integer ' l Table
        Dim c As Integer
        Dim degré As String


        ' détermination de la colonne
        Select Case ind
            Case 0, 7, 14, 21, 28, 35 ' colonne 1
                c = 0
            Case 1, 8, 15, 22, 29, 36 ' colonne 2
                c = 1
            Case 2, 9, 16, 23, 30, 37 ' colonne 3
                c = 2
            Case 3, 10, 17, 24, 31, 38 ' colonne 4
                c = 3
            Case 4, 11, 18, 25, 32, 39 ' colonne 5
                c = 4
            Case 5, 12, 19, 26, 33, 40 ' colonne 6
                c = 5
            Case 6, 13, 20, 27, 34, 41 ' colonne 7
                c = 6

        End Select
        '
        'Det_IndexDegré2 = c
        '
        degré = TabTonsDegrés.Item(c).Text ' attention on est dans TabTons mais ça marche aussi pour pour TabTonsVoisins
        Det_IndexDegré2 = Det_IndexDegré(degré)
    End Function
    Private Function Det_LigneTableGlobale(Index As Integer) As Integer
        Select Case Index
            Case 0, 1, 2, 3, 4, 5, 6
                Det_LigneTableGlobale = 0
            Case 7, 8, 9, 10, 11, 12, 13
                Det_LigneTableGlobale = 1
            Case 14, 15, 16, 17, 18, 19, 20
                Det_LigneTableGlobale = 2
            Case 21, 22, 23, 24, 25, 26, 27
                Det_LigneTableGlobale = 3
            Case 28, 29, 30, 31, 32, 33, 34
                Det_LigneTableGlobale = 4
            Case 35, 36, 37, 38, 39, 40, 41
                Det_LigneTableGlobale = 5
            Case 42, 43, 44, 45, 46, 47, 48
                Det_LigneTableGlobale = 6
            Case 49, 50, 51, 52, 53, 54, 55
                Det_LigneTableGlobale = 7
            Case Else
                Det_LigneTableGlobale = -1
        End Select
    End Function
    Private Function Det_IndexDansLigne(ind As Integer) As Integer
        Select Case ind
            Case 0, 1, 2, 3, 4, 5, 6
                Det_IndexDansLigne = ind
            Case 7, 8, 9, 10, 11, 12, 13
                Det_IndexDansLigne = ind - 7
            Case 14, 15, 16, 17, 18, 19, 20
                Det_IndexDansLigne = ind - 14

            Case Else
                Det_IndexDansLigne = -1
        End Select
    End Function
    Private Function Det_IndexDegréI(Index As Integer) As Integer
        Select Case Index
            Case 0, 1, 2, 3, 4, 5, 6
                Det_IndexDegréI = 0
            Case 7, 8, 9, 10, 11, 12, 13
                Det_IndexDegréI = 7
            Case 14, 15, 16, 17, 18, 19, 20
                Det_IndexDegréI = 14
            Case 21, 22, 23, 24, 25, 26, 27
                Det_IndexDegréI = 21
            Case 28, 29, 30, 31, 32, 33, 34
                Det_IndexDegréI = 28
            Case 35, 36, 37, 38, 39, 40, 41
                Det_IndexDegréI = 35
            Case Else
                Det_IndexDegréI = -1
        End Select
    End Function

    ' Menu Contextuel Accords/3Notes
    ' ******************************
    Private Sub NotesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles Menu3notes.Click

        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            '
            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(0, Ligne, IndexDegré)
            '
            TableCoursAcc(Ligne, IndexDegré).TyAcc = Menu3notes.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If
        Next i
        '
    End Sub
    Sub Menu3_notes()
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then
            '
            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            'If ChangeLangue = False Then
            TabTons.Item(i).Text = Trim(TableGlobalAcc(0, Ligne, IndexDegré))
            'End If
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = Menu3notes.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If
        Next i
    End Sub
    Function AccordPourCadenceMixte(ind As Integer, TYaccord As Integer) As String
        Dim a As String
        Dim IndexDegré As Integer

        AccordPourCadenceMixte = ""
        Select Case Trim(ComboBox4.Text)
            Case "Hispanique", "Hispanic"
                a = TabCadDegrés.Item(ind).Text
                If Trim(a) <> "" Then
                    IndexDegré = Det_IndexDegréMin(a)
                    Select Case Trim(a)
                        Case "V", "IV"
                            IndexDegré = Det_IndexDegré(a)
                            AccordPourCadenceMixte = CAD_TableGlobalAcc(TYaccord, 0, IndexDegré)
                        Case "III", "VI"
                            IndexDegré = Det_IndexDegréMin(a)
                            AccordPourCadenceMixte = CAD_TableGlobalAcc(TYaccord, 1, IndexDegré)
                    End Select
                End If
        End Select
    End Function
    Sub CAD_Menu3_notes()
        Dim i As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        '
        Cad_RAZ_CouleurMarquée()
        '
        For i = 0 To 4
            '

            '

            a = TabCadDegrés.Item(i).Text
            If Trim(a) <> "" Then
                If Cad_OrigineAccord = Modes.Cadence_Mixte Then

                    Select Case Trim(a)
                        Case "V", "IV"
                            IndexDegré = Det_IndexDegré(a)
                        Case "VI", "III"
                            IndexDegré = Det_IndexDegréMin(a)
                    End Select
                Else
                    IndexDegré = Det_IndexDegré(a)
                End If
                '
                If Cad_OrigineAccord <> Modes.Cadence_Mixte Then
                    If Cad_OrigineAccord = Modes.Cadence_Majeure Then
                        'CAD_TableGlobalAcc(0, 0, IndexDegré) = TableGlobalAcc(0, 0, IndexDegré)
                        TabCad.Item(i).Text = Trim(CAD_TableGlobalAcc(0, 0, IndexDegré))
                    Else
                        IndexDegré = Det_IndexDegréMin(a)
                        'CAD_TableGlobalAcc(0, 0, IndexDegré) = TableGlobalAcc(0, 0, IndexDegré)
                        TabCad.Item(i).Text = Trim((CAD_TableGlobalAcc(0, 1, IndexDegré)))
                    End If
                Else
                    TabCad.Item(i).Text = Trim((AccordPourCadenceMixte(i, ComboBox6.SelectedIndex)))
                End If
                '
                'TabCad.Item(i).Text = CAD_TableCoursAcc(i).Accord
                CAD_TableCoursAcc(IndexDegré).TyAcc = Menu3notes.Text
                CAD_TableCoursAcc(IndexDegré).Accord = Trim(TabCad.Item(i).Text)
                '
                '
            End If
            'End If
        Next i
    End Sub
    Sub CAD_Menu4_notes()
        Dim i As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        '
        Cad_RAZ_CouleurMarquée()
        '
        For i = 0 To 4
            '
            '
            'TabCadFiltres4.Item(i).Visible = False
            'TabCadFiltres7.Item(i).Visible = False

            a = TabCadDegrés.Item(i).Text
            If Trim(a) <> "" Then
                IndexDegré = Det_IndexDegré(a)
                '
                'If Cad_OrigineAccord <> Modes.Cadence_Mixte Then
                'TabCad.Item(i).Text = CAD_TableGlobalAcc(0, 0, IndexDegré)
                'Else
                'TabCad.Item(i).Text = AccordPourCadenceMixte(i, 0)
                'End If
                '
                If Cad_OrigineAccord <> Modes.Cadence_Mixte Then
                    If Cad_OrigineAccord = Modes.Cadence_Majeure Then
                        'CAD_TableGlobalAcc(0, 0, IndexDegré) = TableGlobalAcc(0, 0, IndexDegré)
                        TabCad.Item(i).Text = Trim(CAD_TableGlobalAcc(1, 0, IndexDegré))
                    Else
                        IndexDegré = Det_IndexDegréMin(a)
                        'CAD_TableGlobalAcc(0, 0, IndexDegré) = TableGlobalAcc(0, 0, IndexDegré)
                        TabCad.Item(i).Text = Trim(CAD_TableGlobalAcc(1, 1, IndexDegré))
                    End If
                Else
                    TabCad.Item(i).Text = Trim(AccordPourCadenceMixte(i, ComboBox6.SelectedIndex))
                End If
                '

                CAD_TableCoursAcc(IndexDegré).TyAcc = Menu4Notes.Text
                CAD_TableCoursAcc(IndexDegré).Accord = Trim(TabCad.Item(i).Text)
                '

            End If
            'End If
        Next i
    End Sub


    ' Menu Contextuel Accords/3Notes+7
    ' *********************************
    Private Sub NotesToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles Menu4Notes.Click
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then
            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(1, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = Menu4Notes.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)

            'End If
        Next i
    End Sub
    Sub Menu4_notes()
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            ' If TabTonsSelect.Item(i).Checked = True Then
            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = Trim(TableGlobalAcc(1, Ligne, IndexDegré))
            '
            TableCoursAcc(Ligne, IndexDegré).TyAcc = Menu4Notes.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If

        Next i
    End Sub

    Private Sub Notes9eToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MenuNotes9.Click
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then

            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(2, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = MenuNotes9.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If
        Next i

        'AffichageFiltres("9")
    End Sub
    ' Menu Contextuel Accords/3Notes+11
    ' *********************************
    Private Sub Notes11eToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MenuNotes11.Click
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then

            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(3, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = MenuNotes11.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If

        Next i
        '
        'AffichageFiltres("11")
    End Sub
    ' Octave +1
    ' *********
    Private Sub ToolStripMenuItem10_Click(sender As Object, e As EventArgs) Handles OctavePlus1.Click
        OctavePlus1.Checked = True
        Octave0.Checked = False
        OctaveMoins1.Checked = False
        OctaveMoins2.Checked = False
        '
        Maj_ChoixOctave(0, "+1")
    End Sub
    ' Octave = 0
    ' **********
    Private Sub ToolStripMenuItem11_Click(sender As Object, e As EventArgs) Handles Octave0.Click
        OctavePlus1.Checked = False
        Octave0.Checked = True
        OctaveMoins1.Checked = False
        OctaveMoins2.Checked = False
        '
        Maj_ChoixOctave(1, "0")
    End Sub
    ' Octave -1
    ' *********
    Private Sub ToolStripMenuItem12_Click(sender As Object, e As EventArgs) Handles OctaveMoins1.Click
        OctavePlus1.Checked = False
        Octave0.Checked = False
        OctaveMoins1.Checked = True
        OctaveMoins2.Checked = False
        '
        Maj_ChoixOctave(2, "-1")
    End Sub
    ' Octave -2
    ' *********
    Private Sub OctaveMoins2_Click(sender As Object, e As EventArgs) Handles OctaveMoins2.Click
        OctavePlus1.Checked = False
        Octave0.Checked = False
        OctaveMoins1.Checked = False
        OctaveMoins2.Checked = True
        '
        Maj_ChoixOctave(3, "-2")
    End Sub
    Sub Maj_ChoixOctave(OctaveChoisie As Integer, Octave As String)
        Dim i As Integer
        Dim ligne As Integer
        Dim degré As Integer

        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then
            If TabTons.Item(i).BackColor = Color.Red Then
                ligne = Det_LigneTableGlobale(i)
                degré = Det_IndexDegré2(i)
                '
                TableCoursAcc(ligne, degré).OctaveChoisie = OctaveChoisie
                TableCoursAcc(ligne, degré).Octave = Octave
                '
            End If
        Next i
    End Sub
    Private Sub Button19_Click(sender As Object, e As EventArgs)
        Dim i As Integer
        Dim Tonique() As Object

        Tonique = Split(Trim(ComboBox1.Text))
        Tonique(0) = LCaseBémol(Tonique(0))
        i = Det_Modulation(Tonique(0), "4")
        ComboBox1.SelectedIndex = i
    End Sub
    Private Sub Button20_Click(sender As Object, e As EventArgs)
        Dim i As Integer
        Dim Tonique() As Object

        Tonique = Split(Trim(ComboBox1.Text))
        Tonique(0) = LCaseBémol(Tonique(0))
        i = Det_Modulation(Tonique(0), "5")
        ComboBox1.SelectedIndex = i
    End Sub
    Sub Création_Schedule(CheminFichierText As String)
        Dim LigneFiche As String
        Dim tbl As Object
        Dim Position As Single
        Dim Durée As Double
        Dim Accent As Boolean = True
        Dim ValAccent As Byte
        Dim TempoMult As Single
        '
        CallB_Aff_Mesure = False
        CallB_Aff_Marqueur = False
        CallB_Aff_Tonalité = False
        CallB_Aff_Accord = False
        CallB_Aff_Gamme = False
        '
        ' création du fichier MIDI
        ' ************************
        ' Tempo
        TempoMult = 1
        If TempoPar2.Checked = True Then
            TempoMult = 2
        End If
        Horloge1.BeatsPerMinute = Tempo.Value * TempoMult
        '
        Dim fileReader = My.Computer.FileSystem.OpenTextFileReader(CheminFichierText)
        '
        Do Until fileReader.Peek = -1
            LigneFiche = fileReader.ReadLine()
            '
            tbl = Split(LigneFiche, ";")
            Select Case tbl(0)

                Case "Programme"

                Case "Controleur"
                    'tbl(0)="Controleur"
                    'tbl(1)=Numéro Piste
                    'tbl(2)=Numéro de canal
                    'tbl(3)=Position (en nombre de double corche (16)
                    'tbl(4)=Numéro de controleur
                    'tbl(5)=Val CTRL
                    ' ' ControlChangeMessage(DeviceBase device, Channel channel, Control control, int value, float time
                    '                                                                                 Canal MIDI        N° CTRL      Val CTRL     Position
                    Horloge1.Schedule(New Midi.ControlChangeMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, Val(tbl(4)), Val(tbl(5)), Val(tbl(3)) / 16))
                        '
                Case "Note"
                    'tbl(0)="Note"
                    'tbl(1)=Numéro Piste
                    'tbl(2)=Numéro de canal
                    'tbl(3)=Numéro de Note
                    'tbl(4)=Position
                    'tbl(5)=Duration
                    'tbl(6)=Dyn
                    '

                    ' Remarque sur le calcul de Position net de Durée
                    ' 1 - La dll midi dotnet impose une expression en beat avec virgule flottante (noire) des Postions et Durées
                    ' 2 - HyperVoicing compte la Position et la Durée en double croche (16 divisions)
                    ' 3 - Donc, pour exprimer les Positions et Durées en noire, il faut les diviser par 4
                    ' 4 - Remarque : si HyperVoicing décide de compter en triple croches(32 divisions), il faudra faire une division par 8.

                    ' NoteOnOffMessage(DeviceBase device,Channel channel,Pitch pitch,int velocity,float time,Clock clock, float duration
                    Position = ((Val(tbl(4)) / 4) + 1)
                    Durée = ((Val(tbl(5)) / 4) - 0.0625)  ' 
                    '                                                                        Canal MIDI        N° Note      Dyn          Position  Horlorge  Durée
                    Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, Val(tbl(3)), Val(tbl(6)), Position, Horloge1, Durée))
                        '
                Case "Marqueur"
                        'CallB_Aff_Marqueur = True
                Case "Tonalité"
                        'CallB_Aff_Tonalité = tbl(1)
                Case "Accord"
                    Position = ((Val(tbl(2)) / 4) + 1) '
                    Horloge1.Schedule(New CallbackMessage(AddressOf EVT_Accord, Position))
                Case "Gamme"
                    Position = ((Val(tbl(2)) / 4) + 1) '
                    Horloge1.Schedule(New CallbackMessage(AddressOf EVT_Gamme, Position))
                Case "Mesure"
                    ListMesures.Add(Trim(tbl(1)))
                    Position = ((Val(tbl(2)) / 4) + 1) '
                    Horloge1.Schedule(New CallbackMessage(AddressOf EVT_Mesure, Position))
                Case "FIN"
                    Position = ((Val(tbl(1)) / 4) + 1) '
                    Horloge1.Schedule(New CallbackMessage(AddressOf EVT_FIN, Position))
                Case "Métronome"
                    Position = ((Val(tbl(1)) / 4) + 1)
                    If Accent Then ' temps
                        Accent = False
                        ValAccent = 100 ' MétronomeVol.Value
                    Else ' contre temps
                        Accent = True
                        ValAccent = 100 - 10 'MétronomeVol.Value - 10
                    End If
                    '                                                                      N° Note   Dyn     Position 
                    Horloge1.Schedule(New PercussionMessage(SortieMidi.Item(ChoixSortieMidi), 37, ValAccent, Position))
            End Select
        Loop
        fileReader.Close()
        '
        '
        Try
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            If Horloge1.IsRunning Then
                Horloge1.Stop()
                Horloge1.Reset()
            End If
            '
            ' timer d'affichage des eventh
            ' ****************************
            Tempo_Aff_EventH.Interval = 100
            'Tempo_Aff_EventH.Enabled = False ' démarrer la tempo d'arrêt de jeu de l'accord
            Tempo_Aff_EventH.Start()
            ArrêterTimer = False
            Label31.Visible = True
            Label31.Text = "---"
            '
            ' Démarrage Play Back MIDI
            ' ***********************
            Module1.JeuxActif = True
            If Transport.Remote.Checked Then Send_CTRL54_Remote()
            Horloge1.Start()
        Catch ex As Exception
            If Module1.LangueIHM = "fr" Then
                Avertis = "Votre interface MIDI ' " + " pourrait être déjà occupée par une autre application." + Constants.vbCrLf + "Message  : " + ex.Message
            Else
                Avertis = "Your MIDI interface' " + "  may already be occupied by another application." + Constants.vbCrLf + "Message  : " + ex.Message
            End If
            MessageHV.PContenuMess = Avertis
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            'End
        End Try
    End Sub
    Sub Création_Schedule2(CheminFichierText As String)
        Dim LigneFiche As String
        Dim tbl As Object
        Dim Position As Single
        Dim Durée As Double
        Dim TempoMult As Single

        Try
            '
            ' création du fichier MIDI
            ' ************************
            ' Tempo
            TempoMult = 1
            If TempoPar2.Checked = True Then
                TempoMult = 2
            End If
            Horloge1.BeatsPerMinute = Tempo.Value * TempoMult
            Dim fileReader = My.Computer.FileSystem.OpenTextFileReader(CheminFichierText)
            '
            Do Until fileReader.Peek = -1
                LigneFiche = fileReader.ReadLine()
                '
                tbl = Split(LigneFiche, ";")
                Select Case tbl(0)

                    Case "Programme"

                    Case "Controleur"
                        'tbl(0)="Controleur"
                        'tbl(1)=Numéro Piste
                        'tbl(2)=Numéro de canal
                        'tbl(3)=Position (en nombre de double corche (16)
                        'tbl(4)=Numéro de controleur
                        'tbl(5)=Val CTRL
                        ' ' ControlChangeMessage(DeviceBase device, Channel channel, Control control, int value, float time
                        '                                                                                 Canal MIDI        N° CTRL      Val CTRL     Position
                        Horloge1.Schedule(New Midi.ControlChangeMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, Val(tbl(4)), Val(tbl(5)), Val(tbl(3)) / 16))
                        '
                    Case "Note"
                        'tbl(0)="Note"
                        'tbl(1)=Numéro Piste
                        'tbl(2)=Numéro de canal
                        'tbl(3)=Numéro de Note
                        'tbl(4)=Position
                        'tbl(5)=Duration
                        'tbl(6)=Dyn
                        '
                        'NoteOnOffMessage(DeviceBase device,Channel channel,Pitch pitch,int velocity,float time,Clock clock, float duration
                        Position = ((Val(tbl(4)) / 4) + 1)
                        Durée = ((Val(tbl(5)) / 4)) - 0.125
                        '                                                                        Canal MIDI        N° Note      Dyn          Position  Horlorge  Durée
                        Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, Val(tbl(3)), Val(tbl(6)), Position, Horloge1, Durée))
                End Select
            Loop
            fileReader.Close()
            '
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            If Horloge1.IsRunning Then
                Horloge1.Stop()
                Horloge1.Reset()
            End If
            '
            ' Démarrage Play Back MIDI
            ' ************************
            If Transport.Remote.Checked Then Send_CTRL54_Remote()
            Horloge1.Start()
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'Création_Schedule' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub
    Sub Send_CTRL54_Remote()
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(0, 54, 64) ' Canal, CTRL, Valeur CTRL
    End Sub
    Sub Send_CTRL55_Remote()
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(0, 55, 64) ' Canal, CTRL, Valeur CTRL
    End Sub
    Sub EVT_FIN()
        ArrêterTimer = True
    End Sub
    Sub EVT_Mesure()
        CallB_Aff_Mesure = True
    End Sub
    Sub EVT_Accord()
        CallB_Aff_Accord = True
    End Sub
    Sub EVT_Gamme()
        CallB_Aff_Gamme = True
    End Sub
    Sub EVT_Métronome()
        'My.Computer.Audio.Play(My.Resources.rimshotV2, AudioPlayMode.Background)
    End Sub
    Sub Maj_ListGammes()
        Dim i, k, ligne, ligne1 As Integer
        'Dim Gamme_précédente As String
        'Dim Gamme_présente As String
        '
        'Dim DernièreNoteCycle As String
        Dim tbl() As String
        Dim nBoucle As Integer
        'Dim ligne_Début As Integer
        Dim Position As String

        'DernièreNoteCycle = Det_DerNoteCycle2()
        'tbl = Split(DernièreNoteCycle, ".")
        '
        ListGammes.Clear()
        '
        nBoucle = 0
        If Répéter.Checked = True Then
            nBoucle = LoopNumber.Value - 1
        End If
        '
        ' trouver la ligne de début : prémière ligne dont le N° de mesure = Debut.value
        ' *****************************************************************************
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(ligne, 1).Text) <> "" Then
                Position = Grid1.Cell(i, 1).Text
                tbl = Split(Position, ".")
                If Trim(tbl(0)) = Trim(Début.Value) Then
                    k = Début.Value - 1
                    ligne1 = i
                    Exit For
                End If
                '
            Else
                Exit For
            End If
        Next i
        '
        k = Début.Value - 1
        For i = 0 To nBoucle
            'Gamme_précédente = ""
            'Gamme_présente = ""
            For ligne = ligne1 To Grid1.Rows - 1
                'Gamme_présente = Trim(Grid1.Cell(ligne, 5).Text)
                'If Trim(Gamme_présente) <> Trim(Gamme_précédente) Then
                If Trim(Grid1.Cell(ligne, 5).Text) <> "" Then
                    ListGammes.Add(Trim(Grid1.Cell(ligne, 5).Text))
                Else
                    Exit For
                End If
                'End If
                'Gamme_précédente = Trim(Gamme_présente)

            Next ligne
            '


        Next i
        IndexListGammes = 0
    End Sub
    Sub Maj_ListAccords()
        Dim i, k, ligne, ligne1, ligne2, derMesure, mesureExistante As Integer
        'Dim Gamme_précédente As String
        'Dim Gamme_présente As String
        '
        'Dim DernièreNoteCycle As String
        Dim tbl() As String
        Dim nBoucle As Integer
        Dim Position As String

        'DernièreNoteCycle = Det_DerNoteCycle2()
        'tbl = Split(DernièreNoteCycle, ".")
        '
        ListAccords.Clear()
        '
        nBoucle = 0
        If Répéter.Checked = True Then
            nBoucle = LoopNumber.Value - 1
        End If
        '
        ' trouver la ligne de début : prémière ligne dont le N° de mesure = Debut.value
        ' *****************************************************************************
        ' Remarque: pour le moment, on interdit la cas où la mesure de début est vide.
        ' De ce fait, on est toujours certain de trouer une mesure dans la recherche suivante
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                Position = Grid1.Cell(i, 1).Text
                tbl = Split(Position, ".")
                If Trim(tbl(0)) = Trim(Début.Value) Then
                    k = Début.Value - 1
                    ligne1 = i
                    Exit For
                End If
                '
            Else
                Exit For
            End If
        Next i


        ' Recherche de la dernière ligne
        ' ******************************
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) = "" Then
                Position = Grid1.Cell(i - 1, 1).Text
                tbl = Split(Position, ".")
                derMesure = Val(tbl(0))
                ligne2 = i - 1
                Exit For
            End If
        Next




        ' trouver la ligne de fin : prémière ligne dont le N° de mesure = Terme.value
        ' **************************************************************************
        If Terme.Value <= derMesure Then
            ligne2 = -1
            For i = 1 To Grid1.Rows - 1
                If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                    Position = Grid1.Cell(i, 1).Text
                    tbl = Split(Position, ".")
                    If Val(tbl(0)) > (Terme.Value) Then
                        k = Début.Value - 1
                        ligne2 = i - 1
                        Exit For
                    End If
                    '
                Else
                    Exit For
                End If
            Next i
        End If
        ' Cas où Terme.value ne correspond pas à une mesure existante : dans ce cas, on remonte vers la mesure la plus proche (utilisatin de grid2)
        ' *****************************************************************************************************************************************
        If ligne2 = -1 Then
            For i = Terme.Value To 1 Step -1
                If Grid2.Cell(1, i).Text <> "" Then
                    mesureExistante = i
                    Exit For
                End If
            Next i
            '
            For i = 1 To Grid1.Rows - 1
                If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                    Position = Grid1.Cell(i, 1).Text
                    tbl = Split(Position, ".")
                    If Val(tbl(0)) > (mesureExistante) Then
                        k = Début.Value - 1
                        ligne2 = i - 1
                        Exit For
                    Else
                        If Val(tbl(0)) = (mesureExistante) And Trim(Grid2.Cell(1, mesureExistante + 1).Text) = "" Then ' cas rajouté
                            ligne2 = i
                            Exit For
                        End If
                    End If
                    '
                Else
                    Exit For
                End If
            Next i
        End If


        ' Mise à jour de ListAccords
        ' ************************
        k = Début.Value - 1
        For i = 0 To nBoucle
            'Gamme_précédente = ""
            'Gamme_présente = ""
            For ligne = ligne1 To ligne2 'Grid1.Rows - 1
                'Gamme_présente = Trim(Grid1.Cell(ligne, 5).Text)
                'If Trim(Gamme_présente) <> Trim(Gamme_précédente) Then
                If Trim(Grid1.Cell(ligne, 4).Text) <> "" Then
                    ListAccords.Add(Trim(Grid1.Cell(ligne, 4).Text))
                Else
                    Exit For
                End If
                'End If
                'Gamme_précédente = Trim(Gamme_présente)

            Next ligne
            '
        Next i
        IndexListAccords = 0
    End Sub
    Function Cycle_LigneDébut() As Integer
        Dim i, ligne1 As Integer
        Dim Position As String
        Dim tbl() As String

        ' trouver la ligne de début : prémière ligne dont le N° de mesure = Debut.value
        ' *****************************************************************************
        ' Remarque: pour le moment, on interdit la cas où la mesure de début est vide.
        ' De ce fait, on est toujours certain de trouer une mesure dans la recherche suivante
        ligne1 = 1
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                Position = Grid1.Cell(i, 1).Text
                tbl = Split(Position, ".")
                If Trim(tbl(0)) = Trim(Début.Value) Then
                    ligne1 = i
                    Exit For
                End If
                '
            Else
                Exit For
            End If
        Next
        '
        Cycle_LigneDébut = ligne1
    End Function
    Function Cycle_LigneFin() As Integer
        Dim i, ligne2 As Integer
        Dim Position As String
        Dim tbl() As String
        Dim derMesure, mesureExistante As Integer

        ' Cas A : pas de bouclage.Recherche de la dernière ligne et de la dernière mesure dans Grid1 pour le cas où pas de bouclage.
        ' Quand "pas de bouclage", on lit jusqu'à la fin
        ' *************************************************************************************************************************
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) = "" Then
                Position = Grid1.Cell(i - 1, 1).Text
                tbl = Split(Position, ".")
                derMesure = Val(tbl(0))
                ligne2 = i - 1
                Exit For
            End If
        Next


        ' Cas B : bouclage
        ' ****************
        If Répéter.Checked = True Then
            ' Cas 1 : trouver la ligne de fin : prémière ligne dont le N° de mesure = Terme.value
            ' Remarque : si la mesure désignée dans Term.value n'existe pas dans Grid1 alors ligne2=-1
            ' ****************************************************************************************
            If Terme.Value <= derMesure Then
                ligne2 = -1
                For i = 1 To Grid1.Rows - 1
                    If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                        Position = Grid1.Cell(i, 1).Text
                        tbl = Split(Position, ".")
                        If Val(tbl(0)) > (Terme.Value) Then
                            ligne2 = i - 1
                            Exit For
                        End If
                        '
                    Else
                        Exit For
                    End If
                Next i
            End If

            ' Cas 2 :   mesure désignée dans Term.value n'existe pas dans Grid1.
            ' 1 - Dans un premier temps,  on identifie la mesure la plus proche (en amont) en utilisant Grid2
            '     *******************************************************************************************
            If ligne2 = -1 Then
                For i = Terme.Value To 1 Step -1
                    If Grid2.Cell(1, i).Text <> "" Then
                        mesureExistante = i
                        Exit For
                    End If
                Next i
                '
                ' 2 - Dans un 2e temps, on identifie la dernière ligne de Grid1 contenant la mesure identifiée dans mesureexistante
                '     *************************************************************************************************************
                For i = 1 To Grid1.Rows - 1
                    If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                        Position = Grid1.Cell(i, 1).Text
                        tbl = Split(Position, ".")
                        If Val(tbl(0)) > (mesureExistante) Then
                            ligne2 = i - 1
                            Exit For
                        Else
                            If Val(tbl(0)) = (mesureExistante) And Trim(Grid2.Cell(1, mesureExistante + 1).Text) = "" Then ' cas rajouté
                                ligne2 = i
                                Exit For
                            End If
                        End If
                        '
                    Else
                        Exit For
                    End If
                Next i
            End If
        End If
        '
        Cycle_LigneFin = ligne2
        '
    End Function
    Sub Maj_ListAccords2()
        Dim i, ligne1, ligne2, nBoucle As Integer

        ListAccords.Clear()
        '
        nBoucle = 0
        If Répéter.Checked = True Then
            nBoucle = LoopNumber.Value - 1
        End If
        '
        ligne1 = Cycle_LigneDébut()
        ligne2 = Cycle_LigneFin()
        '
        For i = 0 To nBoucle
            For ligne = ligne1 To ligne2 'Grid1.Rows - 1
                If Trim(Grid1.Cell(ligne, 4).Text) <> "" Then
                    ListAccords.Add(Trim(Grid1.Cell(ligne, 4).Text))
                Else
                    Exit For
                End If
            Next ligne
        Next i
        '
        IndexListAccords = 0
    End Sub
    '
    Sub Maj_ListGammes2()
        Dim i, ligne1, ligne2, nBoucle As Integer

        ListGammes.Clear()
        '
        nBoucle = 0
        If Répéter.Checked = True Then
            nBoucle = LoopNumber.Value - 1
        End If
        '
        ligne1 = Cycle_LigneDébut()
        ligne2 = Cycle_LigneFin()
        '
        For i = 0 To nBoucle
            For ligne = ligne1 To ligne2 'Grid1.Rows - 1
                If Trim(Grid1.Cell(ligne, 5).Text) <> "" Then
                    ListGammes.Add(Trim(Grid1.Cell(ligne, 5).Text))
                Else
                    Exit For
                End If
            Next ligne
        Next i
        '
        IndexListGammes = 0
    End Sub
    Sub Maj_DicoAccords()
        Dim i, j, k, m As Integer
        Dim a As String
        Dim DernièreNoteCycle As String
        Dim tbl() As String
        Dim nBoucle As Integer

        DernièreNoteCycle = Det_DerNoteCycle2()
        tbl = Split(DernièreNoteCycle, ".")

        DicoAccords.Clear()
        '
        nBoucle = 0
        If Répéter.Checked = True Then
            nBoucle = LoopNumber.Value - 1
        End If
        k = Début.Value - 1
        For i = 0 To nBoucle
            For j = Début.Value To Val(tbl(0))

                a = Trim(Grid2.Cell(1, j).Text)
                If (Trim(a) <> "") Or (Trim(a) = "" And k <> Terme.Value) Then
                    k = k + 1
                    DicoAccords.Add(Trim(Str(k)), Trim(a))
                End If
            Next j
            ' Mesures de fin de cycle
            For m = 1 To EndMeasureNumber.Value - 1
                k = k + 1
                DicoAccords.Add(Trim(Str(k)), "")
            Next
        Next i
    End Sub
    Sub Maj_DicoNotes()
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer


        Dim List_T As New List(Of TT)
        Dim Notes(0 To 11) As String
        Dim T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 As New TT

        List_T.Add(T0) '
        List_T.Add(T1)
        List_T.Add(T2)
        List_T.Add(T3)
        List_T.Add(T4)
        List_T.Add(T5)
        List_T.Add(T6)
        List_T.Add(T7)
        List_T.Add(T8)
        List_T.Add(T9)
        List_T.Add(T10)
        List_T.Add(T11)
        '
        Notes(0) = "c"
        Notes(1) = "c#"
        Notes(2) = "d"
        Notes(3) = "d#"
        Notes(4) = "e"
        Notes(5) = "f"
        Notes(6) = "f#"
        Notes(7) = "g"
        Notes(8) = "g#"
        Notes(9) = "a"
        Notes(10) = "a#"
        Notes(11) = "b"


        'T.Toctave(0) = "A"
        For k = 0 To 11
            j = 0 + k
            For i = 0 To 10
                List_T.Item(k).Toctave(i) = j
                j = j + 12
            Next
            DicoNotes.Add(Notes(k), List_T.Item(k))
            ' Entrée des notes exprimées en "bémol"
            Select Case Notes(k)
                Case "c#"
                    DicoNotes.Add("db", List_T.Item(k))
                Case "d#"
                    DicoNotes.Add("eb", List_T.Item(k))
                Case "f#"
                    DicoNotes.Add("gb", List_T.Item(k))
                Case "g#"
                    DicoNotes.Add("ab", List_T.Item(k))
                Case "a#"
                    DicoNotes.Add("bb", List_T.Item(k))
            End Select
        Next k

    End Sub

    Sub FIN()
        'SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()
        'SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()
        'If Transport.Remote.Checked Then Send_CTRL54_Remote()
        ToutesNotesOff()
        'Init_CTRLMIDI2()
        Fermer_MIDI()
        Tempo_Aff_EventH.Enabled = False
        Tempo_Aff_EventH.Stop()  ' arrêter la tempo d'arrêt de jeu de l'accord
        '
        PlayMidi.Enabled = True
        Transport.Play.Enabled = True
        Module1.JeuxActif = False
    End Sub

    Sub MenuContextGrid2Grid3(m As Integer, t As Integer, ct As Integer)
        Dim a As String

        a = TableEventH(m, t, ct).Accord
        If Trim(a) <> "" Then
            ContextMenu3Accord.Text = Trim(a)
            Maj_TousAccordsMnContext3(m, t, ct)
        End If
    End Sub
    Function Det_AccordDsMesure(m As Integer) As String
        Dim t, ct As Integer
        Det_AccordDsMesure = ""
        Dim sortir As Boolean = False
        For t = 0 To UBound(TableEventH, 2) 'nbTempsMesure '- 1
            For ct = 0 To UBound(TableEventH, 3) 'nbDivTemps '- 1
                If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                    Det_AccordDsMesure = Trim(Str(m)) + " " + Trim(Str(t)) + " " + Trim(Str(ct))
                    sortir = True
                    Exit For
                End If
            Next ct
            If sortir Then
                Exit For
            End If
        Next t
    End Function
    Sub Maj_PropriétésEntrée2()

        Dim A As Modes

        ' OngletCours = 0   Onglet Progression
        ' OngletCours = 1   Onglet Tonalité
        ' OngletCours = 7   Onglet Modulation
        ' OngletCours = 16  Onglet Substitution


        Select Case OngletCours
            Case 0, 1
                If OngletCours = 0 Then
                    A = Cad_OrigineAccord
                Else
                    A = OrigineAccord
                End If
                '
                Entrée_Accord = AccordMarqué
                Select Case A
                    Case Modes.Majeur, Modes.Cadence_Majeure
                        Entrée_Gamme = Trim(Det_TonaCours2() + " " + "Maj")
                    Case Modes.MineurH, Modes.Cadence_Mineure
                        Entrée_Gamme = Trim(Det_TonaMinCours2() + " " + "MinH")
                    Case Modes.MineurM
                        Entrée_Gamme = Trim(Det_TonaMinCours2() + " " + "MinM")
                    Case Modes.Modulation


                End Select

                Entrée_Mode = Entrée_Gamme
                Entrée_Tonalité = Trim(Det_TonaCours2() + " " + "Maj")
            Case Else '7, 21

        End Select
        '
    End Sub
    Public Sub Ecriture_Entrée_Ds_CompoGrid()

        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim ligne As Integer = 0
        Dim a, b As String
        Dim i As Integer
        Dim tona As String
        '
        'Dim nbTempsMesure As Integer
        'Dim nbDivTemps As Integer
        '
        Dim tbl() As String
        Dim tbl1() As String
        Dim tbl2() As String

        i = Grid1.ActiveCell.Row
        i = Grid1.ActiveCell.Col

        Try
            '
            EffacerDonnéesGrid1() ' présence utilisation de Autoredraw dans cette procédure
            '
            Grid1.AutoRedraw = False
            Grid2.AutoRedraw = False
            '
            RazCol1()
            '
            For m = 0 To UBound(TableEventH, 1)
                For t = 0 To UBound(TableEventH, 2) 'nbTempsMesure '- 1
                    For ct = 0 To UBound(TableEventH, 3) 'nbDivTemps '- 1
                        If Trim(TableEventH(m, t, ct).Position) <> "" Then
                            '
                            tbl = Split(TableEventH(m, t, ct).Tonalité)
                            ligne = ligne + 1
                            ' Position
                            ' ********
                            Grid1.Cell(ligne, 1).Text = Trim(TableEventH(m, t, ct).Position)
                            tbl1 = Split(TableEventH(m, t, ct).Position, ".")
                            Grid1.Cell(ligne, 0).Text = Trim(ligne.ToString) 'Trim(tbl1(0))
                            ' Marqueur
                            ' ********
                            Grid1.Cell(ligne, 2).ForeColor = Color.Black
                            Grid1.Cell(ligne, 2).BackColor = Color.Red
                            If ligne > 1 Then
                                Grid1.Cell(ligne, 2).BackColor = Couleur_Marqueurs
                            End If
                            Grid1.Cell(ligne, 2).Text = Trim(TableEventH(m, t, ct).Marqueur)
                            If Trim(Grid1.Cell(ligne, 2).Text) <> "" Then
                                Grid1.Cell(ligne, 2).BackColor = Color.Green
                                Grid1.Cell(ligne, 2).ForeColor = Color.Yellow
                                '
                                Grid2.Cell(0, m).Locked = False
                                Grid2.Cell(0, m).BackColor = Color.Green
                                Grid2.Cell(0, m).ForeColor = Color.Yellow
                                Grid2.Cell(0, m).Locked = True
                                'Grid2.Cell(0, m).SetFocus()
                            End If
                            ' Mode (correspond à la colonne 'Tonalité' dans Compogrid)
                            ' ****
                            Grid1.Cell(ligne, 3).Text = Trim(TableEventH(m, t, ct).Tonalité)
                            '
                            tbl = Split(TableEventH(m, t, ct).Tonalité) ' ?????

                            ' Accord
                            ' ******
                            Grid1.Cell(ligne, 4).Text = Trim(TableEventH(m, t, ct).Accord)

                            ' Gamme
                            ' *****
                            Grid1.Cell(ligne, ColGamme).Text = Trad_GammeEn_D_Maj(Trim(TableEventH(m, t, ct).Gamme)) ' les gammes sont toujours exprimées en #
                            ' Degré
                            ' *****
                            a = Trad_DegréRomains(TableEventH(m, t, ct).Degré)
                            Grid1.Cell(ligne, 6).Text = Trim(a)
                            '
                            TableEventH(m, t, ct).Ligne = ligne
                            '
                            b = Trad_NoteEnD(Trim(tbl(0))) ' cette traduction est nécessaire pour indexer les dico couleur
                            b = Trim(tbl(0) + " " + tbl(1))
                            '
                            ' Mise à jour des couleurs
                            ' ************************
                            Maj_CouleurTona_Cell(ligne, b) ' mise à jour globale des couleurs
                            If ligne <> 1 Then ' traitement du cas particulier des gammes
                                tona = Trim(Grid1.Cell(ligne, ColTonalité).Text)
                                'tona = Det_RelativeMajeure2(tona)
                                tbl2 = tona.Split()
                                ' ************************************************
                                'If (Trim(Grid1.Cell(ligne, ColGamme).Text) <> Trim(Grid1.Cell(ligne, ColTonalité).Text)) And
                                '(tbl2(1) <> "MinH" And tbl2(1) <> "MinM") Then
                                'Grid1.Cell(ligne, ColGamme).BackColor = Color.White
                                'Grid1.Cell(ligne, ColGamme).ForeColor = Color.Black
                                '
                                'Else
                                'tona = Trim(Grid1.Cell(ligne, ColTonalité).Text)
                                'tbl2 = tona.Split()
                                'Grid1.Cell(ligne, ColGamme).BackColor = DicoCouleur.Item(tbl2(0))
                                'Grid1.Cell(ligne, ColGamme).ForeColor = DicoCouleurLettre.Item(tbl2(0))
                                'End If
                                ' ************************************************
                            End If

                            '
                            ' VEL
                            ' ***
                            Grid1.Cell(ligne, 7).Text = Trim(TableEventH(m, t, ct).Vel)
                            ' Racine
                            ' *****
                            Grid1.Cell(ligne, 8).Text = Trim(TableEventH(m, t, ct).Racine)

                            ' Exension - Données étendues
                            ' ***************************
                            Maj_DétailsColler(ligne)
                            '
                        End If
                    Next ct
                Next t
            Next m
            '

            Grid1.Refresh()
            Grid2.Refresh()
            Grid1.AutoRedraw = True
            Grid2.AutoRedraw = True
            '


        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'Ecriture_Entrée_ds_Compogrid' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
            'Dim result As DialogResult = MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
        End Try
    End Sub
    Sub RazCol1()
        Dim i As Integer

        For i = 1 To Grid1.Rows - 1
            Grid1.Cell(i, 0).Text = ""
        Next
    End Sub

    Function Trad_DegréRomains(Num As Integer) As String
        Trad_DegréRomains = "I"
        Select Case Num
            Case 0
                Trad_DegréRomains = "I"
            Case 1
                Trad_DegréRomains = "II"
            Case 2
                Trad_DegréRomains = "III"
            Case 3
                Trad_DegréRomains = "IV"
            Case 4
                Trad_DegréRomains = "V"
            Case 5
                Trad_DegréRomains = "VI"
            Case 6
                Trad_DegréRomains = "VII"
        End Select
    End Function

    Sub Maj_CouleurTona_Cell(ligne As Integer, tona As String)
        Dim tbl() As String
        '
        tona = Det_RelativeMajeure2(tona) ' si la tonalité est mineure alors on affiche la couleur de la relaive majeure
        tbl = Split(tona)
        tona = Trim(tbl(0))

        If ligne <> 1 Then
            ' position
            Grid1.Cell(ligne, 1).BackColor = DicoCouleur.Item(tona)
            Grid1.Cell(ligne, 1).ForeColor = DicoCouleurLettre.Item(tona)
            ' Tonalité
            Grid1.Cell(ligne, 3).BackColor = DicoCouleur.Item(tona)
            Grid1.Cell(ligne, 3).ForeColor = DicoCouleurLettre.Item(tona)
            ' Accord
            Grid1.Cell(ligne, 4).BackColor = DicoCouleur.Item(tona)
            Grid1.Cell(ligne, 4).ForeColor = DicoCouleurLettre.Item(tona)
            ' Gamme
            Grid1.Cell(ligne, 5).BackColor = DicoCouleur.Item(tona)
            Grid1.Cell(ligne, 5).ForeColor = DicoCouleurLettre.Item(tona)
            ' Degré
            Grid1.Cell(ligne, 6).BackColor = DicoCouleur.Item(tona)
            Grid1.Cell(ligne, 6).ForeColor = DicoCouleurLettre.Item(tona)
        End If
        '
    End Sub
    Sub Maj_NotesGammes(Gamme As String, ligne As Integer)
        Dim i As Integer
        Dim a As String
        Dim tbl() As String


        a = Trim(Det_NotesGammes(Gamme))
        tbl = Split(a)
        '
        For i = 0 To UBound(tbl)
            Grid1.Cell(ligne, i + 7).Text = tbl(i)
        Next i
        '
    End Sub


    Sub EffacerDonnéesGrid1()
        Dim i As Integer
        '
        '
        Grid1.AutoRedraw = False
        'Next ligne
        '
        For i = 1 To nbColonnesGrid1 - 2
            Grid1.Column(i).Locked = False
        Next i

        For i = 1 To nbLignesGrid1 - 1
            Grid1.Range(i, 1, i, nbColonnesGrid1 - 2).ClearText()
            Grid1.Range(i, 1, i, nbColonnesGrid1 - 2).ClearBackColor()
            'RAZ_Détails(i) ' Maj TableEventH
        Next
        ' 


        ' Couleurs de grid1
        ' *****************
        ' couleurs de grid1
        ' *****************
        Grid1.Range(1, 1, (nbLignesGrid1 - 1), 1).BackColor = Couleur_Positions 'Color.AliceBlue   ' Positions
        Grid1.Range(1, 2, (nbLignesGrid1 - 1), 2).BackColor = Couleur_Marqueurs 'Color.Beige       ' Marqueurs
        Grid1.Range(1, 3, (nbLignesGrid1 - 1), 3).BackColor = Couleur_Tonalités 'Color.PaleTurquoise     ' Tonalités
        Grid1.Range(1, 4, (nbLignesGrid1 - 1), 4).BackColor = Couleur_Accords 'Color.Khaki        ' Accords
        Grid1.Range(1, 5, (nbLignesGrid1 - 1), 5).BackColor = Couleur_Gammes 'Color.Lavender      ' Gammes
        Grid1.Range(1, 6, (nbLignesGrid1 - 1), 6).BackColor = Couleur_Degrés 'Color.Lavender      ' degrés
        Grid1.Range(1, 7, (nbLignesGrid1 - 1), 7).BackColor = Couleur_Vel
        Grid1.Range(1, 8, (nbLignesGrid1 - 1), 8).BackColor = Couleur_Root
        '
        ' Bordures
        ' ********
        Grid1.Range(0, 0, (nbLignesGrid1 - 1), (nbColonnesGrid1 - 1)).Borders(FlexCell.EdgeEnum.InsideHorizontal) = FlexCell.LineStyleEnum.None
        Grid1.Range(0, 0, (nbLignesGrid1 - 1), (nbColonnesGrid1 - 1)).Borders(FlexCell.EdgeEnum.InsideVertical) = FlexCell.LineStyleEnum.None
        '
        ' Colonne de séparation entre données utiles et données étendues
        ' ***************************************************************
        Grid1.Range(1, 9, (nbLignesGrid1 - 1), 9).Borders(FlexCell.EdgeEnum.InsideVertical) = FlexCell.LineStyleEnum.None
        Grid1.Range(1, 9, (nbLignesGrid1 - 1), 9).BackColor = Color.LightBlue
        Grid1.Range(0, 9, 0, nbColonnesGrid1 - 1).BackColor = Color.LightBlue 'Color.LemonChiffon
        Grid1.Range(1, (nbColonnesGrid1 - 1), (nbLignesGrid1 - 1), (nbColonnesGrid1 - 1)).BackColor = Color.White 'LightGoldenrodYellow
        '
        Grid1.Range(1, 1, 1, 8).BackColor = Color.Red
        Grid1.Range(1, 1, 1, 8).ForeColor = Color.White
        '
        For i = 1 To nbColonnesGrid1 - 2
            Grid1.Column(i).Locked = True
        Next i
        Grid1.AutoRedraw = True
        Grid1.Refresh()

    End Sub

    Function Det_NbTempsMesure() As Integer
        Select Case Dénominateur
            Case 4
                Det_NbTempsMesure = Numérateur
            Case 8
                Det_NbTempsMesure = Numérateur / 3
            Case Else
                Det_NbTempsMesure = -1
        End Select
    End Function
    Function Det_NbDivTemps() As Integer
        Select Case Dénominateur
            Case 4
                Det_NbDivTemps = 2
            Case 8
                Det_NbDivTemps = 3

            Case Else
                Det_NbDivTemps = -1
        End Select
    End Function
    Function Det_NbDivTemps2(temps As Integer) As Integer
        Select Case Dénominateur
            Case 4
                Det_NbDivTemps2 = 2
            Case 8
                Select Case Numérateur
                    Case 7 ' cas 7/8
                        Det_NbDivTemps2 = 3
                        If temps = 3 Then
                            Det_NbDivTemps2 = 4
                        End If
                    Case Else
                        Det_NbDivTemps2 = 3
                End Select
            Case Else
                Det_NbDivTemps2 = -1
        End Select
    End Function
    Function Det_Val_Position(ligne As Integer) As Integer
        Dim a As String
        Dim b As String
        Dim tbl() As String
        a = Grid1.Cell(ligne, 1).Text
        If Trim(a) <> "" Then
            tbl = Split(a, ".")
            b = tbl(0) + tbl(1) + tbl(2)
            Det_Val_Position = Val(b)
        Else
            Det_Val_Position = 0
        End If
    End Function
    Function Det_IndexGrid3_De_ColGrid2(ColGrid2 As Integer) As Integer
        Return (Det_NbDivisionMesure() * (ColGrid2 - 1)) + 1
    End Function


    Function Det_MarqueurDsMesure(m As Integer) As Boolean
        Dim t As Integer
        Dim ct As Integer
        Dim sortir As Boolean = False
        '
        Det_MarqueurDsMesure = False
        For t = 0 To UBound(TableEventH, 2)
            For ct = 0 To UBound(TableEventH, 3)
                If Trim(TableEventH(m, t, ct).Marqueur) <> "" Then
                    Det_MarqueurDsMesure = True
                    sortir = True
                    Exit Function
                End If
            Next ct
            '
            If sortir = True Then
                Exit Function
            End If
        Next t
    End Function



    Function Det_NomMode(Tonalité As String, Degré As String) As String
        Dim tbl() As String

        tbl = Split(Tonalité, " ")
        Det_NomMode = ""
        Select Case tbl(1)
            Case "Maj"
                Select Case Degré
                    Case "I"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Ionien"
                        Else
                            Det_NomMode = "Ionian"
                        End If
                    Case "II"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Dorien"
                        Else
                            Det_NomMode = "Dorian"
                        End If
                    Case "III"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Prygien"
                        Else
                            Det_NomMode = "Prygian"
                        End If
                    Case "IV"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Lydien"
                        Else
                            Det_NomMode = "Lydian"
                        End If
                    Case "V"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "MixoLydien"
                        Else
                            Det_NomMode = "MixoLydian"
                        End If
                    Case "VI"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Aeolien"
                        Else
                            Det_NomMode = "Aeolian"
                        End If
                    Case "VII"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Locrien"
                        Else
                            Det_NomMode = "Locrian"
                        End If
                End Select
            Case "MinH"
                Select Case Degré
                    Case "I"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "MinH"
                        Else
                            Det_NomMode = "MinH"
                        End If
                    Case "II"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Locrien B6"
                        Else
                            Det_NomMode = "Locrian B6"
                        End If
                    Case "III"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Ionien 5#"
                        Else
                            Det_NomMode = "Ionian 5#"
                        End If
                    Case "IV"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Dorien 4#"
                        Else
                            Det_NomMode = "Dorian 4#"
                        End If
                    Case "V"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "SuperPhrygien"
                        Else
                            Det_NomMode = "SuperPhrygian"
                        End If
                    Case "VI"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Lydien 9#"
                        Else
                            Det_NomMode = "Lydian 9#"
                        End If
                    Case "VII"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Altéré"
                        Else
                            Det_NomMode = "Altered"
                        End If
                End Select
            Case "MinM"
                Select Case Degré
                    Case "I"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "MinM"
                        Else
                            Det_NomMode = "MinM"
                        End If
                    Case "II"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Dorien 2b"
                        Else
                            Det_NomMode = "Dorian 2b"
                        End If
                    Case "III"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Lydien augmenté"
                        Else
                            Det_NomMode = "Augmented Lydian"
                        End If
                    Case "IV"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Lydien 7b"
                        Else
                            Det_NomMode = "Lydian 7b"
                        End If
                    Case "V"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Mixolydien 6b"
                        Else
                            Det_NomMode = "Mixolydian 6b"
                        End If
                    Case "VI"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Aéolien b5"
                        Else
                            Det_NomMode = "Aéolian b5"
                        End If
                    Case "VII"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "SuperLocrien"
                        Else
                            Det_NomMode = "SuperLocrian"
                        End If
                End Select
            Case "MajH"
                Select Case Degré
                    Case "I"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "MajH"
                        Else
                            Det_NomMode = "MajH"
                        End If
                    Case "II"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Dorien b5"
                        Else
                            Det_NomMode = "Dorian b5"
                        End If
                    Case "III"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Phrygien b4"
                        Else
                            Det_NomMode = "Phrygian b4"
                        End If
                    Case "IV"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Lydien b3"
                        Else
                            Det_NomMode = "Lydian b3"
                        End If
                    Case "V"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Mixolydien b2"
                        Else
                            Det_NomMode = "Mixolydian b2"
                        End If
                    Case "VI"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Lydien Aug 2#"
                        Else
                            Det_NomMode = "Lydian Aug 2#"
                        End If
                    Case "VII"
                        If Module1.LangueIHM = "fr" Then
                            Det_NomMode = "Locrien bb7"
                        Else
                            Det_NomMode = "Locrian bb7"
                        End If
                End Select
        End Select

    End Function

    Function Trad_NomMode(Mode As String, LangueLoc As String) As String

        'tbl = Split(Mode, " ")
        Trad_NomMode = ""
        '
        Select Case Mode 'tbl(1)

            Case "Ionien", "Ionian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Ionien"
                Else
                    Trad_NomMode = "Ionian"
                End If
            Case "Dorien", "Dorian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Dorien"
                Else
                    Trad_NomMode = "Dorian"
                End If
            Case "Prygien", "Prygian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Prygien"
                Else
                    Trad_NomMode = "Prygian"
                End If
            Case "Lydien", "Lydian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Lydien"
                Else
                    Trad_NomMode = "Lydian"
                End If
            Case "MixoLydien", "MixoLydian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "MixoLydien"
                Else
                    Trad_NomMode = "MixoLydian"
                End If
            Case "Aeolien", "Aeolian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Aeolien"
                Else
                    Trad_NomMode = "Aeolian"
                End If
            Case "Locrien", "Locrian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Locrien"
                Else
                    Trad_NomMode = "Locrian"
                End If


            Case "MinH"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "MinH"
                Else
                    Trad_NomMode = "MinH"
                End If
            Case "Locrien B6", "Locrian B6"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Locrien B6"
                Else
                    Trad_NomMode = "Locrian B6"
                End If
            Case "Ionien 5#", "Ionian 5#"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Ionien 5#"
                Else
                    Trad_NomMode = "Ionian 5#"
                End If
            Case "Dorien 4#", "Dorian 4#"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Dorien 4#"
                Else
                    Trad_NomMode = "Dorian 4#"
                End If
            Case "SuperPhrygien", "SuperPhrygian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "SuperPhrygien"
                Else
                    Trad_NomMode = "SuperPhrygian"
                End If
            Case "VI"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Lydien 9#"
                Else
                    Trad_NomMode = "Lydian 9#"
                End If
            Case "Altéré", "Altered"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Altéré"
                Else
                    Trad_NomMode = "Altered"
                End If


            Case "MinM"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "MinM"
                Else
                    Trad_NomMode = "MinM"
                End If
            Case "Dorien 2b", "Dorian 2b"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Dorien 2b"
                Else
                    Trad_NomMode = "Dorian 2b"
                End If
            Case "Lydien augmenté", "Augmented Lydian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Lydien augmenté"
                Else
                    Trad_NomMode = "Augmented Lydian"
                End If
            Case "Lydien 7b", "Lydian 7b"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Lydien 7b"
                Else
                    Trad_NomMode = "Lydian 7b"
                End If
            Case "Mixolydien 6b", "Mixolydian 6b"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Mixolydien 6b"
                Else
                    Trad_NomMode = "Mixolydian 6b"
                End If
            Case "Aéolien b5", "Aéolian b5"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Aéolien b5"
                Else
                    Trad_NomMode = "Aéolian b5"
                End If
            Case "SuperLocrien", "SuperLocrian"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "SuperLocrien"
                Else
                    Trad_NomMode = "SuperLocrian"
                End If


            Case "MajH"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "MajH"
                Else
                    Trad_NomMode = "MajH"
                End If
            Case "Dorien b5", "Dorian b5"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Dorien b5"
                Else
                    Trad_NomMode = "Dorian b5"
                End If
            Case "Phrygien b4", "Phrygian b4"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Phrygien b4"
                Else
                    Trad_NomMode = "Phrygian b4"
                End If
            Case "Lydien b3", "Lydian b3"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Lydien b3"
                Else
                    Trad_NomMode = "Lydian b3"
                End If
            Case "Mixolydien b2", "Mixolydian b2"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Mixolydien b2"
                Else
                    Trad_NomMode = "Mixolydian b2"
                End If
            Case "Lydien Aug 2#", "Lydian Aug 2#"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Lydien Aug 2#"
                Else
                    Trad_NomMode = "Lydian Aug 2#"
                End If
            Case "Locrien bb7", "Locrian bb7"
                If LangueLoc = "fr" Then
                    Trad_NomMode = "Locrien bb7"
                Else
                    Trad_NomMode = "Locrian bb7"
                End If
            Case Else
                Trad_NomMode = Mode
        End Select


    End Function

    Sub Maj_GammesJouables()
        Dim i As Integer
        Dim a As String
        Dim tbl() As String
        Dim ligne As Integer

        ligne = 1
        If GammesCom.Count <> 0 Then
            RAZ_Grid4()
            For i = 0 To GammesCom.Count - 1
                a = Det_NotesGammes(GammesCom.Item(i))
                tbl = Split(GammesCom.Item(i))
                If (tbl(1) = "Maj" And CheckMaj.Checked) Or (tbl(1) = "MinH" And CheckMinH.Checked) _
                    Or (tbl(1) = "MinM" And CheckMinM.Checked) Or (tbl(1) = "PMin" And CheckPentaMin.Checked) _
                    Or (tbl(1) = "Blues" And CheckBlues.Checked) Then
                    '
                    Grid4.Cell(ligne, 1).Text = GammesCom.Item(i)
                    Grid4.Cell(ligne, 2).Text = a
                    ligne = ligne + 1
                End If

            Next i
        End If
    End Sub
    Sub RAZ_Grid4()
        Dim i As Integer
        Dim j As Integer
        '
        For i = 1 To Grid4.Rows - 1
            For j = 1 To Grid4.Cols - 1
                Grid4.Cell(i, j).Text = ""
            Next
        Next
    End Sub
    Function Det_LimiteSélection(Sélection As Integer, NLigne As Integer) As Integer
        Dim i As Integer
        '
        i = Sélection - NLigne
        If i >= 0 Then
            Det_LimiteSélection = (Sélection - NLigne) + 1
        Else
            Det_LimiteSélection = 0
        End If
    End Function

    Private Sub ComboBox1_MouseDown(sender As Object, e As MouseEventArgs)
        OrigineTona = "Maj"
    End Sub

    Sub Maj_TabTonTabCad_ChangeLangue()

        ' Public TableCoursAcc(0 To 2, 0 To 6) As AccordTab ' ligne , colonne
        ' Public CAD_TableCoursAcc(0 To 6) As AccordTab
        ' Calcul des n° de cellule d'un tableau : (N° colonne) + (nbLignes x N° colonne)
        Dim i, j, k As Integer
        Const nbCol = 7

        ' maj Tabton
        ' **********
        For i = 0 To 2
            For j = 0 To 6
                k = j + (nbCol * i)
                TabTons.Item(k).Text = Trim(TableCoursAcc(i, j).Accord)
            Next
        Next
        '
        Refresh()
    End Sub

    Sub ChangeCoulSel(i As Integer)
        Dim m, t, ct As Integer
        Dim a, b As String
        Dim tbl() As String

        Label32.BackColor = Color.Red  ' barre haut
        Label33.BackColor = Color.Blue ' barre bas
        '
        a = Trim(Grid1.Cell(i, 1).Text) ' lecture position
        tbl = Split(a, ".")
        m = Val(Trim(tbl(0)))
        t = Val(Trim(tbl(1)))
        ct = Val(Trim(tbl(2)))
        '
        b = TableEventH(m, t, ct).Tonalité
        '
        tbl = Split(b)
        Select Case tbl(0)
            Case "C"
            Case "C#"
            Case "D"
            Case "D#"
            Case "E"
            Case "F"
            Case "F#"
            Case "G"
            Case "G#"
            Case "A"
            Case "A#"
            Case "B"
            '
            Case "Db"
            Case "Eb"
            Case "Gb"
            Case "Ab"
            Case "Bb"
        End Select
    End Sub
    Sub AffTonaChoisie(tona As String)
        ComboBox1.BackColor = DicoCouleur.Item(tona)
        ComboBox1.ForeColor = DicoCouleurLettre.Item(tona)
    End Sub


    Private Sub ComboBox2_MouseDown(sender As Object, e As MouseEventArgs)
        OrigineTona = "Min"
    End Sub
    Private Sub ComboBox2_SelectedIndexChanged(sender As Object, e As EventArgs)
        'If ChangementLangue = False Then
        'If EnChargement = False Then
        ComboBox1.SelectedIndex = ComboBox2.SelectedIndex
        'Else
        'ComboBox1.SelectedIndex = ComboBox2.SelectedIndex
        'End If
        'End If
    End Sub
    Private Sub CheckMinH_CheckedChanged(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckMinM_CheckedChanged(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckPentaMin_CheckedChanged(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckBlues_CheckedChanged(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub



    Private Sub CheckMaj_CheckedChanged_1(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckMinH_CheckedChanged_1(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckMinM_CheckedChanged_1(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckPentaMin_CheckedChanged_1(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub CheckBlues_CheckedChanged_1(sender As Object, e As EventArgs)
        Maj_GammesJouables()
    End Sub

    Private Sub Panel13_Paint(sender As Object, e As PaintEventArgs)

    End Sub
    Private Sub ComboBox23_SelectedIndexChanged(sender As Object, e As EventArgs)
        If EnChargement = False Then ' And ChangementLangue = False
            ChoixTypeAccord()
            ' CAD_Maj_TableGlobalAcc(Mode_Cadence)
        End If
    End Sub
    Sub ChoixTypeAccord()
        If EnChargement = False Then
            Select Case ComboBox23.SelectedIndex
                Case 0
                    Menu3_notes()
                    'CAD_Menu3_notes()
                Case 1
                    Menu4_notes()
                    'CAD_Menu4_notes()
                Case 2
                    Accords_9e()
                    'CAD_Accords_9e()
                Case 3
                    Accords_4e_11e()
                    'CAD_Accords_4e_11e()
            End Select
        End If
    End Sub


    ' Menu Contextuel Accords/Notes+9
    ' *******************************
    Private Sub EToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EToolStripMenuItem.Click
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '

        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then

            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(2, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = MenuNotes9.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If
        Next i

        'AffichageFiltres("9")
    End Sub
    Sub Accords_9e()
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then

            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            '
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(2, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = MenuNotes9.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            ' Maj_Renversement(i)
            'End If
        Next i

        'AffichageFiltres("9")
    End Sub
    '

    ' Menu Contextuel Accords/3Notes+11
    ' *********************************
    Private Sub EToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles EToolStripMenuItem1.Click
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then

            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(3, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = MenuNotes11.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If

        Next i
        '
        'AffichageFiltres("11")
    End Sub
    Sub Accords_4e_11e()
        Dim i As Integer
        Dim col As Integer
        '
        Dim a As String
        Dim IndexDegré As Integer
        Dim Ligne As Integer
        '
        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then

            Ligne = Det_LigneTableGlobale(i)
            Select Case Ligne
                Case 0
                    col = i
                Case 1
                    col = i - 7
                Case 2
                    col = i - 14
            End Select
            a = TabTonsDegrés.Item(col).Text
            IndexDegré = Det_IndexDegré(a)
            '
            TabTons.Item(i).Text = TableGlobalAcc(3, Ligne, IndexDegré)
            '

            TableCoursAcc(Ligne, IndexDegré).TyAcc = MenuNotes11.Text
            TableCoursAcc(Ligne, IndexDegré).Accord = Trim(TabTons.Item(i).Text)
            '
            'Maj_Renversement(i)
            'End If

        Next i
        '
        'AffichageFiltres("11")
    End Sub

    Private Sub EnregistrerToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EnregistrerToolStripMenuItem.Click
        Me.Cursor = Cursors.WaitCursor
        Enregistrer()
        Me.Cursor = Cursors.Default
    End Sub
    Sub Enregistrer()
        If IndicateurEnreg = False Then
            If Det_NomFich() Then
                IndicateurEnreg = True
                EnregistrerSous()
            End If
        Else
            If File.Exists(FichierEnreg) Then
                EnregistrerSous()
            Else
                If LangueIHM = "fr" Then
                    MessageHV.PContenuMess = "Erreur : votre fichier n'existe plus. Vérifier vos connexions USB. Utilisez Enregistrer Sous"
                Else
                    MessageHV.PContenuMess = "Error : your file no longer exists. Check your USB connections. Use save as"
                End If
                MessageHV.PTypBouton = "OK"
                Cacher_FormTransparents()
                MessageHV.ShowDialog()
            End If
        End If
    End Sub

    Private Sub EnregistrerSousToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EnregistrerSousToolStripMenuItem.Click
        Me.Cursor = Cursors.WaitCursor
        Cacher_FormTransparents()
        If Det_NomFich() Then
            EnregistrerSous()
        End If
        Me.Cursor = Cursors.Default
    End Sub
    Function Det_NomFich() As Boolean ' détermination du chemin fichier pour enregistrement de *.zic3
        Dim FInfo As FileInfo
        Dim NomFichSeul As String
        Dim a As DirectoryInfo

        Det_NomFich = True
        SaveFileDialog1.Filter = "ZIC Files (*.zic3*)|*.zic3"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Exise déjà ...."
        a = My.Computer.FileSystem.GetDirectoryInfo(CheminFichierEnreg)
        SaveFileDialog1.InitialDirectory = a.ToString 'CheminFichierEnreg

        '
        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Enregistrement projet"
        Else
            SaveFileDialog1.Title = "Save project"
        End If
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierEnreg = SaveFileDialog1.FileName
            FInfo = My.Computer.FileSystem.GetFileInfo(FichierEnreg)
            NomFichSeul = My.Computer.FileSystem.GetName(FichierEnreg)
            SaveFileDialog1.FileName = NomFichSeul
            Me.Text = NomFichSeul
            CheminFichierEnreg = FInfo.DirectoryName
        Else
            Det_NomFich = False
        End If
        '
    End Function
    Function Det_NomFich_PDF() As Boolean ' détermination du chemin fichier pour enregistrement de *.zic3
        Dim FInfo As FileInfo
        Dim NomFichSeul As String
        Dim a As DirectoryInfo

        Det_NomFich_PDF = True
        SaveFileDialog1.Filter = "PDF Files (*.pdf*)|*.pdf"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Existe déjà ...."
        a = My.Computer.FileSystem.GetDirectoryInfo(CheminFichierEnreg)
        SaveFileDialog1.InitialDirectory = a.ToString 'CheminFichierEnreg

        '
        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Exporter Grille de Composition"
        Else
            SaveFileDialog1.Title = "Exporter Composition Grid"
        End If
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierEnreg = SaveFileDialog1.FileName
            FInfo = My.Computer.FileSystem.GetFileInfo(FichierEnreg)
            NomFichSeul = My.Computer.FileSystem.GetName(FichierEnreg)
            SaveFileDialog1.FileName = NomFichSeul
            Me.Text = NomFichSeul
            CheminFichierEnreg = FInfo.DirectoryName + "\" + Trim(NomFichSeul)
        Else
            Det_NomFich_PDF = False
        End If
        '
    End Function
    Function Det_NomFichMIDI() As Boolean ' détermination du chemin fichier Accords *.mid
        Dim Finfo As FileInfo

        Det_NomFichMIDI = True
        '
        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Export Accords MIDI"
        Else
            SaveFileDialog1.Title = "MIDI Chords Export"
        End If
        '
        SaveFileDialog1.Filter = "MIDI Files (*.mid*)|*.mid"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Exise déjà ...."
        SaveFileDialog1.InitialDirectory = CheminFichierMIDI
        SaveFileDialog1.FileName = ""
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierMIDI = SaveFileDialog1.FileName
            Finfo = My.Computer.FileSystem.GetFileInfo(FichierMIDI)
            CheminFichierMIDI = Finfo.DirectoryName
        Else
            Det_NomFichMIDI = False
        End If
    End Function
    Function Det_NomCalquesMIDI() As Boolean ' export calques MIDI
        Dim Finfo As FileInfo

        Det_NomCalquesMIDI = True

        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Export Calques MIDI"
        Else
            SaveFileDialog1.Title = "MIDI Layers Export"
        End If
        '
        SaveFileDialog1.Filter = "MIDI Files (*.mid*)|*.mid"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Exise déjà ...."
        SaveFileDialog1.InitialDirectory = CheminFichierCalques
        SaveFileDialog1.FileName = ""
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierCalques = SaveFileDialog1.FileName
            Finfo = My.Computer.FileSystem.GetFileInfo(FichierCalques)
            CheminFichierCalques = Finfo.DirectoryName
        Else
            Det_NomCalquesMIDI = False
        End If
    End Function
    Function Det_NomMarqueursMIDI() As Boolean ' export marquers
        Dim Finfo As FileInfo

        Det_NomMarqueursMIDI = True

        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Export Marqueurs MIDI"
        Else
            SaveFileDialog1.Title = "MIDI Markers Export"
        End If
        SaveFileDialog1.Filter = "MIDI Files (*.mid*)|*.mid"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Exise déjà ...."
        SaveFileDialog1.InitialDirectory = CheminMarqueursMIDI
        SaveFileDialog1.FileName = ""
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierMIDI = SaveFileDialog1.FileName
            Finfo = My.Computer.FileSystem.GetFileInfo(FichierMIDI)
            CheminMarqueursMIDI = Finfo.DirectoryName
        Else
            Det_NomMarqueursMIDI = False
        End If
    End Function

    Function Det_NomFichExportExcel() As Boolean ' détermination du chemin fichier Accords *.mid
        Dim Finfo As FileInfo

        Det_NomFichExportExcel = True
        '
        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Export Compogrid format Excel"
        Else
            SaveFileDialog1.Title = "Export Compogrid Excel Format"
        End If
        '
        SaveFileDialog1.Filter = "Excel Files (*.xls*)|*.xls"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Exise déjà ...."
        SaveFileDialog1.InitialDirectory = CheminFichierExportDoc
        SaveFileDialog1.FileName = ""
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierExportDoc = SaveFileDialog1.FileName
            Finfo = My.Computer.FileSystem.GetFileInfo(FichierExportDoc)
            CheminFichierExportDoc = Finfo.DirectoryName
        Else
            Det_NomFichExportExcel = False
        End If
    End Function
    Function Det_NomFichExportHTM() As Boolean ' détermination du chemin fichier Accords *.mid
        Dim Finfo As FileInfo
        Dim NomFichSeul As String

        Det_NomFichExportHTM = True
        '
        If Module1.LangueIHM = "fr" Then
            SaveFileDialog2.Title = "Export Compogrid format HTML"
        Else
            SaveFileDialog2.Title = "Export Compogrid HTML Format"
        End If
        '
        SaveFileDialog2.Filter = "HTML Files (*.html)|*.html"
        SaveFileDialog2.OverwritePrompt = True ' affichage message "Exise déjà ...."
        SaveFileDialog2.InitialDirectory = CheminFichierExportDoc
        'SaveFileDialog2.FileName = ""
        '
        If SaveFileDialog2.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierExportDoc = SaveFileDialog2.FileName
            Finfo = My.Computer.FileSystem.GetFileInfo(FichierExportDoc)
            CheminFichierExportDoc = Finfo.DirectoryName
            '
            NomFichSeul = My.Computer.FileSystem.GetName(FichierExportDoc)
            SaveFileDialog2.FileName = NomFichSeul
        Else
            Det_NomFichExportHTM = False
        End If
    End Function

    Function Det_NomFichExportPDF() As Boolean ' détermination du chemin fichier Accords *.mid
        Dim Finfo As FileInfo

        Det_NomFichExportPDF = True
        '
        If Module1.LangueIHM = "fr" Then
            SaveFileDialog1.Title = "Export Compogrid format PDF"
        Else
            SaveFileDialog1.Title = "Export Compogrid PDF Format"
        End If
        '
        SaveFileDialog1.Filter = "Excel Files (*.pdf*)|*.pdf"
        SaveFileDialog1.OverwritePrompt = True ' affichage message "Exise déjà ...."
        SaveFileDialog1.InitialDirectory = CheminFichierExportDoc
        SaveFileDialog1.FileName = ""
        '
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            FichierExportDoc = SaveFileDialog1.FileName
            Finfo = My.Computer.FileSystem.GetFileInfo(FichierExportDoc)
            CheminFichierExportDoc = Finfo.DirectoryName
        Else
            Det_NomFichExportPDF = False
        End If
    End Function
    Sub EnregistrerSous()
        Dim a As String
        '
        Dim i As Integer
        Dim m, t, ct As Integer

        Try
            Maj_Présence_Marqueurs() ' pour mettre à jour TableEventH avec les marqueurs qui n'ont pas fait l'objet d'un retour chariot
            If Trim(CheminFichierEnreg) <> "" Then '  est déterminé dans Det_Nomfich
                RichTextBox2.Text = FichierEnreg
                FileOpen(1, FichierEnreg, OpenMode.Output) ' 

                ' MUSIQUE
                ' *******
                WriteLine(1, "PARAM MUSIQUE")
                WriteLine(1, ";Métrique;" + Trim(Métrique.Text))
                WriteLine(1, ";Tonalité;" + Trim(TableEventH(1, 1, 1).Tonalité)) ' on considère la  1ere tonalité dans la mesure où les barres bleu/rouge sont positionnées à cet endroit au moment du chargement - ' old --> Trim(Grid1.Cell(1, 3).Text)) 'Trim(Label47.Text))
                WriteLine(1, ";TonalitéListe;" + Trim(Str(Det_TonalitéDansCombobox1(Trim(TableEventH(1, 1, 1).Tonalité))))) ' enregistrement de l'index de la tonalité dans la liste combobox1
                'WriteLine(1, ";Tempo;" + Trim(Str(Tempo.Value))) n'a plus cours : ancienne barre de transport
                WriteLine(1, ";NomDuSon;" + Trim(NomduSon.Text))

                ' ONGLET TONALITE
                ' ***************
                ' Barre outil
                WriteLine(1, "PARAM ONGLET_TONALITE")
                '
                WriteLine(1, ";Onglet_Courant;" + Trim(Str(OngletCours))) '("TabPage_Tonalité")) ' combo des Types d'accords
                'End If
                WriteLine(1, ";TypAccord;" + Trim(Str(ComboBox23.SelectedIndex))) ' combo des Types d'accords dans onglet Tonalité
                '
                i = ComboBox1.SelectedIndex
                WriteLine(1, ";Tonalité_Majeure;" + Trim(Str(i))) ' combo1
                '
                ' Valeurs des accords et sélection
                ' ********************************
                a = ";Accords;"
                For i = 0 To TabTons.Count - 1
                    a = a + "-" + Trim(TabTons.Item(i).Text) ' valeur des accords
                Next i
                WriteLine(1, a)
                '
                a = ";AccordsVoisins;"
                For i = 0 To TabTonsVoisins.Count - 1
                    a = a + "-" + Trim(TabTonsVoisins.Item(i).Text) ' valeur des accords
                Next i
                WriteLine(1, a)

                '
                ' ONGLET CADENCES
                ' ***************
                ' Barre outil
                WriteLine(1, "PARAM ONGLET_CADENCES")
                '
                ' Valeurs des accords et sélection
                ' ********************************
                WriteLine(1, ";TypAccord;" + Trim(Str(ComboBox6.SelectedIndex))) ' combo des Types d'accords dans onglet Tonalité
                a = ";Accords;"
                For i = 0 To TabCad.Count - 1
                    If i = 0 Then
                        a = a + Trim(TabCad.Item(i).Text)
                    Else
                        a = a + "-" + Trim(TabCad.Item(i).Text) ' valeur des accords
                    End If
                    '
                Next i
                WriteLine(1, a)

                '
                i = ComboBox3.SelectedIndex
                WriteLine(1, ";Cadences_Majeures;" + Trim(Str(i))) ' 
                i = ComboBox4.SelectedIndex
                WriteLine(1, ";Cadences_Mineures;" + Trim(Str(i))) ' 
                '
                '
                a = ";indicCadence;" + Trim(ModeSimple_Cadence)
                WriteLine(1, a)

                ' PARAM EVENTH
                ' ************
                WriteLine(1, "PARAM EVENTH")
                For m = 0 To UBound(TableEventH, 1)
                    For t = 0 To UBound(TableEventH, 2) 'nbTempsMesure '- 1
                        For ct = 0 To UBound(TableEventH, 3) 'nbDivTemps '- 1
                            If TableEventH(m, t, ct).Ligne <> -1 Then ' ' la variable a sert au test, la ligne est écrite ensuite sans utilisé la variable a
                                a = ";" + Trim(Str(TableEventH(m, t, ct).Ligne)) _
                                    + ";" + Trim(TableEventH(m, t, ct).Position) _
                                    + ";" + Trim(TableEventH(m, t, ct).Marqueur) _
                                    + ";" + Trim(TableEventH(m, t, ct).Tonalité) _
                                    + ";" + Trim(TableEventH(m, t, ct).Accord) _
                                    + ";" + Trim(TableEventH(m, t, ct).Gamme) _
                                    + ";" + Trim(TableEventH(m, t, ct).Mode) _
                                    + ";" + Trim(Str(TableEventH(m, t, ct).Degré)) _
                                    + ";" + Trim(TableEventH(m, t, ct).Détails) _
                                    + ";" + Trim(TableEventH(m, t, ct).Vel) _
                                    + ";" + Trim(TableEventH(m, t, ct).Racine)
                                WriteLine(1, Trim(a))

                            End If
                            'End If
                        Next ct
                    Next t
                Next m
                '

                ' PARAM SYSTEME
                ' *************
                WriteLine(1, "PARAM SYSTEM")
                ' 
                a = ";HyperVoicing;"
                a = a + "False"
                'If NotesCommunes.Checked = True Then
                a = ";HyperVoicing;"
                a = a + "True"
                'End If
                WriteLine(1, a)
                '
                a = ";OrigineAccord;" + Trim(Str(OrigineAccord))
                WriteLine(1, a)

                a = ";Début;" + Trim(Str(Transport.Début.Value))
                WriteLine(1, a)           '

                a = ";Terme;" + Trim(Str(Transport.Terme.Value))
                WriteLine(1, a)
                '
                a = ";Compression;" + Trim(Str(Transport.Comp.Value))
                WriteLine(1, a)
                '
                a = ";DuréeFin;" + Trim(Str(Transport.LFinal.Value))
                WriteLine(1, a)
                '
                ' GM/GS
                ' *****
                WriteLine(1, "PARAM GM/GS")
                '
                a = ";Canal;" + Trim(Str(CanalThru.Value))
                WriteLine(1, a)
                a = ";Dyn;" + Trim(Str(PlaybackVelocity.Value))
                WriteLine(1, a)
                '
                a = ";ListGS;" + Trim(Str(ListGS.SelectedIndex))
                WriteLine(1, a)
                a = ";Volume;" + Trim(Str(Vol.Value))
                WriteLine(1, a)
                a = ";Reverb;" + Trim(Str(Reverb.Value))
                WriteLine(1, a)
                a = ";Chorus;" + Trim(Str(Chorus.Value))
                WriteLine(1, a)
                a = ";4Notes;" + Trim(Str(ComboBox12.SelectedIndex))
                WriteLine(1, a)
                a = ";Basse-1;" + Trim(Str(ComboBox11.SelectedIndex))
                WriteLine(1, a)

                'a = ";OnGM;" + Trim(Str(OnGM.Checked)) --> supprimé
                'WriteLine(1, a)
                '
                ' VARIATIONS
                ' **********
                WriteLine(1, "PARAM VARIATIONS")
                a = "BasseMoins" + ";" + BasseMoins12.Checked.ToString + ";" + ComboBox11.SelectedIndex.ToString + ";" + UpDown1.Value.ToString
                WriteLine(1, a)
                a = "4Notes" + ";" + QuatreNotes.Checked.ToString + ";" + ComboBox12.SelectedIndex.ToString + ";" + UpDown2.Value.ToString
                WriteLine(1, a)
                '
                ' STACKING
                ' ********
                a = "STACKING,TRANSP"
                For i = 0 To 4
                    a = a + "," + OCT.Item(i).Value.ToString ' 
                Next i
                WriteLine(1, a)
                '
                a = "STACKING,MUTEVOICE"
                For i = 0 To 4
                    a = a + "," + MUTEVOICE.Item(i).Checked.ToString ' 
                Next i
                WriteLine(1, a)
                '
                a = "STACKING,NOMSON"
                For i = 0 To 4
                    a = a + "," + NOMSON.Item(i).Text ' 
                Next i
                '
                WriteLine(1, a)
                a = "STACKING,PAN"
                For i = 0 To 4
                    a = a + "," + PAN.Item(i).Value.ToString ' 
                Next i
                a = "STACKING,VEL"
                For i = 0 To 4
                    a = a + "," + VEL.Item(i).Value.ToString ' 
                Next i
                WriteLine(1, a)
                a = "STACKING,VOLSTACK"
                For i = 0 To 4
                    a = a + "," + VOLSTACK.Item(i).Value.ToString ' 
                Next i
                WriteLine(1, a)
                a = "STACKING,PRG"
                For i = 0 To 4
                    a = a + "," + PRG.Item(i).SelectedIndex.ToString '
                Next i
                WriteLine(1, a)
                '
                a = "STACKING,CANAUX"
                For i = 0 To 4
                    a = a + "," + CANAUX.Item(i).Value.ToString ' 
                Next i
                WriteLine(1, a)
                '
                a = "STACKING,InitialVoicing," + InitialVoicing.Checked.ToString
                WriteLine(1, a)
                a = "STACKING,MixActivationSM," + MixActivationSM.Checked.ToString
                WriteLine(1, a)
                a = "STACKING,StackMode," + StackMode.Checked.ToString
                WriteLine(1, a)

                ' PIANOROLL
                ' *********
                For i = 0 To nb_PianoRoll - 1
                    a = (listPIANOROLL(i).Enregistrer_ParamMélo())
                    WriteLine(1, a)
                    'a = (listPIANOROLL(i).Enregistrer_NotesMélo(Det_nbMesures))
                    a = (listPIANOROLL(i).Enregistrer_NotesMélo(nbMesures)) ' on sauvegarde tout
                    WriteLine(1, a)
                    For ind = 0 To listPIANOROLL(i).PNbCtrls - 1
                        a = (listPIANOROLL(i).Enregistrer_Ctrls(ind))
                        WriteLine(1, a)
                    Next ind
                    a = (listPIANOROLL(i).Enregistrer_ControlSys())
                    WriteLine(1, a)
                    a = (listPIANOROLL(i).Enregistrer_CtrlPédale())
                    WriteLine(1, a)
                    a = listPIANOROLL(i).Enregistrer_ParamCalquesMIDI
                    WriteLine(1, a)
                    a = listPIANOROLL(i).Enregistrer_CalquesMIDI
                    WriteLine(1, a)
                    'a = listPIANOROLL(i).Enregistrer_Assist1CTRP
                    'WriteLine(1, a)

                Next i

                ' DRUMEDIT
                ' ********
                a = Drums.Sauv_LInst
                WriteLine(1, a)       ' Instruments : liste des instruments
                For i = 0 To NbDrumPrésets - 1       ' Préset :  notes de chaque préset
                    a = Drums.Sauv_LPresetNotes(i)
                    WriteLine(1, a)
                Next
                '
                a = Drums.Sauv_LTimeLPres  ' TimeLine : Liste des Préset dans les mesures
                WriteLine(1, a)
                '
                a = Drums.Sauv_NomPréset ' nom de chaque préset de "A" à "H"
                WriteLine(1, a)

                ' TABLE DE MIXAGE
                ' ***************
                a = Mix.ListVolumesMix() ' volumes
                WriteLine(1, a)
                a = Mix.ListMute()       ' mutes -surrpimé - voir si nécessaire de rajouter un RemoveHandler
                WriteLine(1, a)
                a = Mix.AutorisVolumes   ' autorisation globale d'envoi des volumes
                WriteLine(1, a)

                ' Barre de transport
                ' ******************
                a = Transport.EnregistrerTransport()
                WriteLine(1, a)
                ' MIDI
                ' ****
                WriteLine(1, "PARAM MIDI")
                ' FIN
                ' *******
                WriteLine(1, "PARAM FIN")
                FileClose(1)

            End If
            '
            EcritUneFois = False
            '
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'EnregistrerSous' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
            'Dim result As DialogResult = MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
        End Try
    End Sub
    Private Function Det_nbMesures() As Integer
        Dim i As Integer
        Dim tbl() As String

        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) = "" Then
                Exit For
            End If
        Next
        Dim a = Trim(Grid1.Cell(i - 1, 1).Text)
        tbl = a.Split(".")
        Return Val(tbl(0))
        'Return Trim(Grid1.Cell(i - 1, 1).Text)
    End Function

    Function Det_TonalitéDansCombobox1(tona As String) As Integer
        Dim i As Integer
        Select Case tona
            Case "C Maj"
                i = 0
            Case "C# Maj"
                i = 1
            Case "D Maj"
                i = 2
            Case "D# Maj"
                i = 3
            Case "E Maj"
                i = 4
            Case "F Maj"
                i = 5
            Case "F# Maj"
                i = 6
            Case "G Maj"
                i = 7
            Case "G# Maj"
                i = 8
            Case "A Maj"
                i = 9
            Case "A# Maj"
                i = 10
            Case "B Maj"
                i = 11
        End Select
        '
        Det_TonalitéDansCombobox1 = i
    End Function
    'Function Det_ColGrid2Grid3() As Integer
    '    Select Case DerGridCliquée
    '        Case GridCours.Grid2
    '        Case GridCours.Grid3
    '    End Select
    '
    '   End Function
    Sub CouperJouerAccord()
        Dim i, j, n As Integer

        'Tempo_StopJeuAccord.Enabled = False
        'Tempo_StopJeuAccord.Stop()I deractivecell.col
        Try
            ' Fin jeu d'un accord de grid2
            ' ****************************
            If AccordAEtéJoué = True Then
                For i = 0 To UBound(AccordJouerPiano.Notes)
                    If AccordJouerPiano.Notes(i) <> -1 Then
                        j = AccordJouerPiano.Notes(i)
                        LabelPiano.Item(j).BackColor = AccordJouerPiano.OldBackColor(i)
                        LabelPiano.Item(j).Text = ""
                    End If
                Next i
                AccordAEtéJoué = False
                '
                For i = 0 To UBound(AccordJouerPiano.Notes)
                    If AccordJouerPiano.Notes(i) <> -1 Then
                        n = AccordJouerPiano.Notes(i)
                        SortieMidi.Item(ChoixSortieMidi).SendNoteOff(CanalThru.Value - 1, n, 64) ' 64 = vélocité de relachement
                    End If
                Next i
                'SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()
                '
            End If
        Catch
            MsgBox("CouperJouer")
        End Try
    End Sub
    Sub ToutesNotesOff()
        Dim i As Integer
        Dim canal As Byte
        '
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If

        SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()
        '
        ' Pistes 1 à 16
        ' *************
        For canal = 0 To 15
            For i = 0 To 127
                SortieMidi.Item(ChoixSortieMidi).SendNoteOn(canal, i, 0)
            Next i
        Next canal

        '


        ' Batterie
        ' ********
        'For i = 0 To 127
        'SortieMidi.Item(ChoixSortieMidi).SendNoteOff(9, i, 0)
        'Next i

    End Sub
    Sub CouperAccord()
        Dim i, j As Integer

        'Tempo_StopJeuAccord.Enabled = False
        'Tempo_StopJeuAccord.Stop() 'I deractivecell.col
        Try
            ' Fin jeu d'un accord de grid2
            ' ****************************
            If AccordAEtéJoué = True Then
                For i = 0 To UBound(AccordJouerPiano.Notes)
                    If AccordJouerPiano.Notes(i) <> -1 Then
                        j = AccordJouerPiano.Notes(i)
                        LabelPiano.Item(j).BackColor = AccordJouerPiano.OldBackColor(i)
                        LabelPiano.Item(j).ForeColor = Color.Blue
                    End If
                Next i
                AccordAEtéJoué = False

                SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()

                Fermer_MIDI()

                '
            End If
        Catch
            MsgBox("CouperJouer")
        End Try
    End Sub
    Private Function Det_Position_from_Grid3(col As Integer) As String ' cel est la cellules Acticell sur lquelle on a cliqué
        Dim i, j As Integer
        Dim m, t, ct As Integer
        Dim a As String


        ' détermination de la mesure
        ' **************************
        '
        j = col
        '
        For i = j To 0 Step -1
            a = Grid3.Cell(1, i).Text
            If Trim(a) <> "" Then
                m = Val(Trim(a))
                Exit For
            End If
        Next i
        ' détermination des index t et ct
        ' *******************************
        ct = 1
        For i = j To 0 Step -1
            a = Grid3.Cell(2, i).Text
            If Trim(a) <> "" Then
                t = Trim(a)
                Exit For
            End If
            ct = ct + 1 ' détermination du contretemps
        Next
        Det_Position_from_Grid3 = Trim(Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct)))
    End Function


    Private Sub NouveauToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles NouveauToolStripMenuItem.Click

    End Sub
    Function NouveauProjet() As Integer
        Dim i As Integer

        'If EcritUneFois = True Then
        i = NouveauConfirm() ' la question est : voulez-vous enregistrez préalablement votre projet ?
        Select Case i
            Case DialogResult.Yes
                Enregistrer()
                Nouv("4/4")
                Vue_Réduite()
            Case DialogResult.No
                Nouv("4/4")
                Vue_Réduite()
            Case DialogResult.Cancel ' on ne fait rien
        End Select
        Return i
    End Function
    Function NouveauConfirm() As Integer
        Dim message As String
        Dim titre As String

        Position_Transport()

        NouveauConfirm = False
        If Module1.LangueIHM = "fr" Then
            message = "Voulez-vous sauvegarder votre projet actuel ?"
            titre = "HyperVoicing"
        Else
            message = "Do you want to save your project ?"
            titre = "HyperVoicing"
        End If

        NouveauConfirm = MessageBox.Show(message, titre, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question)

    End Function
    Function CréationFichierTexteCalquesMIDI(NomFichierCalques As String) As String
        Dim h, i, k, n As Integer
        Dim m, t, ct As Integer
        Dim a, b, c, d, notes As String
        Dim ligne1 As String = ""
        Dim tbl1() As String = Nothing
        Dim tbl2() As String = Nothing
        '
        Dim FIN As Double
        Dim NPiste As Integer
        '
        Dim DuréeFIN As String
        Dim LongueurFinDerMesure As Integer = 0
        Dim nM As Integer = 0
        Dim nMCycle As Integer = 0
        Dim Position As String
        Dim PositionDansCycle As String = ""
        Dim tt As New TT
        '
        Dim Sortir1 As Boolean = False
        Dim Sortir2 As Boolean = False
        '
        Dim DernièreNoteCycle As String
        Dim Clef1 As String


        CréationFichierTexteCalquesMIDI = ""
        Try
            Clef1 = Clef
            '
            CréationFichierTexteCalquesMIDI = ""
            ' création du fichier texte de base
            ' *********************************
            '
            NPiste = 2 ' Une piste accord, Une piste gamme
            '
            a = Création_CTemp() ' My.Application.Info.DirectoryPath
            a = a + "\" + "CalquesMIDI.txt" ' prendre en compte le nom du fichier

            If My.Computer.FileSystem.FileExists(a) Then
                My.Computer.FileSystem.DeleteFile(a)
            End If
            '
            Dim fileWriter = My.Computer.FileSystem.OpenTextFileWriter(a, True)
            '
            fileWriter.WriteLine("NomFichier;" + Trim(NomFichierCalques))
            fileWriter.WriteLine("Tempo;" + Trim(Str(Transport.Tempo.Value)))
            fileWriter.WriteLine("Métrique;" + Trim(Métrique.Text))
            '
            '
            FIN = -1
            DuréeFIN = "0"
            LongueurFinDerMesure = EndMeasureNumber.Value
            '
            ' Rétablissement de la valeur de Terme dans la barre de Transprt si Terme pointe sur une valeur vide d'accord
            ' **********************************************************************************************************
            'ii = Det_DerEventH2()
            'If Me.Début.Value <= ii Then
            'If ii < Transport.Terme.Value Then
            'Transport.Terme.Value = Convert.ToDecimal(ii)
            'Transport.Terme.BackColor = Color.Orange
            'End If
            '
            For k = 0 To NPiste - 1 '
                Select Case k
                    Case 0
                        If Module1.LangueIHM = "fr" Then
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Calque_Accords(Muter la piste)")
                        Else
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Chords_Layer(Mute track")
                        End If
                    Case 1
                        If Module1.LangueIHM = "fr" Then
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Calque_Gammes(Muter la piste)")
                        Else
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Scales_Layer(Mute track)")
                        End If
                End Select
                '
                ' Déterminer m1,t1,ct1 de début et m2,t2,ct2
                ' ******************************************
                Dim m1, t1, ct1, m2, t2, ct2, m3 As Integer
                m1 = CInt(Transport.Début.Value)
                t1 = 1
                ct1 = 1

                m2 = CInt(Transport.Terme.Value)
                t2 = 1
                ct2 = 1
                '
                m3 = 0 ' pour que, au moment de l'importation dans Cubase, les pistes se positionnent au déhut du projet quel que soit la valeur du délimiteur Transport.
                For m = m1 To m2
                    m3 = m3 + 1
                    For t = t1 To t2
                        For ct = t1 To ct2
                            If TableEventH(m, t, ct).Ligne <> -1 Then
                                Position = Trim(Str(m3)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                                '
                                tbl1 = Split(TableEventH(m, t, ct).Tonalité)
                                Clef = Det_Clef(Trim(tbl1(0)))
                                Maj_TabNotes(Clef)
                                '
                                Select Case k
                                    Case 0 ' traitement Accord
                                        fileWriter.WriteLine("Accord : " + TableEventH(m, t, ct).Accord)
                                        notes = Det_NotesAccord(TableEventH(m, t, ct).Accord)
                                        tbl2 = Split(notes, "-")
                                    Case 1 ' traitement Gammes
                                        d = TableEventH(m, t, ct).Gamme
                                        fileWriter.WriteLine("Gamme : " + TableEventH(m, t, ct).Gamme)
                                        notes = Det_NotesGammes(TableEventH(m, t, ct).Gamme)
                                        tbl2 = Split(notes)
                                End Select
                                '
                                For i = 0 To UBound(tbl2)
                                    tt = DicoNotes(tbl2(i)) '  -- Public DicoNotes As New Dictionary(Of String, TT)
                                    For h = 0 To UBound(tt.Toctave) ' tt.Toctave contient les N° MIDI d'une note sur toute les octaves
                                        n = tt.Toctave(h)
                                        If n < 128 Then
                                            ligne1 = "Note;" + Trim(Str(k)) + ";" + Trim(Str(16)) + ";" ' canal pour les calques MIDI = 16
                                            ligne1 = ligne1 + Trim(Str(n)) + ";" ' 16;64"
                                            b = DébutEVT(Position) + ";"

                                            DernièreNoteCycle = Det_DerNoteCycle2()
                                            If Position <> DernièreNoteCycle Then
                                                c = DuréeNote(TableEventH(m, t, ct).Ligne, False) + ";"
                                            Else
                                                c = Det_DuréeFIN2(Trim(Position), Val(b), False) + ";"
                                            End If
                                            ligne1 = ligne1 + Trim(b) + Trim(c) + Trim(Str(1)) ' Str(1) : Vélocité pour les calques MIDI = 1
                                            '
                                            fileWriter.WriteLine(ligne1)
                                        End If
                                    Next h
                                Next i
                                ligne1 = ""
                            End If
                            '
                        Next ct
                    Next t
                Next m
            Next k
            '
            fileWriter.Close()
            Clef = Clef1
            '
            ' Remise du chemin du fichier à la procédure appelante
            ' ****************************************************
            CréationFichierTexteCalquesMIDI = a ' remise du chemin + fichier
            'End If ' cce end if corresspon à If Me.Début.Value <= ii Then (vérification de Début > Terme)
            '
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'CréationFichierTexteCalquesMIDI' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try
    End Function
    Function CréationFichierTexteCalquesMIDI2(NomFichierCalques As String) As String
        Dim h, i, k, n As Integer
        Dim m, t, ct As Integer
        Dim a, b, c, d, notes As String
        Dim ligne1 As String = ""
        Dim tbl1() As String = Nothing
        Dim tbl2() As String = Nothing
        '
        Dim FIN As Double
        Dim NPiste As Integer
        '
        Dim DuréeFIN As String
        Dim LongueurFinDerMesure As Integer = 0
        Dim Position As String
        Dim tt As New TT
        '
        '
        Dim DernièreNoteCycle As String
        Dim Clef1 As String
        Dim TyCalques As String


        CréationFichierTexteCalquesMIDI2 = ""
        Try
            TyCalques = "Gammes"
            Clef1 = Clef
            '
            CréationFichierTexteCalquesMIDI2 = ""
            ' création du fichier texte de base
            ' *********************************
            '
            Select Case TyCalques
                Case "Accords", "Gammes"
                    NPiste = 1 ' Une piste accord ou Une piste gamme
                Case "Accords+Gammes"
                    NPiste = 2 ' Une piste accord et Une piste gamme
            End Select
            '
            a = Création_CTemp() ' My.Application.Info.DirectoryPath
            a = a + "\" + "CalquesMIDI.txt" ' prendre en compte le nom du fichier

            If My.Computer.FileSystem.FileExists(a) Then
                My.Computer.FileSystem.DeleteFile(a)
            End If
            '
            Dim fileWriter = My.Computer.FileSystem.OpenTextFileWriter(a, True)
            '
            fileWriter.WriteLine("NomFichier;" + Trim(NomFichierCalques))
            fileWriter.WriteLine("Tempo;" + Trim(Str(Tempo.Value)))
            fileWriter.WriteLine("Métrique;" + Trim(Métrique.Text))
            '
            '
            FIN = -1
            DuréeFIN = "0"
            LongueurFinDerMesure = EndMeasureNumber.Value
            '
            For k = 0 To NPiste - 1 '
                Select Case TyCalques
                    Case "Accords"
                        If Module1.LangueIHM = "fr" Then
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Calque_Accords(Muter la piste)")
                        Else
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Chords_Layer(Mute track")
                        End If
                    Case "Gammes"
                        If Module1.LangueIHM = "fr" Then
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Calque_Gammes(Muter la piste)")
                        Else
                            fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Scales_Layer(Mute track)")
                        End If
                    Case "Accords+Gammes"
                        Select Case k
                            Case 0
                                If Module1.LangueIHM = "fr" Then
                                    fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Calque_Accords(Muter la piste)")
                                Else
                                    fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Chords_Layer(Mute track")
                                End If
                            Case 1
                                If Module1.LangueIHM = "fr" Then
                                    fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Calque_Gammes(Muter la piste)")
                                Else
                                    fileWriter.WriteLine("NomPiste;" + Trim(Str(k)) + ";Scales_Layer(Mute track)")
                                End If
                        End Select
                End Select
                '
                For m = 0 To UBound(TableEventH, 1)
                    For t = 0 To UBound(TableEventH, 2) '- 1
                        For ct = 0 To UBound(TableEventH, 3)
                            If TableEventH(m, t, ct).Ligne <> -1 Then
                                Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                                '
                                tbl1 = Split(TableEventH(m, t, ct).Tonalité)
                                Clef = Det_Clef(Trim(tbl1(0)))
                                Maj_TabNotes(Clef)
                                '
                                Select Case TyCalques
                                    Case "Accords"
                                        fileWriter.WriteLine("Accord : " + TableEventH(m, t, ct).Accord)
                                        notes = Det_NotesAccord(TableEventH(m, t, ct).Accord)
                                        tbl2 = Split(notes, "-")
                                    Case "Gammes"
                                        d = TableEventH(m, t, ct).Gamme
                                        fileWriter.WriteLine("Gamme : " + TableEventH(m, t, ct).Gamme)
                                        notes = Det_NotesGammes(TableEventH(m, t, ct).Gamme)
                                        tbl2 = Split(notes)
                                    Case "Accords+Gammes"
                                        Select Case k
                                            Case 0 ' traitement Accord
                                                fileWriter.WriteLine("Accord : " + TableEventH(m, t, ct).Accord)
                                                notes = Det_NotesAccord(TableEventH(m, t, ct).Accord)
                                                tbl2 = Split(notes, "-")
                                            Case 1 ' traitement Gammes
                                                d = TableEventH(m, t, ct).Gamme
                                                fileWriter.WriteLine("Gamme : " + TableEventH(m, t, ct).Gamme)
                                                notes = Det_NotesGammes(TableEventH(m, t, ct).Gamme)
                                                tbl2 = Split(notes)
                                        End Select
                                End Select
                                '
                                For i = 0 To UBound(tbl2)
                                    tt = DicoNotes(tbl2(i)) '  -- Public DicoNotes As New Dictionary(Of String, TT)
                                    For h = 0 To UBound(tt.Toctave) ' tt.Toctave contient les N° MIDI d'une note sur toute les octaves
                                        n = tt.Toctave(h)
                                        If n < 128 Then
                                            ligne1 = "Note;" + Trim(Str(k)) + ";" + Trim(Str(16)) + ";" ' canal pour les calques MIDI = 16
                                            ligne1 = ligne1 + Trim(Str(n)) + ";" ' 16;64"
                                            b = DébutEVT(Position) + ";"

                                            DernièreNoteCycle = Det_DerNoteCycle2()
                                            If Position <> DernièreNoteCycle Then
                                                c = DuréeNote2(TableEventH(m, t, ct).Ligne) + ";"
                                            Else
                                                c = Det_DuréeFIN3(Trim(Position), Val(b)) + ";"
                                            End If
                                            ligne1 = ligne1 + Trim(b) + Trim(c) + Trim(Str(1)) ' Str(1) : Vélocité pour les calques MIDI = 1
                                            '
                                            fileWriter.WriteLine(ligne1)
                                        End If
                                    Next h
                                Next i
                                ligne1 = ""
                            End If
                            '
                        Next ct
                    Next t
                Next m
            Next k
            '
            fileWriter.Close()
            Clef = Clef1
            '
            ' Remise du chemin du fichier à la procédure appelante
            ' ****************************************************
            CréationFichierTexteCalquesMIDI2 = a ' remise du chemin + fichier
            '
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'CréationFichierTexteCalquesMIDI' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Function



    Function Det_NbTempsSurCycle() As Integer ' fonction utilisée par le métronome
        Dim k As Integer

        Det_NbTempsSurCycle = 0
        k = nbMesuresUtiles
        If Répéter.Checked Then
            k = (Terme.Value - Début.Value) + 1 ' calcul du nombre de mesures par cycle
        End If
        '
        Select Case Dénominateur
            Case 4
                Det_NbTempsSurCycle = k * Numérateur
            Case 8

                Select Case Numérateur
                    Case 6, 9, 12
                        Det_NbTempsSurCycle = k * (Numérateur / 3)
                    Case 7
                        Det_NbTempsSurCycle = (k * 6) + (k * 8)
                End Select

        End Select
    End Function
    Function Maj_NotesCommunes(Renv As String, Racine As String) As String
        Dim i, j, lg1, lg2 As Integer
        Dim tbl() As String
        Dim Octave As Integer
        Dim indRacine As Integer
        Dim CalcOctave As Integer
        Dim Retour As String
        Dim NombreNotesAccord As Integer
        Dim a As String

        Retour = ""
        Maj_NotesCommunes = ""
        '
        ' Traitement de la Racine : Séparation Note / Octave de la racine pour le calcul
        ' ******************************************************************************
        a = Trim(Racine)

        '
        If Mid(a, Len(a) - 1, 1) <> "-" Then
            lg1 = Len(a) - 1
            lg2 = 1
        Else
            lg1 = Len(a) - 2
            lg2 = 2
        End If
        '
        Racine = Mid(a, 1, lg1) '
        'Octave = Microsoft.VisualBasic.Right(NoteRacine.Text, lg2)
        Octave = Microsoft.VisualBasic.Right(a, lg2)


        '
        tbl = Split(Renv, "-")
        NombreNotesAccord = UBound(tbl) + 1

        Init_Tessiture()
        '
        ' Maj des notes de l'accord dans le tableau Tessiture
        ' ***************************************************
        For i = 0 To UBound(tbl)
            For j = 0 To UBound(Tessiture)
                If tbl(i) = Tessiture(j).NoteTessiture Then
                    Tessiture(j).NoteAccord = tbl(i)
                End If
            Next j
        Next i
        '
        ' Détermination de l'index de la racine dans le tableau Tessiture
        ' ***************************************************************
        For i = 0 To UBound(Tessiture)
            If Racine = Tessiture(i).NoteTessiture Then
                indRacine = i
                Exit For
            End If
        Next i
        '
        If Racine = tbl(0) Then indRacine = indRacine + 1 ' à essayer pour confirmer - le 14/06/2024
        '
        ' Détermination du renversement avec l'octave
        ' *******************************************

        CalcOctave = indRacine
        For i = indRacine To UBound(Tessiture)
            If Tessiture(i).NoteAccord <> "" Then
                Retour = Trim(Retour + " " + Tessiture(i).NoteAccord + Trim(Str(Octave)))
            End If
            ' pour détermination d'un changement d'octave
            CalcOctave = CalcOctave + 1
            If CalcOctave > 11 Then
                Octave = Octave + 1 ' changement d'octave
                CalcOctave = 0
            End If
            '
            tbl = Split(Retour)
            '
        Next i
        Retour = ""
        For i = 0 To NombreNotesAccord - 1
            Retour = Retour + " " + tbl(i)
        Next
        '
        Maj_NotesCommunes = Trim(Retour)
    End Function
    Sub Init_Tessiture()
        Dim i As Integer

        For i = 0 To 31
            Tessiture(i).NoteTessiture = TabNotesD(i) ' la calcul de l'autovoicing se fait toujours en #
            Tessiture(i).NoteAccord = ""
        Next

    End Sub


    Function Det_DerNoteCycle(nMCycle As Integer) As String
        Dim m, t, ct As Integer
        Dim sortir As Boolean = False
        Dim a As String
        Dim nM As Integer
        Dim PFIN As Integer

        '
        Det_DerNoteCycle = ""
        For m = UBound(TableEventH, 1) To 0 Step -1
            a = ""
            For t = UBound(TableEventH, 2) To 0 Step -1
                For ct = UBound(TableEventH, 3) To 0 Step -1
                    If TableEventH(m, t, ct).Ligne <> -1 Then
                        nM = m '+ ((EndMeasureNumber.Value - 2))
                        PFIN = Terme.Value
                        If PFIN < nM Then
                            Det_DerNoteCycle = Trim(Str(PFIN + nMCycle) + " " + Trim(Str(t)) + " " + Trim(Str(ct)))
                        Else
                            Det_DerNoteCycle = Trim(Str(nM + nMCycle) + " " + Trim(Str(t)) + " " + Trim(Str(ct)))
                        End If
                        sortir = True
                        Exit For
                    End If
                Next ct
                If sortir Then
                    Exit For
                End If
            Next t
            If sortir Then
                Exit For
            End If
        Next m
        '
    End Function
    Function Det_DerNoteCycle2() As String
        Dim m, mm, t, ct As Integer
        Dim sortir As Boolean = False
        Dim a As String

        '
        Det_DerNoteCycle2 = ""
        If Répéter.Checked = True Then
            mm = Terme.Value
        Else
            mm = UBound(TableEventH, 1)
        End If
        For m = mm To 0 Step -1
            a = ""
            For t = UBound(TableEventH, 2) To 0 Step -1
                For ct = UBound(TableEventH, 3) To 0 Step -1
                    If TableEventH(m, t, ct).Ligne <> -1 Then
                        Det_DerNoteCycle2 = Trim(Trim(Str(m) + "." + Trim(Str(t)) + "." + Trim(Str(ct))))
                        sortir = True
                        Exit For
                    End If
                Next ct
                If sortir Then
                    Exit For
                End If
            Next t
            If sortir Then
                Exit For
            End If
        Next m
        '
    End Function
    Function Det_DerNoteCycle3() As String
        Dim m, mm, t, ct As Integer
        Dim sortir As Boolean = False
        Dim a As String

        '
        Det_DerNoteCycle3 = ""
        'If Répéter.Checked = True Then
        mm = Transport.Terme.Value
        'Else
        'mm = UBound(TableEventH, 1)
        'End If
        For m = mm To 0 Step -1
            a = ""
            For t = UBound(TableEventH, 2) To 0 Step -1
                For ct = UBound(TableEventH, 3) To 0 Step -1
                    If TableEventH(m, t, ct).Ligne <> -1 Then
                        Det_DerNoteCycle3 = Trim(Trim(Str(m) + "." + Trim(Str(t)) + "." + Trim(Str(ct))))
                        sortir = True
                        Exit For
                    End If
                Next ct
                If sortir Then
                    Exit For
                End If
            Next t
            If sortir Then
                Exit For
            End If
        Next m
    End Function
    Function Det_DerNoteTotalité() As String
        Dim m, t, ct, mm As Integer
        Dim sortir As Boolean = False
        Dim a As String
        Dim PFIN As Integer

        '
        Det_DerNoteTotalité = ""
        For m = UBound(TableEventH, 1) To 0 Step -1
            a = ""
            For t = UBound(TableEventH, 2) To 0 Step -1
                For ct = UBound(TableEventH, 3) To 0 Step -1
                    If TableEventH(m, t, ct).Ligne <> -1 Then
                        mm = m
                        PFIN = Terme.Value
                        If Répéter.Checked = True Then
                            mm = (m * ((LoopNumber.Value)) + ((EndMeasureNumber.Value - 1)) * (LoopNumber.Value - 1))
                            PFIN = (Terme.Value * ((LoopNumber.Value))) '+ ((EndMeasureNumber.Value - 1)) * (LoopNumber.Value - 1))
                        End If
                        If PFIN < mm Then '
                            Det_DerNoteTotalité = Trim(Str(PFIN)) + " " + Trim(Str(t)) + " " + Trim(Str(ct))
                        Else
                            Det_DerNoteTotalité = Trim(Str(mm)) + " " + Trim(Str(t)) + " " + Trim(Str(ct))
                        End If

                        sortir = True
                        Exit For
                    End If
                Next ct
                If sortir Then
                    Exit For
                End If
            Next t
            If sortir Then
                Exit For
            End If
        Next m
        '
    End Function
    Sub Création_MidiFile(CheminFichierText As String, NbPistes As Integer)
        Dim Ligne As String
        Dim tbl As Object
        Dim i As Integer = 0

        '   
        ' création du fichier MIDI
        ' ************************
        Dim Midifile1 As New MidifileX(96, NbPistes, nbMesuresUtiles)
        'a = My.Application.Info.DirectoryPath
        'a = a + "\" + "fichemidiHypVoice.txt"
        'FileOpen(1, a, OpenMode.Input)
        Dim fileReader = My.Computer.FileSystem.OpenTextFileReader(CheminFichierText)

        Try
            Do Until fileReader.Peek = -1
                Ligne = fileReader.ReadLine()
                i = i + 1 ' compteur pour debugguer
                tbl = Split(Ligne, ";")
                Select Case tbl(0)
                    Case "NomFichier"
                        Midifile1.AddNomFichier(tbl(1))
                    Case "Tempo"
                        Midifile1.AddTempo(Val(tbl(1)))
                    Case "NomPiste" '             piste    nompiste                     
                        Midifile1.AddNomPiste(Val(tbl(1)), tbl(2))
                    Case "Programme" '           piste       Canal       Début      n° PRG
                        Midifile1.AddProgram(Val(tbl(1)), Val(tbl(2)), Val(tbl(3)), Val(tbl(4)))
                    Case "Controleur" '     piste       Canal        Début       N° ctrl      Valeur ctrl
                        Midifile1.AddCTRL(Val(tbl(1)), Val(tbl(2)), Val(tbl(3)), Val(tbl(4)), Val(tbl(5)))
                    Case "Note"
                        '                      piste      canal          note        debut        durée         velo
                        Midifile1.AddNote(Val(tbl(1)), Val(tbl(2)), Val(tbl(3)), Val(tbl(4)), Val(tbl(5)), Val(tbl(6)))
                    Case "Marqueur"
                        If Trim(tbl(1)) <> "" Then
                            Midifile1.AddMarqueur(tbl(1), Val(tbl(2)))
                        End If
                    Case "Texte"
                        Midifile1.AddTexte(Val(tbl(1)), tbl(2), Val(tbl(3)))
                    Case "Métrique"
                        Midifile1.AddMétrique(Trim(tbl(1)))
                End Select
            Loop
            fileReader.Close()
            Midifile1.ConstruiredMidFile() ' construction du fichier MIDI
            '
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        '
    End Sub
    Sub RAZ_Marqueurs_dans_Tableventh()
        Dim m, t, ct As Integer
        For m = 1 To UBound(TableEventH, 1)
            For t = 0 To UBound(TableEventH, 2)
                For ct = 0 To UBound(TableEventH, 3)
                    TableEventH(m, t, ct).Marqueur = ""
                Next ct
            Next t
        Next m
    End Sub

    Sub Maj_Présence_Marqueurs()
        Dim i As Integer
        Dim tbl() As String
        Dim m, t, ct As Integer

        Présence_Marqueur = False ' Présence Marqueur est une variable globale (pour diverses raisons, on a choisit que Maj_Présence_Marqueurs ne soit pas une fonction qui retourne un booleén)
        '
        RAZ_Marqueurs_dans_Tableventh()
        '
        Grid1.AutoRedraw = False
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 2).Text) <> "" And Grid1.Cell(i, 2).BackColor <> Couleur_Marqueurs Then ' présence marqueur
                If Trim(Grid1.Cell(i, 1).Text) <> "" Then ' présence position ?
                    Présence_Marqueur = True
                    '
                    tbl = Split(Trim(Grid1.Cell(i, 1).Text), ".")
                    m = Val(tbl(0))
                    t = Val(tbl(1))
                    ct = Val(tbl(2))
                    '
                    TableEventH(m, t, ct).Marqueur = Trim(Grid1.Cell(i, 2).Text)
                    '
                    Grid1.Cell(i, 2).BackColor = Color.Green
                    Grid1.Cell(i, 2).ForeColor = Color.Yellow
                Else
                    If i = 1 Then
                        Grid1.Cell(i, 2).BackColor = Color.Red
                        Grid1.Cell(i, 2).ForeColor = Color.White
                    Else
                        Grid1.Cell(i, 2).BackColor = Couleur_Marqueurs
                        Grid1.Cell(i, 2).ForeColor = Color.Black
                    End If
                End If
            Else
                If i = 1 Then
                    Grid1.Cell(i, 2).BackColor = Color.Red
                    Grid1.Cell(i, 2).ForeColor = Color.White
                Else
                    Grid1.Cell(i, 2).BackColor = Couleur_Marqueurs
                    Grid1.Cell(i, 2).ForeColor = Color.Black
                End If
            End If
        Next i
        Grid1.Refresh()
        Grid1.AutoRedraw = True
        '
    End Sub


    Function Taille_Mesure() As Integer ' taille d'une mesure en double croches en fonction de la métrique
        Dim tbl() As String
        Dim Numérateur As Integer
        Dim Dénominateur As Integer

        tbl = Split(Métrique.Text, "/")
        Numérateur = Trim(tbl(0))
        Dénominateur = Trim(tbl(1))

        Taille_Mesure = 4
        Select Case Dénominateur
            Case "4"
                Taille_Mesure = 4 * Val(Numérateur)
            Case "8"
                Taille_Mesure = 2 * Val(Numérateur)
        End Select
    End Function

    Function DébutEVT(Position As String) As String
        Dim Pi As String
        Dim Tbli() As String
        Dim mi, ti, cti As Integer
        Dim Dénominateur As String
        Dim Tmesure As Integer
        Dim tbl() As String
        '
        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        tbl = Split(Métrique.Text, "/")
        Dénominateur = Trim(tbl(1))
        '
        Pi = Position 'Grid1.Cell(ligne, 1).Text ' leture de la position
        Tbli = Split(Pi, ".")
        '
        mi = Val(Tbli(0)) '- (Début.Value - 1)
        ti = Tbli(1)
        cti = Tbli(2)
        '
        DébutEVT = "0"
        Select Case Dénominateur
            Case "4"
                DébutEVT = Str(((mi - 1) * Tmesure) + ((ti - 1) * 4) + ((cti - 1) * 2)) ' 4/4

            Case "8"
                DébutEVT = Str(((mi - 1) * Tmesure) + ((ti - 1) * 6) + ((cti - 1) * 2)) ' 12/8
        End Select
        DébutEVT = Trim(DébutEVT)
    End Function
    Function DébutEVT2(Position As String) As String
        Dim Pi As String
        Dim Tbli() As String
        Dim mi, ti, cti As Integer
        Dim Dénominateur As String
        Dim Tmesure As Integer
        Dim tbl() As String
        '
        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        tbl = Split(Métrique.Text, "/")
        Dénominateur = Trim(tbl(1))
        '
        Pi = Position 'Grid1.Cell(ligne, 1).Text ' leture de la position
        Tbli = Split(Pi, ".")
        '
        mi = Val(Tbli(0)) - (Transport.Début.Value - 1)
        ti = Tbli(1)
        cti = Tbli(2)
        '
        DébutEVT2 = "0"
        Select Case Dénominateur
            Case "4"
                DébutEVT2 = Str(((mi - 1) * Tmesure) + ((ti - 1) * 4) + ((cti - 1) * 2)) ' 4/4

            Case "8"
                DébutEVT2 = Str(((mi - 1) * Tmesure) + ((ti - 1) * 6) + ((cti - 1) * 2)) ' 12/8

        End Select
        DébutEVT2 = Trim(DébutEVT2)
    End Function
    Function DuréeNote(ligne As Integer, Compact As Boolean) As String
        ' utiliser grid1 pour faire le delta
        Dim Pi As String
        Dim Pj As String
        Dim Tbli() As String
        Dim Tblj() As String
        Dim mi, ti, cti As Integer
        Dim mj, tj, ctj As Integer
        Dim i, j As Integer
        Dim Dénominateur As String
        Dim Tmesure As Integer
        Dim tbl() As String
        Dim Réduction As Integer
        Dim lg As Integer

        Réduction = Transport.Comp.Value ' réduction de la longueur des notes 

        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        tbl = Split(Métrique.Text, "/")
        Dénominateur = Trim(tbl(1))
        '
        DuréeNote = "16"
        If ligne + 1 <= Grid1.Rows - 1 Then
            Pi = Grid1.Cell(ligne, 1).Text
            Pj = Grid1.Cell(ligne + 1, 1).Text
            If Pj = "" Then ' si dernier accord, alors sa longueur est de 1 mesure
                '  "15" = DuréeNote (dernière note) -  Remarque importante : on retire une division pour bien séparer le message NoteOff du message NoteON suivante quand il s'agit de la même note
                lg = 16
                If Réduction > 0 And Réduction <= lg / 2 Then
                    DuréeNote = ((16) - Réduction).ToString
                Else
                    If Réduction <> 0 And Réduction > lg / 2 Then
                        DuréeNote = (16 / 2).ToString
                    End If
                End If
            Else
                '
                Tbli = Split(Pi, ".")
                Tblj = Split(Pj, ".")
                '
                mi = Tbli(0)
                ti = Tbli(1)
                cti = Tbli(2)
                '
                mj = Tblj(0)
                tj = Tblj(1)
                ctj = Tblj(2)        '
                '
                Select Case Dénominateur
                    Case "4"
                        i = ((mi - 1) * Tmesure) + ((ti - 1) * 4) + ((cti - 1) * 2)
                        j = ((mj - 1) * Tmesure) + ((tj - 1) * 4) + ((ctj - 1) * 2)
                    Case "8"
                        i = ((mi - 1) * Tmesure) + ((ti - 1) * 6) + ((cti - 1) * 2)
                        j = ((mj - 1) * Tmesure) + ((tj - 1) * 6) + ((ctj - 1) * 2)
                End Select
                '
                lg = j - i
                DuréeNote = Str((j - i)) ' Str((j - i) - 1) - Remarque importante : on retire une division pour bien séparer le message NoteOff du message NoteON suivante quand il s'agit de la même note
                If Réduction > 0 And Réduction <= lg / 2 Then
                    DuréeNote = Str((j - i) - Réduction)
                Else
                    If Réduction <> 0 And Réduction > lg / 2 Then
                        DuréeNote = Str(Val(DuréeNote) / 2)
                    End If
                End If
            End If
        End If
        '
    End Function
    ''' <summary>
    ''' Calcule la durée de la note en fonction de la ligne donnée.
    ''' </summary>
    ''' <param name="ligne">Ligne de l'événement musical dans la grille Grid1 (grille de composition).</param>
    ''' <returns>Durée de la note sous forme de chaîne de caractères et en nombre de demi croches.</returns>
    Function DuréeNote3(ligne As Integer) As String
        ' utiliser grid1 pour faire le delta
        Dim Pi As String
        Dim Pj As String
        Dim Tbli() As String
        Dim Tblj() As String
        Dim mi, ti, cti As Integer
        Dim mj, tj, ctj As Integer
        Dim i, j As Integer
        Dim Dénominateur As String
        Dim Tmesure As Integer
        Dim tbl() As String
        Dim Réduction As Integer
        Dim lg As Integer

        Réduction = Transport.Comp.Value ' réduction de la longueur des notes 

        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        tbl = Split(Métrique.Text, "/")
        Dénominateur = Trim(tbl(1))
        '
        DuréeNote3 = "16"
        If ligne + 1 <= Grid1.Rows - 1 Then
            Pi = Grid1.Cell(ligne, 1).Text
            Pj = Grid1.Cell(ligne + 1, 1).Text
            'If Pj = "" Then ' si dernier accord, alors sa longueur est de 1 mesure
            If Pj = "" Then Pj = (Transport.Terme.Value + 1).ToString + ".1" + ".1"
            ''  "15" = DuréeNote (dernière note) -  Remarque importante : on retire une division pour bien séparer le message NoteOff du message NoteON suivante quand il s'agit de la même note
            'lg = 16
            'If Réduction > 0 And Réduction <= lg / 2 Then
            'DuréeNote3 = ((16) - Réduction).ToString
            'Else
            '   If Réduction <> 0 And Réduction > lg / 2 Then
            'DuréeNote3 = (16 / 2).ToString
            'End If
            'End If
            'Else
            '
            Tbli = Split(Pi, ".")
            Tblj = Split(Pj, ".")
            '
            mi = Tbli(0)
            ti = Tbli(1)
            cti = Tbli(2)
            '
            mj = Tblj(0)
            tj = Tblj(1)
            ctj = Tblj(2)        '
            '
            Select Case Dénominateur
                Case "4"
                    i = ((mi - 1) * Tmesure) + ((ti - 1) * 4) + ((cti - 1) * 2)
                    j = ((mj - 1) * Tmesure) + ((tj - 1) * 4) + ((ctj - 1) * 2)
                Case "8"
                    i = ((mi - 1) * Tmesure) + ((ti - 1) * 6) + ((cti - 1) * 2)
                    j = ((mj - 1) * Tmesure) + ((tj - 1) * 6) + ((ctj - 1) * 2)
            End Select
            '
            lg = j - i
            DuréeNote3 = Str((j - i)) ' Str((j - i) - 1) - Remarque importante : on retire une division pour bien séparer le message NoteOff du message NoteON suivante quand il s'agit de la même note
            If Réduction > 0 And Réduction <= lg / 2 Then
                DuréeNote3 = Str((j - i) - Réduction)
            Else
                If Réduction <> 0 And Réduction > lg / 2 Then
                    DuréeNote3 = Str(Val(DuréeNote3) / 2)
                End If
            End If
            'End If
        End If
        '
    End Function

    Function DuréeNote2(ligne As Integer) As String
        ' utiliser grid1 pour faire le delta
        Dim Pi As String
        Dim Pj As String
        Dim Tbli() As String
        Dim Tblj() As String
        Dim mi, ti, cti As Integer
        Dim mj, tj, ctj As Integer
        Dim i, j As Integer
        Dim Dénominateur As String
        Dim Tmesure As Integer
        Dim tbl() As String

        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        tbl = Split(Métrique.Text, "/")
        Dénominateur = Trim(tbl(1))
        '
        DuréeNote2 = "16"
        If ligne + 1 <= Grid1.Rows - 1 Then
            Pi = Grid1.Cell(ligne, 1).Text
            Pj = Grid1.Cell(ligne + 1, 1).Text
            If Pj = "" Then ' si dernier accord, alors sa longueur est de 1 mesure
                DuréeNote2 = "16"
            Else
                '
                Tbli = Split(Pi, ".")
                Tblj = Split(Pj, ".")
                '
                mi = Tbli(0)
                ti = Tbli(1)
                cti = Tbli(2)
                '
                mj = Tblj(0)
                tj = Tblj(1)
                ctj = Tblj(2)        '
                '
                Select Case Dénominateur
                    Case "4"
                        i = ((mi - 1) * Tmesure) + ((ti - 1) * 4) + ((cti - 1) * 2)
                        j = ((mj - 1) * Tmesure) + ((tj - 1) * 4) + ((ctj - 1) * 2)
                    Case "8"
                        i = ((mi - 1) * Tmesure) + ((ti - 1) * 6) + ((cti - 1) * 2)
                        j = ((mj - 1) * Tmesure) + ((tj - 1) * 6) + ((ctj - 1) * 2)
                End Select
                '
                DuréeNote2 = Str((j - i) - 1) ' Remarque importante : on retire une division pour bien séparer le message NoteOff du message NoteON suivante quand il s'agit de la même note
            End If
        End If
        '
    End Function
    Function Det_DuréeFIN2(Position As String, Posnote As Integer, CompAct As Boolean) As String
        Dim Tmesure As Integer
        Dim delta As Integer
        Dim tbl() As String
        Dim nMesure As Integer
        Dim a As String
        Dim lg, Réduction, DuréeFin As Integer

        tbl = Split(Position, ".")
        a = Trim(tbl(0)) + "." + "1" + "." + "1" ' position du début de la mesure
        nMesure = Val(DébutEVT(Trim(a)))

        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        DuréeFin = (Tmesure * EndMeasureNumber.Value) '- 1
        Det_DuréeFIN2 = Str(DuréeFin)
        '
        'x = (nMesure - 1) * Tmesure
        If Posnote > nMesure Then
            delta = Posnote - nMesure
            DuréeFin = DuréeFin - delta
            Det_DuréeFIN2 = Str(DuréeFin)
        End If
        '
        ' Traitement de la compression
        ' ****************************
        Réduction = 0
        If CompAct Then
            Réduction = Val(ComboBox8.SelectedItem)
        End If
        lg = DuréeFin
        If Réduction > 0 And Réduction <= lg / 2 Then
            Det_DuréeFIN2 = Str(DuréeFin - Réduction)
        Else
            If Réduction <> 0 And Réduction > lg / 2 Then
                Det_DuréeFIN2 = Str(DuréeFin / 2)
            End If
        End If
    End Function
    Function Det_DuréeFIN3(Position As String, Posnote As Integer) As String
        Dim Tmesure As Integer
        Dim delta As Integer
        Dim tbl() As String
        Dim nMesure As Integer
        Dim a As String


        tbl = Split(Position, ".")
        a = Trim(tbl(0)) + "." + "1" + "." + "1" ' position du début de la mesure
        nMesure = Val(DébutEVT(Trim(a)))

        Tmesure = Taille_Mesure() ' taille mesure en doubles croches ex. mesure 4/4 = 16)
        DuréeFin = (Tmesure * EndMeasureNumber.Value) '- 1
        Det_DuréeFIN3 = Str(DuréeFin)
        '
        'x = (nMesure - 1) * Tmesure
        If Posnote > nMesure Then
            delta = Posnote - nMesure
            DuréeFin = DuréeFin - delta
            Det_DuréeFIN3 = Str(DuréeFin)
        End If
        '

    End Function

    Private Delegate Function MyDelegate() As Midi.CallbackMessage.CallbackType()
    Sub EnvoiMess() 'As Midi.CallbackMessage.CallbackType()
        VarCallBack = "Passage"
    End Sub

    Private Sub Button23_Click(sender As Object, e As EventArgs)
        Dim Horloge1 As New Midi.Clock(Tempo.Value)

        'SortieMidi.Item(ChoixSortieMidi).SendNoteOn(nCanal.value-1, n, 80)
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If

        Horloge1.Schedule(New CallbackMessage(AddressOf EnvoiMess, 2.5))
        Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, 60, 80, 1, Horloge1, 1))
        Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, 64, 80, 1, Horloge1, 1))
        '
        Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, 61, 80, 2, Horloge1, 1))
        Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CanalThru.Value - 1, 61, 80, 2.5, Horloge1, 1))
        'Horloge1.Schedule(New NoteOffMessage(SortieMidi.Item(ChoixSortieMidi),nCanal.value-1, 60, 80, 1))
        '
        Horloge1.Start()
    End Sub


    Private Sub Fermer_MIDI()
        Dim i As Integer
        '
        For i = 0 To SortieMidi.Count - 1
            If SortieMidi.Item(i).IsOpen Then
                'SortieMidi.Item(i).SilenceAllNotes()
                If Horloge1.IsRunning Then
                    Horloge1.Stop()
                    Horloge1.Reset()
                End If
                'SortieMidi.Item(i).Close() --> supprimé car le "Close" remet à 0 le N° de programme GS
            End If
        Next
        '
    End Sub
    Private Sub Tempo_Aff_EventH_Tick(sender As Object, e As EventArgs) Handles Tempo_Aff_EventH.Tick
        '
        ' Affichage mesure
        ' ****************
        If IndexListMesures <= ListNumMesures.Count - 1 Then
            If CallB_Aff_Mesure = True Then
                If Trim(ListNumAcc.Item(IndexListMesures)) <> "" Then
                    Label35.Text = Trim(ListNumAcc.Item(IndexListMesures))
                End If
                Label31.Text = Trim(ListNumMesures.Item(IndexListMesures)) ' étiquette verte à droite
                Label76.Text = Trim(ListNumMesures.Item(IndexListMesures))
                If Transport.Visible = True Then Transport.Label1.Text = Trim(ListNumMesures.Item(IndexListMesures)) ' barre de tranport
                '
                IndexListMesures = IndexListMesures + 1
                CallB_Aff_Mesure = False
            End If
        End If
        '
        ' Arrêter l'écoute
        ' ****************
        If ArrêterTimer = True Then
            FIN()
            'StopPlay()
        End If

    End Sub

    '    Tableau théorique DES N° DE NOTES MIDI
    '    ********************************************
    '     notes C   C#  D   D#  E   F   F#  G   G#  A   A#  B
    ' I oct+----------------------------------------------
    ' 0 -2 !    0   1   2   3   4   5   6   7   8   9   10  11 
    ' 1 -1 !    12  13  14  15  16  17  18  19  20  21  22  23 
    ' 2  0 !    24  25  26  27  28  29  30  31  32  33  34  35 
    ' 3  1 !    36  37  38  39  40  41  42  43  44  45  46  47 
    ' 4  2 !    48  49  50  51  52  53  54  55  56  57  58  59
    ' 5  3 !    60  61  62  63  64  65  66  67  68  69  70  71
    ' 6  4 !    72  73  74  75  76  77  78  79  80  81  82  83
    ' 7  5 !    84  85  86  87  88  89  90  91  92  93  94  95
    ' 8  6 !    96  97  98  99  100 101 102 103 104 105 106 107 
    ' 9  7 !    108 109 110 111 112 113 114 115 116 117 118 119
    ' 10 8 !    120 121 122 123 124 125 126 127


    ' Application au dictionnaire DicoNotes
    ' *************************************
    ' -------+-----------------------------------------------------------------
    ' Clefs  +  Valeurs
    ' -------+------------------------------------------------------------------
    ' c      ! Classe TT0  :  0 12 24 36 48 50 72 84 96  108 120 - > tous les "c"
    ' c#     ! Classe TT1  :  1 13 25 37 49 51 73 85 97  109 121 - > tous les "c#"
    ' d      ! Classe TT2  :  2 14 26 38 50 52 74 86 98  110 122 - > tous les "d"
    ' d#     ! Classe TT3  :  3 15 27 39 51 53 75 87 99  111 123 - > tous les "d#"
    ' e      ! Classe TT4  :  4 16 28 40 52 54 76 88 100 101 124 - > tous les "e"
    ' f      ! etc...
    ' f#     ! 
    ' g      !
    ' g#     !
    ' a      !
    ' a#     !
    ' b      ! Classe TT11 : 11 23 35 47 58 71 83 95 107 119 -- 

    Sub Aff_Gamme(Gamme As String, ToniqueMode As String) ' Colorisation du piano avec les notes de la gamme
        Dim i, j, k As Integer
        Dim NotesGamme As String
        Dim tbl() As String
        Dim t As New TT ' Class TT Public Toctave(0 To 11) As Integer End Class
        Dim Tonique As String = ""
        Dim a, G, note As String
        Dim oo2 As New RechercheG_v2
        '
        '
        Maj_TabNotes("#") ' remarque : les notes des gammes sont toujours calculées en # pour coloriser le piano
        tbl = Split(Gamme, " ")
        a = tbl(0)
        'SigneClef = Trim(Det_Clef(a))

        RAZ_CouleursPiano()
        '
        '
        G = Trad_AccordEn_D(Trim(Gamme))
        NotesGamme = oo2.Det_NotesGammes3(Trim(G)) '
        tbl = NotesGamme.Split("-")
        '
        Tonique = Trim(tbl(0))
        If ToniqueMode <> "" And Etat_Extension = Ty_Extension.Modes Then
            Tonique = ToniqueMode
        End If
        ' label d'affichage nom de la gamme en dessous des réglages
        ' *********************************************************
        '
        For i = 0 To UBound(tbl)
            t = DicoNotes(tbl(i)) ' Public DicoNotes As New Dictionary(Of String, TT)
            For j = 0 To UBound(t.Toctave)
                k = t.Toctave(j) 'k est e N° midi de la note  et j est l'octave
                If k < 128 Then

                    'LabelPiano.Item(k).BackColor = Color.Khaki 'LightGreenLabelPianoMidiIn.Item(k).Text = "--"
                    'LabelPiano.Item(k).ForeColor = Color.GreenYellow
                    LabelPiano.Item(k).Text = tbl(i) + NumCubase(j)
                    LabelPiano.Item(k).ForeColor = Color.Black
                    If LabelPiano.Item(k).Height <> HauteurTouche Then
                        'LabelPianoMidiIn.Item(k).BackColor = Color.Khaki 'LightGreen
                        LabelPiano.Item(k).ForeColor = Color.White

                    End If

                    note = Trad_NoteEnD(Trim(tbl(i))) ' Trad_NoteEnD
                    note = Trim(LCase(note))
                    note = Trim(note + Det_nOctave(j))
                    '
                    'If SigneClef = "b" Then
                    'r = ListNotesd.IndexOf(note)
                    'note = ListNotesb(r) ' traduction de la note en 'b' au cas où cette note serait la tonique, dans ce cas elle doit être écrite sur la touche du piano avec la bonne clef
                    'End If
                    If tbl(i) = Tonique Then ' ecriture de la tonique dans le piano
                        'If LabelPiano.Item(k).Height = HauteurTouche Then
                        'LabelPiano.Item(k).ForeColor = Color.Black
                        'Else
                        'End If
                        LabelPiano.Item(k).Text = "T" 'Trim(note)
                    End If
                End If
            Next j
        Next i
        '
    End Sub
    Sub Aff_Accord(Accord As String) ' Colorisation du piano avec les notes de la gamme
        Dim i, j, k As Integer
        Dim NotesGamme As String
        Dim tbl() As String
        Dim t As New TT ' Class TT Public Toctave(0 To 11) As Integer End Class
        Dim Tonique As String = ""
        Dim a, AA, note As String
        Dim oo2 As New RechercheG_v2
        '
        '
        Maj_TabNotes("#") ' remarque : les notes des gammes sont toujours calculées en # pour coloriser le piano
        tbl = Split(Accord, " ")
        a = tbl(0)
        'SigneClef = Trim(Det_Clef(a))

        RAZ_CouleursPiano()
        '
        AA = Trad_AccordEn_D(Trim(Accord))
        NotesGamme = oo2.Det_NotesAccord3(Trim(AA)) '
        tbl = NotesGamme.Split("-")
        '
        Tonique = Trim(tbl(0))

        ' label d'affichage nom de la gamme en dessous des réglages
        ' *********************************************************
        '
        For i = 0 To UBound(tbl)
            t = DicoNotes(tbl(i)) ' Public DicoNotes As New Dictionary(Of String, TT)
            For j = 0 To UBound(t.Toctave)
                k = t.Toctave(j) 'k est e N° midi de la note  et j est l'octave
                If k < 128 Then
                    LabelPiano.Item(k).Text = tbl(i) + NumCubase(j)
                    LabelPiano.Item(k).ForeColor = Color.Black
                    If LabelPiano.Item(k).Height <> HauteurTouche Then
                        LabelPiano.Item(k).ForeColor = Color.White
                    End If
                    '
                    note = Trad_NoteEnD(Trim(tbl(i))) ' Trad_NoteEnD
                    note = Trim(LCase(note))
                    note = Trim(note + Det_nOctave(j))
                    '
                    'If SigneClef = "b" Then
                    'r = ListNotesd.IndexOf(note)
                    'note = ListNotesb(r) ' traduction de la note en 'b' au cas où cette note serait la tonique, dans ce cas elle doit être écrite sur la touche du piano avec la bonne clef
                    'End If
                    If tbl(i) = Tonique Then ' ecriture de la tonique dans le piano
                        LabelPiano.Item(k).Text = "T" 'Trim(note)
                    End If
                End If
            Next j
        Next i
        '
    End Sub
    Function NumCubase(nOctave As Integer) As String
        Dim a As String = ""
        Select Case nOctave
            Case 0
                a = "-2"
            Case 1
                a = "-1"
            Case 2
                a = "0"
            Case 3
                a = "1"
            Case 4
                a = "2"
            Case 5
                a = "3"
            Case 6
                a = "4"
            Case 7
                a = "5"
            Case 8
                a = "6"
            Case 9
                a = "7"
            Case 10
                a = "8"
        End Select
        Return a
    End Function

    Function Det_nOctave(Ind As Integer) As String
        Select Case Ind
            Case 0
                Det_nOctave = "-2"
            Case 1
                Det_nOctave = "-1"
            Case Else
                Det_nOctave = Trim(Str(Ind - 2))
        End Select
    End Function
    Sub Position_Piano(Note As String)
        Dim a As String
        ' détermination de l'octave de la note
        a = Microsoft.VisualBasic.Right(Note, 1)
        ' positionnement du clavier du piano
        Select Case a
            Case "1"
                Panel11.HorizontalScroll.Value = 400
            Case "2"
                Panel11.HorizontalScroll.Value = 460
            Case "3"
                Panel11.HorizontalScroll.Value = 680
            Case "4"
                Panel11.HorizontalScroll.Value = 840
            Case Else
                Panel11.HorizontalScroll.Value = 840
        End Select
    End Sub
    Sub RAZ_CouleursPiano()
        Dim i, j, k As Integer
        For i = 0 To 127 Step 12
            For j = 0 To 11
                k = i + j
                If k = 128 Then Exit For
                '
                LabelPiano.Item(k).Text = ""
                Select Case j
                    Case 1, 3, 6, 8, 10
                        LabelPiano.Item(k).BackColor = Color.Black
                        LabelPianoMidiIn.Item(k).BackColor = Color.Black

                        'LabelPiano.Item(k).BringToFront()
                    Case Else
                        LabelPiano.Item(k).BackColor = Color.White
                        LabelPianoMidiIn.Item(k).BackColor = Color.White
                End Select
            Next j

        Next i
    End Sub
    Private Sub Début_ValueChanged_1(sender As Object, e As EventArgs)
        If EnChargement = False Then
            If Début.Value > Terme.Value Then
                Début.Value = Début.Value - 1
            End If
        End If
    End Sub

    Private Sub Terme_ValueChanged(sender As Object, e As EventArgs)
        If EnChargement = False Then
            If Terme.Value < Début.Value Then
                Terme.Value = Terme.Value + 1
            End If
        End If
    End Sub

    Private Sub Button7_Click_1(sender As Object, e As EventArgs)
        CheckMaj.Checked = True
        CheckMinH.Checked = True
        CheckMinM.Checked = True
        CheckPentaMin.Checked = True
        CheckBlues.Checked = True
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs)
        Dim h As Integer
        Dim w As Integer
        '
        'My.Computer.Audio.Play("C:\Waterfall.wav", AudioPlayMode.Background)

        h = Me.Size.Height
        Me.Size = New Size(1157, h) '1137
        w = Me.Size.Width
        Me.Size = New Size(w, 740)
        '
        'GroupBox1.Visible = False
        SplitContainer2.SplitterDistance = 554
        '
    End Sub
    Private Sub Aide_Click(sender As Object, e As EventArgs)
        Dim h As Integer
        '
        h = Me.Size.Height
        Me.Size = New Size(1665, h)
        SplitContainer2.SplitterDistance = 557
    End Sub
    Private Sub CheckBox5_CheckedChanged(sender As Object, e As EventArgs)
        'NotesCommunes2.Checked = NotesCommunes.Checked
    End Sub
    Private Sub ComboMidiOut_SelectedIndexChanged_1(sender As Object, e As EventArgs)
        Dim a As String
        '
        '
        If EnChargement = False Then
            ChoixSortieMidi = ComboMidiOut.SelectedIndex
            '
            a = Trim(Str(ChoixSortieMidi))
            My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixSortieMIDI", a)
        End If
        '
    End Sub
    Private Sub ComboBoxMidiIn_SelectedIndexChanged(sender As Object, e As EventArgs)

        ChoixEntréeMidi = ComboMidiIn.SelectedIndex
        Ouverture_EntréeMidi() ' ??????
    End Sub
    Sub Ouverture_EntréeMidi()
        Dim i As Integer
        Dim a, b, c, titre, ErrMess As String

        '
        Try
            If ExistenceEntréeMidi = True Then
                For i = 0 To EntréeMidi.Count - 1
                    If EntréeMidi.Item(i).IsOpen Then
                        EntréeMidi.Item(i).Close()
                    End If
                Next i
                'EntréeMidi.Item(ChoixEntréeMidi).Close()

                If Thru.Checked = True Then
                    EntréeMidi.Item(ChoixEntréeMidi).Open()
                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsReceiving) Then
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    Else
                        EntréeMidi.Item(ChoixEntréeMidi).StopReceiving()
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    End If
                End If
            Else
                EntréeMidi.Item(ChoixEntréeMidi).Close()
            End If
        Catch ex As Exception
            ErrMess = ""
            i = Exception.Count
            a = ex.Source
            b = ex.ToString
            c = ex.StackTrace
            'ErrMess = "Origine : " + a + "Message1 : " + b + "Message2 : " + c
            '
            Thru.Checked = False ' on refuse 
            '
            If Not (EnChargement) Then
                titre = "Warning"
                Avertis = "Unable to active MIDIN In. Verify that it is not still used by an other application. If yes, free this application"
                If Module1.LangueIHM = "fr" Then
                    titre = "Avertissement"
                    Avertis = "Impossible d'activer l'entrée MIDI. Vérifier qu'elle n'est pas déjà utilisée par une autre application. Si oui, libérer cette application"
                End If
                MessageHV.PContenuMess = Avertis
                MessageHV.PTypBouton = "OK"
                Cacher_FormTransparents()
                MessageHV.ShowDialog()
                'MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                'MessageBox.Show(ErrMess + "   " + a)
                'MessageBox.Show(a)
                'MessageBox.Show(a, titre, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
            End If
        End Try
    End Sub
    Private Sub Thru_CheckedChanged(sender As Object, e As EventArgs)
        Dim a As String
        If Thru.Checked Then
            a = "1"
        Else
            a = "0"
        End If

        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Thru", a)
        Ouverture_EntréeMidi()
    End Sub

    Private Sub ComboMidiIn_SelectedIndexChanged_1(sender As Object, e As EventArgs)
        Dim a As String
        Dim ii As Integer
        Dim titre As String
        '
        ii = ChoixEntréeMidi

        ChoixEntréeMidi = ComboMidiIn.SelectedIndex


        a = Trim(Str(ChoixEntréeMidi))
        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixEntréeMIDI", a)

        'Ouverture_EntréeMidi() ' ??????
        Try
            If EnChargement = False Then
                EntréeMidi.Item(ii).StopReceiving()
                'EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                If Thru.Checked = True Then
                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsOpen) Then
                        EntréeMidi.Item(ChoixEntréeMidi).Open()
                    End If

                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsReceiving) Then
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    Else
                        EntréeMidi.Item(ChoixEntréeMidi).StopReceiving()
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    End If
                End If
            End If
        Catch ex As Exception
            If Module1.LangueIHM = "fr" Then
                titre = "Avertissement"
                Avertis = "Il pourrait y avoir un problème d'interface MIDI"
            Else
                titre = "Warning"
                Avertis = "You may have a MIDI device problem"
            End If
            MessageHV.PContenuMess = Avertis
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub

    Private Sub ExporterCalqueMIDIToolStripMenuItem_Click(sender As Object, e As EventArgs)
        Dim a, b As String
        '
        Try
            If Trim(Grid2.Cell(1, Transport.Début.Value).Text) = "" Then
                If LangueIHM = "fr" Then
                    MsgBox("Le délimiteur de début doit pointer sur une mesure non vide")
                Else
                    MsgBox("The start delimiter must point to a non-empty measure")
                End If
            Else
                If Trim(Grid2.Cell(1, Transport.Terme.Value).Text) = "" Then
                    If LangueIHM = "fr" Then
                        MsgBox("Le délimiteur de fin doit pointer sur une mesure non vide")
                    Else
                        MsgBox("The end delimiter must point to a non-empty measure")
                    End If
                Else
                    MessageHV.PTypBouton = "Oui"
                    If LangueIHM = "fr" Then
                        MessageHV.PTitre = "Avertissement"
                        MessageHV.PContenuMess = "Le fichier MIDI sera créé entre le délimiteur de début " + Transport.Début.Text + " et le délimiteur de fin " + Transport.Terme.Text + "."
                    Else
                        MessageHV.PTitre = "Warning"
                        MessageHV.PContenuMess = "The MIDI file will be created between the start locator " + Transport.Début.Text + " and the end locator " + Transport.Terme.Text + "."
                    End If
                    MessageHV.ShowDialog()

                    If Det_NomCalquesMIDI() Then
                        ' Calcul Fichier ascii de Calques MIDI dont le nom est donné dans a
                        ' **********************************************************
                        a = CréationFichierTexteCalquesMIDI("CalquesMIDI")

                        ' Copie du fichier Calques MIDI dans le fichier choisi
                        ' ****************************************************
                        Création_MidiFile(a, 2) ' a est le fichier ascii contenant les info midi provisoire en ASCI
                        b = Création_CTemp() + "\" + "djgbv58147.mid" ' b contient le fihcier midi "djgbv58147.mid°, calculé dans Création_MidiFile, et qui va être copié dans le ficher dont le nom est dans la variable FichierCalques
                        If My.Computer.FileSystem.FileExists(FichierCalques) Then
                            My.Computer.FileSystem.DeleteFile(FichierCalques)
                        End If
                        My.Computer.FileSystem.CopyFile(b, FichierCalques) ' la variable FichierCalques est mise à jour dans Det_NomCalquesMIDI
                    End If
                End If
            End If
        Catch ex As Exception
            a = ex.Message
        End Try
    End Sub


    Private Sub CopierToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CopierToolStripMenuItem.Click, Flot_Copier.Click, Button16.Click
        Select Case OngletCours_Edition
            Case N_PisteAcc  ' Onglet HyperVoicing
                Copier()
            Case N_PistePianoR1, N_PistePianoR2, N_PistePianoR3, N_PistePianoR4, N_PistePianoR5, N_PistePianoR6, N_PistePianoR7, N_PistePianoR8   ' Onglet PianoRoll
                With listPIANOROLL.Item(OngletCours_Edition - 1)
                    If .Orig_PianoR.Orig1 = OrigPianoCourbe.Piano Then
                        .CopierData()
                    Else
                        Dim ind As Integer = .Orig_PianoR.N_Courbe
                        .GridCourbes.Item(ind).Selection.CopyData()
                    End If
                End With
            Case N_PisteDrums   ' Onglet DrumEdit
                If Drums.PGridOrigine = "Grid1" Then
                    If Drums.Grid1.Selection.FirstCol > 3 And Drums.Grid1.Selection.FirstRow > 0 Then
                        Drums.Grid1.Selection.CopyData()

                    End If
                End If
                If Drums.PGridOrigine = "Grid2" Then
                    Drums.Grid2.Range(0, 0, Drums.Grid2.Rows - 1, Drums.Grid2.Cols - 1).Locked = False ' déverouiller les cellules
                    Drums.Grid2.Selection.CopyData()
                    Drums.Grid2.Range(0, 0, Drums.Grid2.Rows - 1, Drums.Grid2.Cols - 1).Locked = True ' vérouiller les cellules
                End If

            Case N_Courbexp
                Courbexp.Selection.CopyData()
        End Select

        Calcul_AutoVoicingZ()
    End Sub
    Sub Copier()
        Select Case DerGridCliquée
            Case GridCours.Grid2
                If Grid2.Selection.LastCol <= nbMesures Then
                    Copie()
                    CollerToolStripMenuItem.Enabled = True
                Else
                    If Module1.LangueIHM = "fr" Then
                        Avertis = "Vous ne pouvez pas copier des données après la dernière mesure."
                    Else
                        Avertis = "You can not copy data after the last measure."
                    End If
                    MessageHV.PContenuMess = Avertis
                    MessageHV.PTypBouton = "OK"
                    Cacher_FormTransparents()
                    MessageHV.ShowDialog()

                End If
                '
            Case GridCours.Grid3
                If (Grid3.ActiveCell.Col) <= ((nbMesures * nbColonnesGrid3ParMesure)) Then
                    'If (Grid3.MouseCol) <= (nbMesures * nbColonnesGrid3ParMesure) - 1 And
                    '(Grid3.Selection.LastCol <= (nbMesures * nbColonnesGrid3ParMesure) - 1) Then
                    Copie3(Grid3.ActiveCell.Col)
                End If
        End Select
        ' nbColonnesGrid3ParMesure (nbMesures * nbColonnesGrid3ParMesure) - 1 
    End Sub
    Private Sub CouperToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CouperToolStripMenuItem.Click, Button15.Click, Flot_Couper.Click
        Select Case OngletCours_Edition
            Case N_PisteAcc ' onglet HyperVoicing
                Couper()
            Case N_PistePianoR1, N_PistePianoR2, N_PistePianoR3, N_PistePianoR4, N_PistePianoR5, N_PistePianoR6, N_PistePianoR7, N_PistePianoR8 ' Onglets PianoRoll
                If listPIANOROLL.Item(OngletCours_Edition - 1).Orig_PianoR.Orig1 = OrigPianoCourbe.Piano Then ' edition dans pianoroll
                    listPIANOROLL.Item(OngletCours_Edition - 1).CouperData()

                Else
                    Dim ind As Integer = listPIANOROLL.Item(OngletCours_Edition - 1).Orig_PianoR.N_Courbe ' édition dans une courbe du pianoroll
                    listPIANOROLL.Item(OngletCours_Edition - 1).GridCourbes.Item(ind).Selection.CutData()
                End If
                Calcul_AutoVoicingZ()
            Case N_PisteDrums  ' onglet DrumEdit
                If Drums.PGridOrigine = "Grid1" Then
                    If Drums.Grid1.Selection.FirstCol > 3 And Drums.Grid1.Selection.FirstRow > 0 Then
                        Drums.DéVérouillerGrid1()    ' les cellules ont été vérrouillées dans drums.grid1_Keydown 
                        Drums.Grid1.AutoRedraw = False
                        Drums.Sauv_ClipAnnuler()
                        Drums.Grid1.Selection.CutData()
                        Drums.DessinDiv()
                        ii = Drums.Det_NumPréset2()
                        Drums.Maj_Préset(ii)
                        Drums.Grid1.AutoRedraw = True
                        Drums.Grid1.Refresh()
                        Drums.VérouillerGrid1()     ' les cellules seront déverrouillées à la fin de Drums.Grid1_KeyUp
                    End If
                End If
                Calcul_AutoVoicingZ()

            Case N_Courbexp
                'Courbexp.Range(3, 1, Courbexp.Rows - 1, Courbexp.Cols - 1).Locked = False
                Courbexp.AutoRedraw = False
                '
                Courbexp.Selection.CutData()
                '
                Courbexp.AutoRedraw = True
                Courbexp.Refresh()

                'Courbexp.Range(3, 1, Courbexp.Rows - 1, Courbexp.Cols - 1).Locked = True
        End Select


    End Sub

    Function Det_IndexGrdid2DSGrid3(colGrid3 As Integer) As Integer
        Dim a As String

        Det_IndexGrdid2DSGrid3 = 1
        For i = colGrid3 To 0 Step -1
            a = Grid3.Cell(1, i).Text
            If Trim(a) <> "" Then
                Det_IndexGrdid2DSGrid3 = Val(a)
                Exit For
            End If
        Next i
    End Function
    Sub Couper()
        Dim ColGrid2 As Integer

        Select Case DerGridCliquée
            Case GridCours.Grid2
                If Grid2.Selection.LastCol <= nbMesures Then

                    Copie()
                    ZAnnulation_Sauvegarde(Grid2.Selection.FirstCol, Grid2.Selection.LastCol)
                    Effacer_Grid2_3(Grid2.Selection.FirstCol, Grid2.Selection.LastCol)
                    Ecriture_Entrée_Ds_CompoGrid()
                    RAZ_Grid4()
                    Calcul_AutoVoicingZ()
                    LockageColonnes()
                    ' Mettre à jour le Piano Roll et Drumedit
                    Maj_PianoRoll()
                    Maj_DrumEdit()
                Else
                    If Module1.LangueIHM = "fr" Then
                        Avertis = "Vous ne pouvez pas couper des données après la dernière mesure."
                    Else
                        Avertis = "You can not cut data after the last measure."
                    End If
                    MessageHV.PContenuMess = Avertis
                    MessageHV.PTypBouton = "OK"
                    Cacher_FormTransparents()
                    MessageHV.ShowDialog()
                End If
                '
            Case GridCours.Grid3
                If Grid3.Selection.FirstCol <> 1 Then   ' Grid3.ActiveCell.Col <> 1
                    ' on utilise le fonctionnement de l'annulation dans Grid2 
                    ' c'est toute la mesure qui est restituée dans sont état précédent.
                    DerGridCliquée = GridCours.Grid2
                    ColGrid2 = Det_IndexGrdid2DSGrid3(Grid3.ActiveCell.Col)
                    '
                    Grid2.Cell(0, ColGrid2).Locked = False
                    Grid2.Cell(0, ColGrid2).BackColor = Color.Beige
                    Grid2.Cell(0, ColGrid2).ForeColor = Color.Black
                    Grid2.Cell(0, ColGrid2).Locked = True

                    Grid2.Cell(1, ColGrid2).SetFocus()

                    ZAnnulation_Sauvegarde(Grid2.Selection.FirstCol, Grid2.Selection.LastCol)
                    '
                    Copie3(Grid3.ActiveCell.Col)
                    Effacer_Grid3(Grid3.Selection.FirstCol, Grid3.Selection.LastCol)
                    'Maj_ParPrintExport()
                    RAZ_Grid4()
                    '
                    Calcul_AutoVoicingZ()
                    LockageColonnes()
                    '
                    ' Mettre à jour le Piano Roll et Drumedit
                    Maj_PianoRoll()
                    Maj_DrumEdit()
                End If
        End Select
    End Sub
    Sub RAZ_TCopie()
        Dim i As Integer
        If TCopie.Count > 0 Then
            TCopie.Clear()
            For i = 0 To TCopie.Count - 1
                TCopie.Item(i).Actif = False
            Next i
        End If
    End Sub

    Sub Copie()
        Dim i, k As Integer
        Dim m, t, ct As Integer
        Dim e As Integer
        Dim a As String
        Dim tbl() As String
        Dim mDeb As Integer

        e = 0
        Select Case DerGridCliquée
            Case GridCours.Grid2
                RAZ_TCopie()
                '
                i = -1
                mDeb = Grid2.Selection.FirstCol
                For m = Grid2.Selection.FirstCol To Grid2.Selection.LastCol
                    For t = 0 To UBound(TableEventH, 2)
                        For ct = 0 To UBound(TableEventH, 3)
                            If TableEventH(m, t, ct).Ligne <> -1 Then
                                OrigineEdition = GridCours.Grid2
                                i = i + 1

                                If i > TCopie.Count - 1 Then
                                    TCopie.Add(New TamponCopie)
                                End If
                                '
                                TCopie(i).Actif = True
                                TCopie(i).Tonalité = TableEventH(m, t, ct).Tonalité
                                TCopie(i).Accord = TableEventH(m, t, ct).Accord
                                TCopie(i).Gamme = TableEventH(m, t, ct).Gamme
                                TCopie(i).Mode = TableEventH(m, t, ct).Mode
                                TCopie(i).Degré = TableEventH(m, t, ct).Degré
                                TCopie(i).Marqueur = TableEventH(m, t, ct).Marqueur
                                TCopie(i).Détails = TableEventH(m, t, ct).Détails
                                TCopie(i).Vel = TableEventH(m, t, ct).Vel
                                TCopie(i).Racine = TableEventH(m, t, ct).Racine
                                '
                                TCopie(i).m = m
                                TCopie(i).t = t
                                TCopie(i).ct = ct
                                '
                                TCopie(i).Décalage = m - mDeb
                                '
                                TCopie.Item(0).Nb_Items = i ' le nombre d'items de la copie est mis à jors uniquement dans le 1er item
                            End If
                        Next ct
                    Next t
                Next m
            Case GridCours.Grid3
                RAZ_TCopie()
                i = -1
                'e = Grid3.Selection.LastCol - Grid3.Selection.FirstCol
                mDeb = Grid3.Selection.FirstCol
                For k = mDeb To Grid3.Selection.LastCol
                    If Grid3.Cell(2, k).BackColor = Couleur_Accord_Grid3 Then
                        '
                        OrigineEdition = GridCours.Grid3
                        '
                        i = i + 1

                        If i > TCopie.Count - 1 Then
                            TCopie.Add(New TamponCopie)
                        End If
                        '
                        a = Det_IndexDansGrid3(k)
                        tbl = Split(a)
                        m = Val(tbl(0))
                        t = Val(tbl(1))
                        ct = Val(tbl(2))
                        '
                        TCopie(i).m = m
                        TCopie(i).t = t
                        TCopie(i).ct = ct
                        '

                        '
                        TCopie(i).Actif = True
                        TCopie(i).Tonalité = TableEventH(m, t, ct).Tonalité
                        TCopie(i).Accord = TableEventH(m, t, ct).Accord
                        TCopie(i).Gamme = TableEventH(m, t, ct).Gamme
                        '
                        TCopie(i).Décalage = k - mDeb
                        '
                        TCopie.Item(0).Nb_Items = i
                    End If
                Next k
        End Select
    End Sub
    Sub Copie3(Grid3ColonneFirst As Integer)
        Dim i As Integer
        Dim m, t, ct As Integer
        'Dim mDeb As Integer
        Dim a As String
        Dim tbl() As String
        '
        RAZ_TCopie()
        '
        i = -1
        '
        a = Det_IndexDansGrid3(Grid3ColonneFirst)
        tbl = Split(a, " ")
        '
        m = Val(tbl(0))
        t = Val(tbl(1))
        ct = Val(tbl(2))


        If TableEventH(m, t, ct).Ligne <> -1 Then
            OrigineEdition = GridCours.Grid2
            i = i + 1

            If i > TCopie.Count - 1 Then
                TCopie.Add(New TamponCopie)
            End If
            '
            TCopie(i).Actif = True
            TCopie(i).Tonalité = TableEventH(m, t, ct).Tonalité
            TCopie(i).Accord = TableEventH(m, t, ct).Accord
            TCopie(i).Gamme = TableEventH(m, t, ct).Gamme
            TCopie(i).Mode = TableEventH(m, t, ct).Mode
            TCopie(i).Degré = TableEventH(m, t, ct).Degré
            TCopie(i).Marqueur = TableEventH(m, t, ct).Marqueur
            TCopie(i).Détails = TableEventH(m, t, ct).Détails
            TCopie(i).Vel = TableEventH(m, t, ct).Vel
            TCopie(i).Racine = TableEventH(m, t, ct).Racine
            '
            TCopie(i).m = m
            TCopie(i).t = t
            TCopie(i).ct = ct
            '
            'TCopie(i).Décalage = m - mDeb
            '
            TCopie.Item(0).Nb_Items = i ' le nombre d'items de la copie est mis à jors uniquement dans le 1er item
        End If
    End Sub
    Sub Effacer_Grid2(mDeb As Integer, mFin As Integer)
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim m As Integer
        Dim ComptMes As Integer
        Dim t As Integer
        Dim c As Integer
        Dim ct As Integer
        Dim NbDivMesure As Integer
        '
        t = 1
        ct = 1
        '

        ' Effacer Grid2
        ' *************
        k = (mFin - mDeb)

        For i = mDeb To mFin
            Grid2.Column(i).Locked = False
        Next
        '
        Grid2.AutoRedraw = False
        For i = mDeb To mFin
            Grid2.Column(i).Locked = True
            If i <> 1 Then ' on laisse la couleur rouge pour la 1ere mesure
                Grid2.Cell(1, i).BackColor = Color.White
                Grid2.Cell(1, i).ForeColor = Color.Black
            End If
            Grid2.Cell(1, i).Text = ""
            ''
            Grid2.Cell(0, i).Locked = False
            Grid2.Cell(0, i).BackColor = Color.Beige
            Grid2.Cell(0, i).Locked = True
            'Grid2.Cell(0, i).SetFocus()
        Next
        Grid2.Refresh()
        Grid2.AutoRedraw = True
        '
        ' Effacer Grid3
        ' *************
        NbDivMesure = Det_NbDivisionMesure()
        c = ((mDeb - 1) * NbDivMesure) + 1
        m = mDeb
        ComptMes = 1
        For j = c To (mFin * NbDivMesure)
            If Grid3.Cell(2, j).BackColor = Couleur_Accord_Grid3 Then
                '
                ' Détermination des index t et ct à partir de grid3
                ' *************************************************
                ct = 0 '-1
                For i = c To 0 Step -1
                    ct = ct + 1
                    If Trim(Grid3.Cell(2, i).Text) <> "" Then
                        t = Val(Trim(Grid3.Cell(2, i).Text)) '- 1
                        Exit For
                    End If
                Next i
                '
                ' Effacement
                ' **********
                ' Effacement Couleur
                If Not (mDeb = 1) Then ' ne jamais effacer a couleur de la mesure 1
                    ' Grid2.ActiveCell.Text = ""
                    ' Grid2.ActiveCell.BackColor = Color.White
                    ' Grid2.Cell(Grid2.ActiveCell.Row, m).BackColor = Color.White

                    Grid3.AutoRedraw = True
                    If ct <> 1 Then
                        Grid3.Cell(2, c).BackColor = Couleur_CTemps
                        Grid3.Cell(2, c).ForeColor = Color.Black
                    Else
                        If EstPair(t) Then
                            Grid3.Cell(2, c).BackColor = Couleur_CTemps
                            Grid3.Cell(2, c).ForeColor = Color.Black
                        Else
                            Grid3.Cell(2, c).BackColor = Couleur_Temps
                            Grid3.Cell(2, c).ForeColor = Color.Black
                        End If
                    End If
                    Grid3.AutoRedraw = True
                    Grid3.Refresh()
                End If
                ' Effacement text dans TableEventH
                If Not (mDeb = 1 And t = 1) Then ' t = 0) ne jamais effacer l'accord du temp=1 de la mesure=1 ()
                    '
                    TableEventH(m, t, ct).Accord = ""
                    TableEventH(m, t, ct).Gamme = ""
                    TableEventH(m, t, ct).Tonalité = ""
                    TableEventH(m, t, ct).Position = ""
                    TableEventH(m, t, ct).Ligne = -1
                End If
                '
            End If
            ' Comptage des numéro de mesures
            ' ******************************
            ComptMes = ComptMes + 1
            If ComptMes = NbDivMesure + 1 Then
                ComptMes = 1
                m = m + 1
            End If
        Next j
        Ecriture_Entrée_Ds_CompoGrid()
    End Sub
    Sub Effacer_Grid2_3(mDeb As Integer, mFin As Integer)
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim m As Integer
        Dim ComptMes As Integer
        Dim t As Integer
        Dim c As Integer
        Dim ct As Integer
        Dim NbDivMesure As Integer
        Dim FIN As Integer
        Dim a As String
        Dim tt As Integer

        '
        t = 1
        ct = 1
        '
        '
        ' Effacer Grid2
        ' *************
        '

        If mDeb = 1 Then
            mDeb = 2
        End If

        Grid2.AutoRedraw = False
        Grid3.AutoRedraw = False

        k = (mFin - mDeb)

        For i = mDeb To mFin
            Grid2.Column(i).Locked = False
        Next
        '

        For i = mDeb To mFin
            If Trim(Grid2.Cell(1, i).Text) <> "" Then
                Grid2.Column(i).Locked = True
                If i <> 1 Then ' on laisse la couleur rouge pour la 1ere mesure
                    Grid2.Cell(1, i).BackColor = Color.White
                    Grid2.Cell(1, i).ForeColor = Color.Black
                End If
                '
                Grid2.Cell(1, i).Text = ""
                EcritUneFois = True
                '
                Grid2.Cell(0, i).Locked = False
                Grid2.Cell(0, i).BackColor = Color.Beige
                Grid2.Cell(0, i).ForeColor = Color.Black
                Grid2.Cell(0, i).Locked = True
                'Grid2.Cell(0, i).SetFocus()
            End If
        Next i
        '
        ' Effacer Grid3
        ' *************
        '
        NbDivMesure = Det_NbDivisionMesure()
        c = ((mDeb - 1) * NbDivMesure) + 1 ' colonne de début de la 1ere mesure à traiter
        ' variables pour déterminer le n° de mesure en cours (équivalent à colonne de Grid2)
        m = mDeb
        ComptMes = 1
        FIN = mFin * NbDivMesure 'nombre total de colonnes de grid3
        For j = c To FIN  ' FIN -1 est l'index de la dernière colonne
            If Grid3.Cell(2, j).BackColor = Couleur_Accord_Grid3 Then
                '                '
                ' Effacement des Informations
                ' ***************************
                ' Détermination des index t et ct à partir de Grid3
                ct = 0 '                
                For i = j To 0 Step -1
                    ct = ct + 1
                    If Trim(Grid3.Cell(2, i).Text) <> "" Then
                        t = Val(Trim(Grid3.Cell(2, i).Text)) '- 1
                        Exit For
                    End If
                Next i
                '
                ' Effacement des infos dans TableEventH
                a = Trim(m) + "." + Trim(t) + "." + Trim(ct)
                If Trim(a) <> "1.1.1" Then ' t = 0) ne jamais effacer l'accord du temp=1 de la mesure=1 ()
                    '
                    'RAZ_Détails(TableEventH(m, t, ct).Ligne)
                    '
                    TableEventH(m, t, ct).Accord = ""
                    TableEventH(m, t, ct).Gamme = ""
                    TableEventH(m, t, ct).Tonalité = ""
                    TableEventH(m, t, ct).Position = ""
                    TableEventH(m, t, ct).Mode = ""
                    TableEventH(m, t, ct).Marqueur = ""
                    TableEventH(m, t, ct).Détails = ""
                    TableEventH(m, t, ct).Ligne = -1
                    '


                End If
                '
                ' Effacement des Couleurs
                ' ***********************
                '
                If Not (j = 1) Then ' ne jamais effacer a couleur de la mesure 1
                    If Trim(Grid3.Cell(2, j).Text) <> "" Then
                        tt = Val(Trim(Grid3.Cell(2, j).Text))
                        If EstPair(t) Then
                            Grid3.Cell(2, j).BackColor = Couleur_CTemps
                            Grid3.Cell(2, j).ForeColor = Color.Black
                        Else
                            Grid3.Cell(2, j).BackColor = Couleur_Temps
                            Grid3.Cell(2, j).ForeColor = Color.Black
                        End If
                    Else
                        Grid3.Cell(2, j).BackColor = Couleur_CTemps
                        Grid3.Cell(2, j).ForeColor = Color.Black
                    End If
                End If
                '
            End If
            ' Comptage des N° de Mesures
            ' **************************
            ComptMes = ComptMes + 1
            If ComptMes = NbDivMesure + 1 Then
                ComptMes = 1
                m = m + 1
            End If
        Next j
        '
        '
        Grid1.Refresh()
        Grid2.Refresh()
        Grid1.AutoRedraw = True
        Grid2.AutoRedraw = True

        'Ecriture_Entrée_Ds_CompoGrid()
        '
        Grid2.Refresh()
        Grid3.Refresh()
        Grid2.AutoRedraw = True
        Grid3.AutoRedraw = True
    End Sub
    Sub Effacer_Grid3(mDeb As Integer, mFin As Integer)
        Dim a As String
        Dim i, j As Integer
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer

        Grid3.ActiveCell.Locked = True
        '
        For i = mDeb To mFin
            If Grid3.ActiveCell.BackColor = Couleur_Accord_Grid3 Then
                ' déterminaton des index
                ' **********************
                t = -1
                ct = 1
                For j = i To 0 Step -1
                    If Trim(Grid3.Cell(2, j).Text) <> "" And t = -1 Then
                        t = Val(Trim(Grid3.Cell(2, j).Text)) '- 1
                    Else
                        If t = -1 Then
                            ct = ct + 1
                        End If
                    End If
                    If Trim(Grid3.Cell(1, j).Text) <> "" Then
                        m = Val(Trim(Grid3.Cell(1, j).Text))
                        Exit For
                    End If

                Next j
                ' Effacement de l'Accord
                ' **********************
                '
                RAZ_Détails(TableEventH(m, t, ct).Ligne)
                '
                TableEventH(m, t, ct).Position = ""
                TableEventH(m, t, ct).Accord = ""
                TableEventH(m, t, ct).Gamme = ""
                TableEventH(m, t, ct).Ligne = -1
                TableEventH(m, t, ct).Marqueur = ""
                TableEventH(m, t, ct).Détails = ""
                TableEventH(m, t, ct).Vel = ""
                TableEventH(m, t, ct).Racine = ""
                '
                i = Grid3.ActiveCell.Row
                j = Grid3.ActiveCell.Col
                '
                Grid2.AutoRedraw = False
                Grid3.AutoRedraw = False
                '
                ' maj couleur accents dans Grid3
                ' ******************************
                If ct = 1 Then
                    If EstPair(t) Then
                        Grid3.ActiveCell.BackColor = Couleur_CTemps
                        Grid3.ActiveCell.ForeColor = Color.Black
                    Else
                        Grid3.ActiveCell.BackColor = Couleur_Temps
                        Grid3.ActiveCell.ForeColor = Color.Black
                    End If
                Else
                    Grid3.ActiveCell.BackColor = Couleur_CTemps
                    Grid3.ActiveCell.ForeColor = Color.Black
                End If
                '
                ' Mise a jour de grid2
                ' ********************
                a = ChaineAccord(m)
                If Trim(a) = "" Then
                    Grid2.Cell(1, m).Text = ""
                    Grid2.Cell(1, m).BackColor = Color.White
                Else
                    Grid2.Cell(1, m).Text = Trim(a)
                End If
                '
                EcritUneFois = True
            End If
        Next i
        '
        Grid2.AutoRedraw = True
        Grid3.AutoRedraw = True
        Grid2.Refresh()
        Grid3.Refresh()
        '
        Ecriture_Entrée_Ds_CompoGrid()
    End Sub
    Sub Coller_Grid2()
        Dim i, j, k As Integer
        Dim m, t, ct As Integer
        Dim Der_Mesure_aEffacer As Integer
        Dim a As String
        Dim tbl() As String
        Dim Nb_Mesures As Integer

        Try
            ' Effacer la zone à copier
            ' ************************
            k = TCopie.Item(0).Nb_Items
            Nb_Mesures = TCopie.Item(k).m - TCopie.Item(0).m
            Der_Mesure_aEffacer = Grid2.Selection.FirstCol + Nb_Mesures ' détermination de la dernière mesure à effacer
            If Der_Mesure_aEffacer <= nbMesures Then
                ZAnnulation_Sauvegarde(Grid2.Selection.FirstCol, Der_Mesure_aEffacer) ' sauvegarde pour CRL Z
                Effacer_Grid2_3(Grid2.Selection.FirstCol, Der_Mesure_aEffacer)
                '
                i = 0
                '
                Do
                    If TCopie.Item(i).Actif = True Then

                        m = Grid2.Selection.FirstCol + TCopie.Item(i).Décalage
                        t = TCopie.Item(i).t
                        ct = TCopie.Item(i).ct
                        '
                        ' Mise à jour de TableEventH
                        ' **************************
                        TableEventH(m, t, ct).Tonalité = TCopie.Item(i).Tonalité
                        TableEventH(m, t, ct).Accord = TCopie.Item(i).Accord
                        TableEventH(m, t, ct).Gamme = TCopie.Item(i).Gamme
                        TableEventH(m, t, ct).Mode = TCopie.Item(i).Mode
                        TableEventH(m, t, ct).Degré = TCopie.Item(i).Degré
                        TableEventH(m, t, ct).Marqueur = TCopie.Item(i).Marqueur
                        TableEventH(m, t, ct).Détails = TCopie.Item(i).Détails
                        TableEventH(m, t, ct).Vel = TCopie.Item(i).Vel
                        TableEventH(m, t, ct).Racine = TCopie.Item(i).Racine
                        '
                        '
                        '
                        '
                        Entrée_Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                        TableEventH(m, t, ct).Position = Entrée_Position
                        '

                        Grid2.AutoRedraw = False
                        Grid3.AutoRedraw = False
                        ' Ecriture de l'accord dans la grille Grid2
                        ' *****************************************

                        Grid2.Cell(1, m).Text = ChaineAccord(m)
                        '
                        ' Mise à jour correspondante dans Grid3
                        ' *************************************
                        tbl = Split(Trim(TCopie.Item(i).Tonalité))
                        a = tbl(0) ' note de la tonalité courante
                        j = Det_IndexGrid3_De_ColGrid2(m)
                        j = (j) + ((t - 1) * Det_NbDivTemps2(t)) + (ct - 1) ' position dans grid3
                        If j <> 1 Then
                            Grid3.Cell(2, j).BackColor = Couleur_Accord_Grid3
                            Grid3.Cell(2, j).ForeColor = Color.White
                            '
                            If m <> 1 Then
                                Grid2.Cell(1, m).BackColor = DicoCouleur.Item(a) ' la couleur est fonction de la tonalité
                                Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(a)
                            Else
                                Grid2.Cell(1, m).BackColor = Color.Red
                                Grid2.Cell(1, m).ForeColor = Color.White
                            End If
                            Grid2.Refresh()
                            '
                        End If
                        '
                        Grid2.AutoRedraw = True
                        Grid3.AutoRedraw = True
                        Grid2.Refresh()
                        Grid3.Refresh()
                        '
                        ' Ecriture_Entrée_Ds_CompoGrid()
                        i = i + 1
                    End If

                Loop Until i > k

                Ecriture_Entrée_Ds_CompoGrid()
            Else
                If Module1.LangueIHM = "fr" Then
                    Avertis = "Vous ne pouvez pas coller des données après la dernière mesure."
                Else
                    Avertis = "You can not paste data after the last measure."
                End If
                MessageHV.PContenuMess = Avertis
                MessageHV.PTypBouton = "OK"
                Cacher_FormTransparents()
                MessageHV.ShowDialog()
            End If
        Catch ex As Exception
        End Try
    End Sub
    Sub Coller_Grid3()
        Dim k, p As Integer
        Dim m, t, ct As Integer
        Dim Der_colGrid3_aEffacer As Integer
        Dim tbl() As String
        Dim a, b As String
        Dim Nb_Mesures As Integer

        If TCopie.Count <> 0 Then
            ' Effacer la zone à copier
            ' ************************
            k = TCopie.Item(0).Nb_Items ' nombre d'items actifs dans le tampon de copie (toujours en position 0)
            '

            Nb_Mesures = TCopie.Item(k).m - TCopie.Item(0).m
            Der_colGrid3_aEffacer = Grid3.Selection.FirstCol + Nb_Mesures ' détermination de la dernière mesure à effacer
            'Effacer_Grid3(Grid3.Selection.FirstCol, Der_colGrid3_aEffacer)
            '
            'i = 0
            'Do
            If TCopie.Item(0).Actif = True Then ' pour Grid3, si la copie vient de grid2,  on prend toujours le 1er accord de la sélection si elle contient plusieurs accords

                p = Grid3.Selection.FirstCol '+ TCopie.Item(0).Décalage ' colonne dans Grid3
                a = Det_IndexDansGrid3(p)
                tbl = Split(a)
                m = Val(tbl(0))
                t = Val(tbl(1))
                ct = Val(tbl(2))
                '
                b = Trim(tbl(0)) + "." + Trim(tbl(1)) + "." + Trim(tbl(2))
                '
                ' Mise à jour TableEventH
                ' ***********************
                TableEventH(m, t, ct).Tonalité = TCopie.Item(0).Tonalité '
                TableEventH(m, t, ct).Accord = TCopie.Item(0).Accord
                TableEventH(m, t, ct).Gamme = TCopie.Item(0).Gamme
                TableEventH(m, t, ct).Mode = TCopie.Item(0).Mode
                TableEventH(m, t, ct).Degré = TCopie.Item(0).Degré ' 
                TableEventH(m, t, ct).Marqueur = TCopie.Item(0).Marqueur
                TableEventH(m, t, ct).Détails = TCopie.Item(0).Détails
                TableEventH(m, t, ct).Vel = TCopie.Item(0).Vel
                TableEventH(m, t, ct).Racine = TCopie.Item(0).Racine
                '
                Entrée_Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                TableEventH(m, t, ct).Position = Entrée_Position
                '
                Grid2.AutoRedraw = False
                Grid3.AutoRedraw = False
                '
                ' Ecriture de l'accord dans la grille Grid2
                ' *****************************************
                If Trim(Grid2.Cell(1, m).Text) = "" Then
                    Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
                    Grid2.Cell(1, m).Text = TCopie.Item(0).Accord
                    Grid2.Cell(1, m).Locked = False
                    Grid2.ReadonlyFocusRect = FlexCell.FocusRectEnum.Solid
                Else
                    Grid2.Cell(1, m).Text = ChaineAccord(m)
                End If
                '
                ' Mise à jour des couleurs correspondantes dans Grid2 et Grid3
                ' ************************************************************
                tbl = Split(Trim(TCopie.Item(0).Tonalité))
                a = Trim(tbl(0))
                If Trim(b) <> "1.1.1" Then
                    Grid3.Cell(2, p).BackColor = Couleur_Accord_Grid3
                    Grid3.Cell(2, p).ForeColor = Color.White
                    '
                    Grid2.Cell(1, m).BackColor = DicoCouleur.Item(a) ' la couleur est fonction de la tonalité
                    Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(a)
                    Grid2.Refresh()
                    '
                End If
                '
                Grid2.AutoRedraw = True
                Grid3.AutoRedraw = True
                Grid2.Refresh()
                Grid3.Refresh()
                '

            End If
            'i = i + 1
            'Loop Until i > k
            Ecriture_Entrée_Ds_CompoGrid()
        End If
    End Sub

    Private Sub CollerToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CollerToolStripMenuItem.Click, Button22.Click, Flot_Coller.Click
        Select Case OngletCours_Edition
            Case N_PisteAcc  ' Onglet HyperArp
                Coller()
            Case N_PistePianoR1, N_PistePianoR2, N_PistePianoR3, N_PistePianoR4, N_PistePianoR5, N_PistePianoR6, N_PistePianoR7, N_PistePianoR8 ' Onglets PianoRoll
                With listPIANOROLL.Item(OngletCours_Edition - 1)
                    If .Orig_PianoR.Orig1 = OrigPianoCourbe.Piano Then ' pianoroll
                        .CollerData2()

                    Else                                               ' courbes
                        Dim ind As Integer = .Orig_PianoR.N_Courbe
                        .Orig_PianoR.Vérouillage = True ' pour désactiver le Tracé de la courbe le temps qye le "coller" s'opère
                        .GridCourbes.Item(ind).Selection.PasteData()
                        .Orig_PianoR.Vérouillage = False ' reprise de la possibilité du Tracé
                    End If
                End With

            Case N_PisteDrums ' Onglet DrumEdit
                If Drums.PGridOrigine = "Grid1" Then
                    If Drums.Grid1.Selection.FirstCol > 3 And Drums.Grid1.Selection.FirstRow > 0 Then
                        Drums.DéVérouillerGrid1()   ' les cellules ont été vérrouillées dans drums.grid1_Keydown
                        Drums.Sauv_ClipAnnuler()
                        Drums.Grid1.Selection.PasteData()
                        ii = Drums.Det_NumPréset2()
                        Drums.Maj_Préset(ii)
                        Drums.DessinDiv()           ' cette méthode contient Autoredraw=false,true et Refresh
                        Drums.VérouillerGrid1()     ' les cellules seront déverrouillées à la fin de Drums.Grid1_KeyUp
                    End If
                End If
                If Drums.PGridOrigine = "Grid2" Then
                    If Drums.Grid2.ActiveCell.Col > 0 Then
                        Drums.Grid2.Range(0, 0, Drums.Grid2.Rows - 1, Drums.Grid2.Cols - 1).Locked = False ' vérouiller les cellules
                        Drums.Grid2.Selection.PasteData()
                        Drums.Grid2.Range(0, 0, Drums.Grid2.Rows - 1, Drums.Grid2.Cols - 1).Locked = True ' déverouiller les cellules
                    End If
                End If
            Case N_Courbexp
                '
                Courbexp.AutoRedraw = False
                'Courbexp.Range(1, 3, Courbexp.Rows - 1, Courbexp.Cols - 1).Locked = False
                '
                Courbexp.Selection.PasteData()
                '
                'Courbexp.Range(1, 3, Courbexp.Rows - 1, Courbexp.Cols - 1).Locked = True
                Courbexp.AutoRedraw = True
                Courbexp.Refresh()
                '
        End Select
        Calcul_AutoVoicingZ()
    End Sub
    Sub Coller()
        Dim ColGrid2 As Integer

        Select Case DerGridCliquée
            Case GridCours.Grid2
                If OrigineEdition = GridCours.Grid2 Then
                    Coller_Grid2()
                    RAZ_Grid4()
                    LockageColonnes()
                    '
                    ' Mettre à jour le Piano Roll et Drumedit
                    Maj_PianoRoll()
                    Maj_DrumEdit()
                End If
            Case GridCours.Grid3
                'If OrigineEdition = GridCours.Grid3 Then '
                ' on utilise le fonctionnement de l'annulation dans Grid2 
                ' c'est toute la mesure qui est restituée dans sont état précédent.
                If (Grid3.ActiveCell.Col) <= ((nbMesures * nbColonnesGrid3ParMesure)) Then
                    DerGridCliquée = GridCours.Grid2
                    ColGrid2 = Det_IndexGrdid2DSGrid3(Grid3.ActiveCell.Col)
                    Grid2.Cell(1, ColGrid2).SetFocus()
                    'Copie()
                    ZAnnulation_Sauvegarde(Grid2.Selection.FirstCol, Grid2.Selection.LastCol)
                    '
                    DerGridCliquée = GridCours.Grid3
                    Coller_Grid3()
                    RAZ_Grid4()
                    LockageColonnes()
                    '
                    ' Mettre à jour le Piano Roll et Drumedit
                    Maj_PianoRoll()
                    Maj_DrumEdit()
                End If
        End Select
    End Sub
    Function Det_MesureAPartirColGrid3(colGrid3 As Integer) As Integer
        Dim i As Integer
        Det_MesureAPartirColGrid3 = 0
        For i = colGrid3 To 1 Step -1
            If Trim(Grid3.Cell(2, i).Text) = "1" Then
                Det_MesureAPartirColGrid3 = Val(Grid3.Cell(1, i).Text)
                Exit For
            End If
        Next
    End Function
    Sub ZAnnulation_Sauvegarde(mdeb As Integer, mfin As Integer)
        Dim i As Integer
        Dim m, t, ct As Integer
        Dim Détection_Mesure_Vide As Boolean = True
        RAZ_ZAnnulation()
        i = -1
        Détection_Mesure_Vide = True
        ZAnnulation_FirstCol = mdeb
        For m = mdeb To mfin
            For t = 0 To UBound(TableEventH, 2)
                For ct = 0 To UBound(TableEventH, 3)
                    If TableEventH(m, t, ct).Ligne <> -1 Then
                        '
                        Détection_Mesure_Vide = False
                        ZAnnulation_Valide = True
                        ' Gestion du nombre de Tampons
                        ' ****************************
                        i = i + 1
                        If i > TZAnnulation.Count - 1 Then
                            TZAnnulation.Add(New TamponCopie)
                        End If
                        ' Maj Tampon annulation
                        ' *********************
                        TZAnnulation(i).Actif = True
                        TZAnnulation(i).Mesure_Effacer = -1
                        TZAnnulation(i).Tonalité = TableEventH(m, t, ct).Tonalité
                        TZAnnulation(i).Accord = TableEventH(m, t, ct).Accord
                        TZAnnulation(i).Gamme = TableEventH(m, t, ct).Gamme
                        TZAnnulation(i).Mode = TableEventH(m, t, ct).Mode
                        TZAnnulation(i).Degré = TableEventH(m, t, ct).Degré
                        TZAnnulation(i).Marqueur = TableEventH(m, t, ct).Marqueur
                        TZAnnulation(i).Détails = TableEventH(m, t, ct).Détails
                        TZAnnulation(i).Vel = TableEventH(m, t, ct).Vel
                        TZAnnulation(i).Racine = TableEventH(m, t, ct).Racine
                        '
                        TZAnnulation(i).m = m
                        TZAnnulation(i).t = t
                        TZAnnulation(i).ct = ct
                        '
                        TZAnnulation(i).Décalage = m - mdeb
                        '
                        TZAnnulation.Item(0).Nb_Items = i ' le nombre d'items de la copie est mis à jors uniquement dans le 1er item
                    End If
                Next ct
            Next t
            If Détection_Mesure_Vide = True Then
                i = i + 1
                If i > TZAnnulation.Count - 1 Then
                    TZAnnulation.Add(New TamponCopie)
                End If
                TZAnnulation(i).Actif = True
                TZAnnulation(i).Mesure_Effacer = m
                TZAnnulation(i).m = m
                TZAnnulation.Item(0).Nb_Items = i
                ZAnnulation_Valide = True
            Else
                Détection_Mesure_Vide = True
            End If
        Next m
        '
    End Sub
    Sub RAZ_ZAnnulation()
        Dim i As Integer

        If TZAnnulation.Count > 0 Then
            TZAnnulation.Clear()
            For i = 0 To TZAnnulation.Count - 1
                TZAnnulation.Item(i).Actif = False
            Next i
        End If
    End Sub
    Sub ZAnnulation_Restitution()
        Dim i, j, k As Integer
        Dim m, t, ct As Integer
        Dim Der_Mesure_aEffacer As Integer
        Dim a As String
        Dim tbl() As String
        Dim Nb_Mesures As Integer

        If ZAnnulation_Valide = True Then
            ZAnnulation_Valide = False
            ' Effacer la zone à copier
            ' ************************
            k = TZAnnulation.Item(0).Nb_Items
            Nb_Mesures = TZAnnulation.Item(k).m - TZAnnulation.Item(0).m
            Der_Mesure_aEffacer = ZAnnulation_FirstCol + Nb_Mesures ' détermination de la dernière mesure à effacer
            Effacer_Grid2_3(ZAnnulation_FirstCol, Der_Mesure_aEffacer)
            '
            i = 0
            '
            Grid2.AutoRedraw = False
            Grid3.AutoRedraw = False
            Do
                If TZAnnulation.Item(i).Actif = True Then
                    If TZAnnulation(i).Mesure_Effacer = -1 Then

                        m = ZAnnulation_FirstCol + TZAnnulation.Item(i).Décalage
                        t = TZAnnulation.Item(i).t
                        ct = TZAnnulation.Item(i).ct
                        '
                        ' Mise à jour de TableEventH
                        ' **************************
                        TableEventH(m, t, ct).Accord = TZAnnulation.Item(i).Accord
                        TableEventH(m, t, ct).Gamme = TZAnnulation.Item(i).Gamme
                        TableEventH(m, t, ct).Mode = TZAnnulation.Item(i).Mode ' Mode = Gamme - le mode n'est pas affiché mais je garde l'info por le moment
                        TableEventH(m, t, ct).Tonalité = TZAnnulation.Item(i).Tonalité '
                        TableEventH(m, t, ct).Marqueur = TZAnnulation.Item(i).Marqueur

                        TableEventH(m, t, ct).Degré = TZAnnulation.Item(i).Degré
                        '
                        Entrée_Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                        TableEventH(m, t, ct).Position = Entrée_Position
                        TableEventH(m, t, ct).Détails = TZAnnulation.Item(i).Détails

                        TableEventH(m, t, ct).Vel = TZAnnulation.Item(i).Vel
                        TableEventH(m, t, ct).Racine = TZAnnulation.Item(i).Racine

                        Grid2.AutoRedraw = False
                        Grid3.AutoRedraw = False
                        '
                        ' Ecriture de l'accord dans la grille Grid2
                        ' *****************************************
                        If Trim(Grid2.Cell(1, m).Text) = "" Then
                            Grid2.Cell(1, m).Locked = False
                            Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
                            Grid2.Cell(1, m).Text = TZAnnulation.Item(i).Accord
                            Grid2.Cell(1, m).Locked = True
                            Grid2.ReadonlyFocusRect = FlexCell.FocusRectEnum.Solid
                        Else
                            Grid2.Cell(1, m).Text = ChaineAccord(m)
                        End If
                        '
                        ' Mise à jour correspondante dans Grid3
                        ' *************************************
                        tbl = Split(Trim(TZAnnulation.Item(i).Tonalité))
                        a = tbl(0) ' note de la tonalité courante
                        j = Det_IndexGrid3_De_ColGrid2(m)
                        j = (j) + ((t - 1) * Det_NbDivTemps2(t)) + (ct - 1) ' position dans grid3
                        If j <> 1 Then
                            Grid3.Cell(2, j).BackColor = Couleur_Accord_Grid3
                            Grid3.Cell(2, j).ForeColor = Color.White
                            '
                            If m <> 1 Then
                                Grid2.Cell(1, m).BackColor = DicoCouleur.Item(a) ' la couleur est fonction de la tonalité
                                Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(a)
                            Else
                                Grid2.Cell(1, m).BackColor = Color.Red ' la couleur est fonction de la tonalité
                                Grid2.Cell(1, m).ForeColor = Color.White
                            End If
                            'Grid2.Refresh()
                            '
                        End If
                        '
                        Grid2.AutoRedraw = True
                        Grid3.AutoRedraw = True
                        Grid2.Refresh()
                        Grid3.Refresh()
                    Else
                        Effacer_Grid2_3(TZAnnulation(i).Mesure_Effacer, TZAnnulation(i).Mesure_Effacer)
                        Grid2.Refresh()
                        Grid3.Refresh()
                    End If
                    'Ecriture_Entrée_Ds_CompoGrid()
                    i = i + 1
                End If
            Loop Until i > k
            Ecriture_Entrée_Ds_CompoGrid()
            Maj_PianoRoll()
            Maj_DrumEdit()
            Refresh_Courbexp()
        End If
    End Sub

    Private Sub NotesCommunes2_CheckedChanged(sender As Object, e As EventArgs)
        'NotesCommunes.Checked = NotesCommunes2.Checked
    End Sub

    Private Sub AnnulerToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AnnulerToolStripMenuItem.Click, Button14.Click, AnnulerToolStripMenuItem1.Click
        Select Case OngletCours_Edition
            Case N_PisteAcc ' Onglet HyperArp
                Annuler()
            Case N_PistePianoR1, N_PistePianoR2, N_PistePianoR3, N_PistePianoR4, N_PistePianoR5, N_PistePianoR6, N_PistePianoR7, N_PistePianoR8
                With listPIANOROLL.Item(OngletCours_Edition - 1)
                    If .Orig_PianoR.Orig1 = OrigPianoCourbe.Piano Then ' il n'y a pas d'annulation sur le trçage des courbes
                        'listPIANOROLL.Item(OngletCours_Edition - 1).AnnulerData2()
                    End If
                End With
                listPIANOROLL.Item(OngletCours_Edition - 1).ann_ctrlz()
            Case N_PisteDrums
                If Drums.PGridOrigine = "Grid1" Then
                    Drums.Restit_ClipAnnuler()
                End If
                'If Drums.PGridOrigine = "Grid2" Then
                'End If
        End Select
        Calcul_AutoVoicingZ()
    End Sub
    Sub Annuler()
        If Not (TZAnnulationGrid1.Grille = TamponInfoGrid1.TGrilleCours.Grid1 Or
            TZAnnulationGrid1.Grille = TamponInfoGrid1.TGrilleCours.Grid4) Then ' pas d'annulation pour grid1 et grid4 (seulement pour Grid2 et grid3
            ZAnnulation_Restitution()
        End If
    End Sub
    Private Sub MIDIResetToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MIDIResetToolStripMenuItem.Click
        MIDIReset()
    End Sub
    Sub MIDIReset()
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        ToutesNotesOff()
        Init_CTRLMIDI2()
    End Sub
    Private Sub MenuCalquesMIDI_Click(sender As Object, e As EventArgs)
        ExportCalqueMIDI()
    End Sub
    Sub ExportCalqueMIDI()
        Dim a As String
        '
        Try
            'If Trim(Grid2.Cell(1, Début.Value).Text) = "" Then
            'MsgBox("Le délimiteur de début doit pointer sur une mesure non vide")
            'Else
            If Det_NomCalquesMIDI() Then
                ' création Fichier Calques MIDI dont le nom est donné dans a
                ' **********************************************************
                a = CréationFichierTexteCalquesMIDI("FichierCalquesMIDI") ' FichierCalquesMIDI.mid est le nom du fichier MIDI qui va être généré.
                Création_MidiFile(a, 2)
                ' copie du fichier Calques MIDI dans le fichier choisi
                ' ****************************************************
                a = Création_CTemp() + "\" + "FichierCalquesMIDI" + ".mid" '
                If My.Computer.FileSystem.FileExists(FichierCalques) Then
                    My.Computer.FileSystem.DeleteFile(FichierCalques)
                End If
                My.Computer.FileSystem.CopyFile(a, FichierCalques) ' Fichier Calques est mis à jour dans Det_NomCalquesMIDI
            End If
            'End If
            'End If
        Catch ex As Exception
            a = ex.Message
        End Try
    End Sub

    Private Sub MenuMarqueurs_Click(sender As Object, e As EventArgs)
        ExportMarqueurs()
    End Sub
    Sub ExportMarqueurs()
        Dim a, b As String
        '
        Try
            If Det_Présence_Marqueurs2() Then
                If Det_NomMarqueursMIDI() Then
                    a = Création_CTemp() + "\" + "djgbv58147.mid" ' fichier midi temporaire (dans Documents/Hypervoicing/)
                    b = CréationFichierTexteMidiMarqueurs("FichierMarqueurs") ' FichiersMarqueurs.txt contient la pré-analyse à remettre à la construction du MidiFile
                    Création_MidiFile(b, 1) ' le fichier MIDI est écrit provisoirement dans "...\djgbv58147.mid"
                    '
                    If My.Computer.FileSystem.FileExists(FichierMIDI) Then ' FIchierMIDI contient le fichier d'enregistrement choisi par l'utilisateur
                        My.Computer.FileSystem.DeleteFile(FichierMIDI)
                    End If
                    My.Computer.FileSystem.CopyFile(a, FichierMIDI)
                End If
            Else
                If Module1.LangueIHM = "fr" Then
                    MsgBox("Il n'existe aucun marqueurs à exporter")
                Else
                    MsgBox("No markers to export")
                End If
            End If
        Catch ex As Exception
            a = ex.Message
        End Try
    End Sub
    Sub ExportChordsAsMarkers()
        Dim a As String
        '
        Try
            If Det_NomMarqueursMIDI() Then ' nom du fichier marqueurs
                a = Création_CTemp() + "\" + "djgbv58147.mid" ' fichier midi temporaire (dans Documents/Hypervoicing/)
                b = CréationFichierTexteChordsAsMarks("FichierMarqueurs") ' FichiersMarqueurs.txt contient la pré-analyse à remettre à la construction du MidiFile
                Création_MidiFile(b, 1) ' le fichier MIDI est écrit provisoirement dans "...\djgbv58147.mid"

                '
                If My.Computer.FileSystem.FileExists(FichierMIDI) Then ' FIchierMIDI contient le fichier d'enregistrement choisi par l'utilisateur
                    My.Computer.FileSystem.DeleteFile(FichierMIDI)
                End If
                My.Computer.FileSystem.CopyFile(a, FichierMIDI) ' copie du fichier midi provisoire dans le fichier midi choisi par l'utilisateur
            End If
        Catch ex As Exception
            a = ex.Message
        End Try
    End Sub
    Sub ExportScalesAsMarkers()
        Dim a As String
        '
        Try
            If Det_NomMarqueursMIDI() Then ' nom du fichier marqueurs
                a = Création_CTemp() + "\" + "djgbv58147.mid" ' fichier midi temporaire (présent dans Utilisateur/groch/Documents/Hypervoicing/)
                b = CréationFichierTexteScalesAsMarks("FichierMarqueurs") ' FichiersMarqueurs.txt contient la pré-analyse à remettre à la construction du MidiFile (présent dans Utilisateur/groch/Documents/Hypervoicing/)
                Création_MidiFile(b, 1) ' le fichier MIDI est écrit provisoirement dans "...\djgbv58147.mid"

                '
                If My.Computer.FileSystem.FileExists(FichierMIDI) Then ' FIchierMIDI contient le fichier d'enregistrement choisi par l'utilisateur
                    My.Computer.FileSystem.DeleteFile(FichierMIDI)
                End If
                My.Computer.FileSystem.CopyFile(a, FichierMIDI) ' copie du fichier midi provisoire dans le fichier midi choisi par l'utilisateur
            End If
        Catch ex As Exception
            a = ex.Message
        End Try
    End Sub
    Function CréationFichierTexteChordsAsMarks(NomfichierMidi As String) As String

        Dim m, t, ct As Integer
        Dim a As String = ""
        Dim ligne1 As String = ""
        Dim Marqueur_Cours As String = ""
        Dim Position As String
        '
        Try
            ' création du fichier texte de base
            ' *********************************
            '
            a = Création_CTemp() ' My.Application.Info.DirectoryPath
            a = a + "\" + NomfichierMidi + ".txt" ' prendre en compte le nom du fichier
            '
            If My.Computer.FileSystem.FileExists(a) Then
                My.Computer.FileSystem.DeleteFile(a)
            End If
            '
            Dim fileWriter = My.Computer.FileSystem.OpenTextFileWriter(a, True)
            '
            fileWriter.WriteLine("NomFichier;" + Trim(NomfichierMidi))
            fileWriter.WriteLine("Tempo;" + Str(Trim(Transport.Tempo.Value)))
            fileWriter.WriteLine("Métrique;" + Trim(Métrique.Text))

            ' Maj_Présence_Marqueurs()
            'Présence_Marqueur = False
            'If Présence_Marqueur Then ' Présence_Marqueur est mis à jour dans Maj_Présence_Marqueurs
            If Module1.LangueIHM = "fr" Then
                fileWriter.WriteLine("NomPiste;0;Marq. Accords") ' la piste des Marqueurs a le N° 0
            Else
                fileWriter.WriteLine("NomPiste;0;Mark. Chords") ' la piste des Marqueurs a le N° 0
            End If
            'End If
            '

            For m = 0 To UBound(TableEventH, 1)
                For t = 0 To UBound(TableEventH, 2) '- 1
                    For ct = 0 To UBound(TableEventH, 3)
                        If TableEventH(m, t, ct).Ligne <> -1 Then
                            '
                            ' repérage des Marqueurs
                            ' **********************
                            Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                                ligne1 = "Marqueur;" + TableEventH(m, t, ct).Accord + ";" + Trim(DébutEVT(Position)) + ";"
                                Marqueur_Cours = Trim(TableEventH(m, t, ct).Accord)
                                fileWriter.WriteLine(ligne1)
                            End If
                        End If
                        '
                    Next ct
                Next t
            Next m
            '
            fileWriter.Close()
            '
            ' Remise du chemin du fichier à la procédure appelante
            ' ****************************************************
            Return a ' remise du chemin + fichier
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'CréationFichierTexteMidiMarqueurs' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Function
    Function CréationFichierTexteScalesAsMarks(NomfichierMidi As String) As String

        Dim m, t, ct As Integer
        Dim a As String = ""
        Dim ligne1 As String = ""
        Dim Marqueur_Cours As String = ""
        Dim Position As String
        Dim prcdt As String = "" ' gamme précédente
        '
        Try
            ' création du fichier texte de base
            ' *********************************
            '
            a = Création_CTemp() ' My.Application.Info.DirectoryPath
            a = a + "\" + NomfichierMidi + ".txt" ' prendre en compte le nom du fichier
            '
            If My.Computer.FileSystem.FileExists(a) Then
                My.Computer.FileSystem.DeleteFile(a)
            End If
            '
            Dim fileWriter = My.Computer.FileSystem.OpenTextFileWriter(a, True)
            '
            fileWriter.WriteLine("NomFichier;" + Trim(NomfichierMidi))
            fileWriter.WriteLine("Tempo;" + Str(Trim(Transport.Tempo.Value)))
            fileWriter.WriteLine("Métrique;" + Trim(Métrique.Text))

            ' Maj_Présence_Marqueurs()
            'Présence_Marqueur = False
            'If Présence_Marqueur Then ' Présence_Marqueur est mis à jour dans Maj_Présence_Marqueurs
            If Module1.LangueIHM = "fr" Then
                fileWriter.WriteLine("NomPiste;0;Marq. Gammes") ' la piste des Marqueurs a le N° 0
            Else
                fileWriter.WriteLine("NomPiste;0;Mark. Scales") ' la piste des Marqueurs a le N° 0
            End If
            'End If
            '

            For m = 0 To UBound(TableEventH, 1)
                For t = 0 To UBound(TableEventH, 2) '- 1
                    For ct = 0 To UBound(TableEventH, 3)
                        If TableEventH(m, t, ct).Ligne <> -1 Then
                            '
                            ' repérage des Marqueurs
                            ' **********************
                            Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            If Trim(TableEventH(m, t, ct).Gamme) <> "" And Trim(TableEventH(m, t, ct).Gamme) <> Trim(prcdt) Then
                                ligne1 = "Marqueur;" + TableEventH(m, t, ct).Gamme + ";" + Trim(DébutEVT(Position)) + ";"
                                Marqueur_Cours = Trim(TableEventH(m, t, ct).Gamme)
                                fileWriter.WriteLine(ligne1)
                                prcdt = Trim(TableEventH(m, t, ct).Gamme)
                            End If
                        End If
                        '
                    Next ct
                Next t
            Next m
            '
            fileWriter.Close()
            '
            ' Remise du chemin du fichier à la procédure appelante
            ' ****************************************************
            Return a ' remise du chemin + fichier
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'CréationFichierTexteMidiMarqueurs' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Function






    Function CréationFichierTexteMidiMarqueurs(NomfichierMidi As String) As String

        Dim m, t, ct As Integer
        Dim a As String
        Dim ligne1 As String = ""
        Dim Marqueur_Cours As String = ""
        Dim Position As String
        '
        CréationFichierTexteMidiMarqueurs = ""
        Try
            ' création du fichier texte de base
            ' *********************************
            '
            a = Création_CTemp() ' My.Application.Info.DirectoryPath
            a = a + "\" + NomfichierMidi + ".txt" ' prendre en compte le nom du fichier
            '
            If My.Computer.FileSystem.FileExists(a) Then
                My.Computer.FileSystem.DeleteFile(a)
            End If
            '
            Dim fileWriter = My.Computer.FileSystem.OpenTextFileWriter(a, True)
            '
            fileWriter.WriteLine("NomFichier;" + Trim(NomfichierMidi))
            fileWriter.WriteLine("Tempo;" + Transport.Tempo.Value.ToString)
            fileWriter.WriteLine("Métrique;" + Trim(Métrique.Text))

            Maj_Présence_Marqueurs()
            'Présence_Marqueur = False
            If Présence_Marqueur Then ' Présence_Marqueur est mis à jour dans Maj_Présence_Marqueurs
                If Module1.LangueIHM = "fr" Then
                    fileWriter.WriteLine("NomPiste;0;Marqueurs") ' la piste des Marqueurs a le N° 0
                Else
                    fileWriter.WriteLine("NomPiste;0;Markers") ' la piste des Marqueurs a le N° 0
                End If
            End If
            '
            For m = 0 To UBound(TableEventH, 1)
                For t = 0 To UBound(TableEventH, 2) '- 1
                    For ct = 0 To UBound(TableEventH, 3)
                        If TableEventH(m, t, ct).Ligne <> -1 Then
                            ' repérage des Marqueurs
                            ' **********************
                            Position = Trim(Str(m)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            If Trim(TableEventH(m, t, ct).Marqueur) <> "" Then
                                ligne1 = "Marqueur;" + TableEventH(m, t, ct).Marqueur + ";" + Trim(DébutEVT(Position)) + ";"
                                Marqueur_Cours = Trim(TableEventH(m, t, ct).Marqueur)
                                fileWriter.WriteLine(ligne1)
                            End If
                        End If
                        '
                    Next ct
                Next t
            Next m
            '
            fileWriter.Close()
            '
            ' Remise du chemin du fichier à la procédure appelante
            ' ****************************************************
            CréationFichierTexteMidiMarqueurs = a ' remise du chemin + fichier
        Catch ex As Exception
            MessageHV.PContenuMess = "Erreur interne : procédure 'CréationFichierTexteMidiMarqueurs' : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Function

    Function Det_Présence_Marqueurs() As Boolean
        Dim i As Integer


        Det_Présence_Marqueurs = False
        '
        Grid1.AutoRedraw = False
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 2).Text) <> "" Then ' présence marqueur
                If Trim(Grid1.Cell(i, 1).Text) <> "" Then ' présence position ?
                    Det_Présence_Marqueurs = True
                    Exit For
                End If
            End If
        Next i
        Grid1.AutoRedraw = True

    End Function
    Function Det_Présence_Marqueurs2() As Boolean
        Dim m, t, ct As Integer

        Det_Présence_Marqueurs2 = False
        '
        For m = 0 To UBound(TableEventH, 1) '- 1
            For t = 0 To UBound(TableEventH, 2) '- 1
                For ct = 0 To UBound(TableEventH, 3) '- 1
                    If Trim(TableEventH(m, t, ct).Marqueur) <> "" And Trim(TableEventH(m, t, ct).Position) <> "" Then
                        Det_Présence_Marqueurs2 = True
                        Exit For
                    End If
                Next ct
            Next t
        Next m
        '
    End Function
    Function Det_RacineVoisine(mesure As Integer) As String
        Dim m, t, ct As Integer
        Dim a As String
        Dim sortir As Boolean = False

        a = "c2"
        '
        For m = mesure To 0 Step -1 '- 1
            For t = UBound(TableEventH, 2) To 0 Step -1 '- 1
                For ct = UBound(TableEventH, 3) To 0 Step -1 '- 1
                    If Trim(TableEventH(m, t, ct).Racine) <> "" And Trim(TableEventH(m, t, ct).Position) <> "" Then
                        a = Trim(TableEventH(m, t, ct).Racine)
                        sortir = True
                        Exit For
                    End If
                Next ct
                If sortir = True Then Exit For
            Next t
            If sortir = True Then Exit For
        Next m
        '
        Return a
    End Function
    Private Sub MenuExportsMIDI_MouseHover(sender As Object, e As EventArgs) Handles MenuExportsMIDI.MouseHover

    End Sub
    Sub CAD_Init_Aff()
        Dim i As Integer

        If EnChargement = False Then
            For i = 0 To 4
                TabCadDegrés.Item(i).Visible = True
                TabCad.Item(i).Visible = True
                TabCadDegrés.Item(i).Text = ""
                TabCad.Item(i).Text = ""
                TabCad.Item(i).Visible = False
                TabCadDegrés.Item(i).Visible = False
                '
                '
            Next i
        End If
    End Sub

    Sub Cad_ComplèteMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            '
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord

            '
            TabCadDegrés.Item(1).Text = "IV"
            '
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "V"
            '
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "I"
            '
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord

            '
            ''Label28.Size = New Size(420, 33)
            '

            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_251Maj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "II"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "V"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "I"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(426, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_DemiMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "V"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "II"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "V"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_ParfaiteMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "V"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "I"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_PlagaleMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "IV"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "I"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_Plagale2Maj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "V"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "VI"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "IV"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord


            TabCadDegrés.Item(4).Text = "I"
            TabCadDegrés.Item(4).Visible = True ' degré
            TabCad.Item(4).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(535, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_ModaleMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "IV"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "II"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "IV"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_RompueMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "V"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "VI"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_Rompue2Maj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "V"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "IV"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "V"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord


            TabCadDegrés.Item(4).Text = "VI"
            TabCadDegrés.Item(4).Visible = True ' degré
            TabCad.Item(4).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(535, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_Rompue3Maj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "IV"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "V"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "VI"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(426, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_Modale2Maj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "III"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "VI"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_NapolitaineMaj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "III"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "IV"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "III"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_Modale3Maj()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "VII"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "VI"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub CAD_Maj_TableGlobalAcc()
        Dim i, j As Integer

        Dim typAccord As Integer

        '
        For i = 0 To 6
            For j = 0 To 1
                CAD_TableGlobalAcc(j, 0, i) = TableGlobalAcc(j, 0, i)
                CAD_TableGlobalAcc(j, 1, i) = TableGlobalAcc(j, 1, i)
            Next j
        Next
        '
        typAccord = ComboBox6.SelectedIndex
        '
        Select Case typAccord
            Case 0
                CAD_Menu3_notes()
            Case 1
                CAD_Menu4_notes()
        End Select
        '
    End Sub



    Public Sub CAD_Maj_TableCoursAccInit()
        Dim i As Integer

        For i = 0 To 6
            CAD_TableCoursAcc(i).TyAcc = "3 Notes"
            CAD_TableCoursAcc(i).Accord = TableGlobalAcc(0, 0, i)
            CAD_TableCoursAcc(i).Octave = "0"
            '
        Next
        '
        'CAD_Maj_RenversementInit()
    End Sub



    Function Det_NoteDegré(degré As String) As String
        Dim tona As String
        Dim i As Integer
        '
        Det_NoteDegré = "c"

        i = -1
        tona = LCase(Det_TonaCours())
        '
        Do
            i = i + 1
        Loop Until tona = TabNotes(i) Or i = 36
        '
        Select Case degré
            Case "I"
                Det_NoteDegré = UCase(TabNotes(i))
            Case "II"
                Det_NoteDegré = UCase(TabNotes(i + 2))
            Case "III"
                Det_NoteDegré = UCase(TabNotes(i + 4))
            Case "IV"
                Det_NoteDegré = UCase(TabNotes(i + 5))
            Case "V"
                Det_NoteDegré = UCase(TabNotes(i + 7))
            Case "VI"
                Det_NoteDegré = UCase(TabNotes(i + 9))
            Case "VII"
                Det_NoteDegré = UCase(TabNotes(i + 11))
        End Select
    End Function

    Private Sub TabCad_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
        Dim ind As Integer
        Dim com As Label = sender

        '
        ind = Val(com.Tag)
        '
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        RAZ_AffNoteAcc()
    End Sub
    Private Sub TabCad_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
        Dim ind As Integer
        Dim com As Label = sender
        Dim a, b, c As String
        Dim IndexDegré As Integer
        Dim tbl() As String
        Dim tbl1() As String
        Dim Tbl2() As String

        '
        ind = Val(com.Tag)
        a = TabCadDegrés.Item(ind).Text
        IndexDegré = Calc_CadDegrés(Trim(a)) 'Det_IndexDegré(a) ' valeur du dégré dans la tonalité majeure, par exemple I--> 0, II --> 1, III--> 2, IV-->3, V--> 4
        '
        CAD_LabelCours = IndexDegré
        '
        If e.Button() = Windows.Forms.MouseButtons.Left Then
            Cad_MarquerAccord(ind)
        End If
        '
        If e.Button() = MouseButtons.Right Then '  And TabTonsSelect.Item(ind).Checked = True ' My.Computer.Keyboard.ShiftKeyDown And 

            'MarquerAccord(ind)
            If Trim(TabCad.Item(ind).Text) <> "___" And Trim(TabCad.Item(ind).Text) <> "" Then
                Cad_MarquerAccord(ind)
                Maj_TousAccordsMnContextCAD(ind)
                CAD_Accord.Text = Trim(TabCad.Item(ind).Text) ' valeur de l'accord dans menu contextuel
                ContextMenuStrip4.Show(CType(sender, Object), e.Location)
            End If
        End If
        '
        a = Det_TonaCours2()
        Entrée_Tonalité = Trim(a + " " + "Maj")
        If Cad_OrigineAccord = Modes.Cadence_Majeure Then
            Entrée_Tonalité = Trim(a + " " + "Maj")
            Entrée_Gamme = Entrée_Tonalité
        End If
        '
        If Cad_OrigineAccord = Modes.Cadence_Mineure Then
            c = Trim(ComboBox2.Text)
            Tbl2 = Split(Trim(c), " ")
            b = Tbl2(0)

            Entrée_Tonalité = Trim(a + " " + "Maj")
            Entrée_Gamme = Trim(b + " " + "MinH")
            CAD_LabelCours = Det_IndexDegréMin(Trim(TabCadDegrés.Item(ind).Text))
        End If
        '
        If Cad_OrigineAccord = Modes.Cadence_Mixte Then
            Select Case ComboBox4.Text
                Case "Hispanique", "Hispanic"

                    Entrée_Tonalité = Trim(a + " " + "Maj") 'Hispanique_Tonalité(ind)
                    Entrée_Gamme = Hispanique_Gamme(ind)
                    tbl1 = Split(Trim(Entrée_Gamme))
                    CAD_LabelCours = Calc_CadDegrés(Trim(TabCadDegrés.Item(ind).Text))
            End Select
        End If
        '
        ' Jouer Accord
        ' ************
        If e.Button() = MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown Then ' 
            '
            a = Trim(ComboBox1.Text)
            tbl = Split(a)
            Clef = Trim(Det_Clef(tbl(0)))
            '
            If ComboMidiOut.Items.Count > 0 Then
                JouerSourceTabCad(ind)
            End If
        End If
        '
        '
        ' Pour glisser - déposer
        ' **********************
        If e.Button() = MouseButtons.Left And Not (My.Computer.Keyboard.CtrlKeyDown) _
            And Not (My.Computer.Keyboard.AltKeyDown) _
            And Not (My.Computer.Keyboard.ShiftKeyDown) Then
            Valeur_Drag = ""
            TabCad.Item(ind).DoDragDrop(TabCad.Item(ind).Text, DragDropEffects.Copy Or DragDropEffects.Move)
            If Trim(Valeur_Drag) <> "" Then
                Maj_DragDrop()
            End If
        End If
    End Sub
    Function Det_DegréMinMaj(degréMaj As Integer) As Integer ' 
        ' Procédure appelée uniquement par TabCad_MouseDown 
        ' Cas d'utilisation : Mode Mixte Hispanique 
        ' Permet de transformer le degré d'un accord exprimé en mode majeur dans le degré du mode dans lequel il doit être considéré
        ' F et G doivent être considérés comme en mode majeur, il ont donc les degrés 3 et 4
        ' E et Am doivent être considérés commen en mode mineur, leur degré est respictement 4 et 0
        Det_DegréMinMaj = 0
        Select Case degréMaj
            Case 0 ' 
                Det_DegréMinMaj = 2
            Case 1 ' 
                Det_DegréMinMaj = 3 '
            Case 2
                Det_DegréMinMaj = 4  'degré de E(m) est 2 (III) en Mode Majeur --> devient 4 (V) dans la cadence Hispanique
            Case 3
                Det_DegréMinMaj = 3  'degré de F est 3 (IV) en Mode Majeur --> reste 3 (IV)dans la cadence Hispanique
            Case 4
                Det_DegréMinMaj = 4 ' degré de G est 4 (V) en Mode Majeur --> reste 4 (V)dans la cadence Hispanique
            Case 5
                Det_DegréMinMaj = 0 ' degré de Am est 5 (VI) en Mode Majeur --> devient 0 (I)dans la cadence Hispanique
            Case 6
                Det_DegréMinMaj = 1
        End Select
    End Function


    Function Hispanique_Gamme(ind As Integer) As String
        Dim a, c As String
        Dim tbl() As String
        '
        Hispanique_Gamme = ""
        a = TabCadDegrés.Item(ind).Text
        '
        Select Case Trim(a)
            Case "V", "IV"
                Hispanique_Gamme = Trim(Det_TonaCours2() + " " + "Maj")
            Case "III", "VI"
                c = Trim(ComboBox2.Text)
                '
                tbl = Split(Trim(c), " ")
                Hispanique_Gamme = Trim(tbl(0) + " " + "MinH")
        End Select

    End Function
    Sub Cad_RAZ_CouleurMarquée()
        Dim i As Integer


        If EnChargement = False Then
            If ModeSimple_Cadence = "Maj" Then
                For i = 0 To 4
                    TabCad.Item(i).BackColor = Couleur_Accord_Majeur
                    TabCad.Item(i).ForeColor = Color.Black
                    TabCadDegrés.Item(i).BackColor = Color.Gold 'Couleur_Accord_Majeur
                    TabCadDegrés.Item(i).ForeColor = Color.Black
                Next i
            Else
                For i = 0 To 4
                    TabCad.Item(i).BackColor = Couleur_Accord_Mineur
                    TabCad.Item(i).ForeColor = Color.Black
                    TabCadDegrés.Item(i).BackColor = Color.Gold 'Couleur_Accord_Mineur
                    TabCadDegrés.Item(i).ForeColor = Color.Black
                Next i
            End If
        End If
    End Sub
    Sub Cad_MarquerAccord(ind As Integer)
        Dim a As String
        Dim IndexDegré As Integer

        If Trim(TabCad.Item(ind).Text) <> "" And TabCad.Item(ind).Text <> "___" Then

            ' Mise à jour de la couleur
            ' *************************
            Cad_RAZ_CouleurMarquée()
            '
            TabCad.Item(ind).BackColor = Couleur_Accord_Marqué
            '
            TabCad.Item(ind).ForeColor = Color.Yellow
            '
            ' Mise à jour de l'accord pour écriture
            ' *************************************
            a = TabCadDegrés.Item(ind).Text
            If Cad_OrigineAccord = Modes.Cadence_Majeure Then
                IndexDegré = Det_IndexDegré(a)
            Else
                IndexDegré = Det_IndexDegréMin(a)
            End If
            '
            CAD_TableCoursAcc(IndexDegré).Marqué = True
            AccordMarqué = Trim(TabCad.Item(ind).Text)
            Entrée_Accord = AccordMarqué
            '
            TabCad.Item(ind).Refresh()
        End If
        '
        ' OrigineAccord est mis à jour dans les comobobox3 et 4 de cadences majeures et mineures
    End Sub


    Sub OuvrirCadences(IndicCadences As String)
        Select Case IndicCadences
            Case "Anatole"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_AnatoleMaj()
                Label28.Text = "Anatole"
                ComboBox3.SelectAll()

                    '
            Case "Complète"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_ComplèteMaj()
                Label28.Text = "Complète"
                ComboBox3.SelectAll()


            Case "Complete"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_ComplèteMaj()
                Label28.Text = "Complete"
                ComboBox3.SelectAll()

                    '
            Case "2-5-1"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_251Maj()
                Label28.Text = "2-5-1"
                ComboBox3.SelectAll()

                    '
            Case "Demi"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_DemiMaj()
                Label28.Text = "Demi"
                ComboBox3.SelectAll()


            Case "Half"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_DemiMaj()
                Label28.Text = "Half"
                ComboBox3.SelectAll()

                    '
            Case "Parfaite"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_ParfaiteMaj()
                Label28.Text = "Parfaite"
                ComboBox3.SelectAll()


            Case "Perfect"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_ParfaiteMaj()
                Label28.Text = "Perfect"
                ComboBox3.SelectAll()

                    '
            Case "Plagale"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_PlagaleMaj()
                Label28.Text = "Plagale"
                ComboBox3.SelectAll()


            Case "Plagal"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_PlagaleMaj()
                Label28.Text = "Plagal"
                ComboBox3.SelectAll()

                    '
            Case "Plagale2"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Plagale2Maj()
                Label28.Text = "Plagale2"
                ComboBox3.SelectAll()


            Case "Plagal2"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Plagale2Maj()
                Label28.Text = "Plagal2"
                ComboBox3.SelectAll()

                    '
            Case "Rompue"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_RompueMaj()
                Label28.Text = "Rompue"
                ComboBox3.SelectAll()


            Case "Broken"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_RompueMaj()
                Label28.Text = "Broken"
                ComboBox3.SelectAll()

                    '
            Case "Rompue2"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Rompue2Maj()
                Label28.Text = "Rompue2"
                ComboBox3.SelectAll()


            Case "Broken2"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Rompue2Maj()
                Label28.Text = "Broken2"
                ComboBox3.SelectAll()

                    '
            Case "Rompue3"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Rompue3Maj()
                Label28.Text = "Rompue3"
                ComboBox3.SelectAll()


            Case "Broken3"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Rompue3Maj()
                Label28.Text = "Broken3"
                ComboBox3.SelectAll()

            Case "Modale"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_ModaleMaj()
                Label28.Text = "Modale"
                ComboBox3.SelectAll()


            Case "Modal"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_ModaleMaj()
                Label28.Text = "Modal"
                ComboBox3.SelectAll()

                    '
            Case "Modale2"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Modale2Maj()
                Label28.Text = "Modale2"
                ComboBox3.SelectAll()

            Case "Modal2"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Modale2Maj()
                Label28.Text = "Modal2"
                ComboBox3.SelectAll()

                    '
            Case "Modale3"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Modale3Maj()
                Label28.Text = "Modale3"
                ComboBox3.SelectAll()


            Case "Modal3"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_Modale3Maj()
                Label28.Text = "Modal3"
                ComboBox3.SelectAll()


            Case "Napolitaine"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_NapolitaineMaj()
                Label28.Text = "Napolitaine"


            Case "Napolitan"
                Cad_OrigineAccord = Modes.Cadence_Majeure
                Cad_NapolitaineMaj()
                Label28.Text = "Napolitan"
                ComboBox3.SelectAll()


            Case "Anatole Min"
                Cad_OrigineAccord = Modes.Cadence_Mineure
                Cad_AnatoleMin()
                Label28.Text = "Anatole Min"
                ComboBox4.SelectAll()


            Case "Pseudo 2-5-1"
                Cad_OrigineAccord = Modes.Cadence_Mineure
                Cad_Pseudo251Min()
                Label28.Text = "Pseudo 2-5-1"
                ComboBox4.SelectAll()


            Case "Plagale", "Plagale Min"
                Cad_OrigineAccord = Modes.Cadence_Mineure
                Cad_PLagalMin()
                Label28.Text = "Plagale Min"
                ComboBox4.SelectAll()


            Case "Plagal", "Minor Plagal"
                Cad_OrigineAccord = Modes.Cadence_Mineure
                Cad_PLagalMin()
                Label28.Text = "Minor Plagal"
                ComboBox4.SelectAll()
                    '
            Case "Hispanique"
                Cad_OrigineAccord = Modes.Cadence_Mixte
                OrigineAccord = Modes.Cadence_Mixte
                Mode_Cadence = Cad_OrigineAccord
                Cad_HispaniqueMixte()
                Label28.Text = "Hispanique"
                ComboBox4.SelectAll()

            Case "Hispanic"
                Cad_OrigineAccord = Modes.Cadence_Mixte
                OrigineAccord = Modes.Cadence_Mixte
                Mode_Cadence = Cad_OrigineAccord
                Cad_HispaniqueMixte()
                Label28.Text = "Hispanic"
                ComboBox4.SelectAll()
        End Select

    End Sub



    Sub Cad_AnatoleMaj()
        'If EnChargement = False Then
        '
        CAD_Init_Aff()
        '
        TabCadDegrés.Item(0).Text = "I"
        TabCadDegrés.Item(0).Visible = True ' degré
        TabCad.Item(0).Visible = True ' nom de l'accord
        '
        TabCadDegrés.Item(1).Text = "VI"
        TabCadDegrés.Item(1).Visible = True ' degré
        TabCad.Item(1).Visible = True ' nom de l'accord


        TabCadDegrés.Item(2).Text = "II"
        TabCadDegrés.Item(2).Visible = True ' degré
        TabCad.Item(2).Visible = True ' nom de l'accord


        TabCadDegrés.Item(3).Text = "V"
        TabCadDegrés.Item(3).Visible = True ' degré
        TabCad.Item(3).Visible = True ' nom de l'accord


        TabCadDegrés.Item(4).Text = "I"
        TabCadDegrés.Item(4).Visible = True ' degré
        TabCad.Item(4).Visible = True ' nom de l'accord

        '
        'Label28.Size = New Size(535, 33)
        '
        CAD_Maj_TableGlobalAcc()

        'End If
    End Sub
    Sub Cad_Forme2()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord
            '
            TabCadDegrés.Item(1).Text = "VI"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "IV"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "V"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord


            TabCadDegrés.Item(4).Text = "I"
            TabCadDegrés.Item(4).Visible = True ' degré
            TabCad.Item(4).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(535, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_Forme3()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "I"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord
            '
            TabCadDegrés.Item(1).Text = "V"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "VI"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "IV"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord


            TabCadDegrés.Item(4).Text = "I"
            TabCadDegrés.Item(4).Visible = True ' degré
            TabCad.Item(4).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(535, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Sub Cad_AnatoleMin()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord

            '
            TabCadDegrés.Item(1).Text = "IV"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "VII"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "III"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord


            TabCadDegrés.Item(4).Text = "VI"
            TabCadDegrés.Item(4).Visible = True ' degré
            TabCad.Item(4).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(535, 33)
            '
            CAD_Maj_TableGlobalAcc()
            '
        End If
    End Sub

    Sub Cad_PLagalMin()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "III"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "VI"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "III"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(316, 33)
            '
            CAD_Maj_TableGlobalAcc()
            '
        End If
    End Sub
    Sub Cad_Pseudo251Min()
        If EnChargement = False Then
            '
            CAD_Init_Aff()
            '
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "VII"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "III"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord


            TabCadDegrés.Item(3).Text = "VI"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(426, 33)
            '
            CAD_Maj_TableGlobalAcc()
            '
        End If
    End Sub
    Sub Cad_HispaniqueMixte()
        If EnChargement = False Then
            Cad_OrigineAccord = Modes.Cadence_Mixte
            Mode_Cadence = Cad_OrigineAccord
            CAD_Init_Aff()
            '
            ' partie majeure
            TabCadDegrés.Item(0).Text = "VI"
            TabCadDegrés.Item(0).Visible = True ' degré
            TabCad.Item(0).Visible = True ' nom de l'accord


            TabCadDegrés.Item(1).Text = "V"
            TabCadDegrés.Item(1).Visible = True ' degré
            TabCad.Item(1).Visible = True ' nom de l'accord


            TabCadDegrés.Item(2).Text = "IV"
            TabCadDegrés.Item(2).Visible = True ' degré
            TabCad.Item(2).Visible = True ' nom de l'accord

            ' partie mineure
            TabCadDegrés.Item(3).Text = "III"
            TabCadDegrés.Item(3).Visible = True ' degré
            TabCad.Item(3).Visible = True ' nom de l'accord


            TabCadDegrés.Item(4).Text = "VI"
            TabCadDegrés.Item(4).Visible = True ' degré
            TabCad.Item(4).Visible = True ' nom de l'accord

            '
            'Label28.Size = New Size(535, 33)
            '
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub

    Private Sub CAD_Renversement1_Click(sender As Object, e As EventArgs) Handles CAD_Renversement1.Click
        CAD_Renversement1.Checked = True
        '
        CAD_Renversement2.Checked = False
        CAD_Renversement3.Checked = False
        CAD_Renversement4.Checked = False
        CAD_Renversement5.Checked = False
        '
        ' Maj_ChoixRenv(1)
        CAD_TableCoursAcc(CAD_LabelCours).RenvChoisi = 0
        '
        CAD_RAZEtendre()
        '
    End Sub

    Private Sub CAD_Renversement2_Click(sender As Object, e As EventArgs) Handles CAD_Renversement2.Click
        CAD_Renversement1.Checked = False
        '
        CAD_Renversement2.Checked = True
        CAD_Renversement3.Checked = False
        CAD_Renversement4.Checked = False
        CAD_Renversement5.Checked = False
        '
        ' Maj_ChoixRenv(1)
        CAD_TableCoursAcc(CAD_LabelCours).RenvChoisi = 1
        '
        CAD_RAZEtendre()
    End Sub

    Private Sub CAD_Renversement3_Click(sender As Object, e As EventArgs) Handles CAD_Renversement3.Click
        CAD_Renversement1.Checked = False
        '
        CAD_Renversement2.Checked = False
        CAD_Renversement3.Checked = True
        CAD_Renversement4.Checked = False
        CAD_Renversement5.Checked = False
        '
        ' Maj_ChoixRenv(1)
        CAD_TableCoursAcc(CAD_LabelCours).RenvChoisi = 2
        '
        CAD_RAZEtendre()
    End Sub

    Private Sub CAD_Renversement4_Click(sender As Object, e As EventArgs) Handles CAD_Renversement4.Click
        CAD_Renversement1.Checked = False
        '
        CAD_Renversement2.Checked = False
        CAD_Renversement3.Checked = False
        CAD_Renversement4.Checked = True
        CAD_Renversement5.Checked = False
        '
        ' Maj_ChoixRenv(1)
        CAD_TableCoursAcc(CAD_LabelCours).RenvChoisi = 3
        '
        CAD_RAZEtendre()
    End Sub

    Private Sub CAD_Renversement5_Click(sender As Object, e As EventArgs) Handles CAD_Renversement5.Click
        CAD_Renversement1.Checked = False
        '
        CAD_Renversement2.Checked = False
        CAD_Renversement3.Checked = False
        CAD_Renversement4.Checked = False
        CAD_Renversement5.Checked = True
        '
        ' Maj_ChoixRenv(1)
        CAD_TableCoursAcc(CAD_LabelCours).RenvChoisi = 4
        '
        CAD_RAZEtendre()
    End Sub
    Sub CAD_RAZEtendre()
        CAD_EtendreNote1.Checked = False
        CAD_EtendreNote2.Checked = False
        CAD_EtendreNote3.Checked = False
        CAD_EtendreNote4.Checked = False
        CAD_EtendreNote5.Checked = False
        '
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(0) = False
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(1) = False
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(2) = False
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(3) = False
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(4) = False
    End Sub
    Sub CAD_Maj_ChoixOctave(OctaveChoisie As Integer, Octave As String)
        Dim i As Integer
        Dim a As String
        Dim IndexDegré As Integer

        For i = 0 To 4
            'If TabTonsSelect.Item(i).Checked = True Then
            If TabCad.Item(i).BackColor = Color.Red Then
                a = TabCadDegrés.Item(i).Text
                IndexDegré = Det_IndexDegré(a)
                '
                CAD_TableCoursAcc(IndexDegré).OctaveChoisie = OctaveChoisie
                CAD_TableCoursAcc(IndexDegré).Octave = Octave
                '
            End If
        Next i
    End Sub

    Private Sub CAD_OctavePlus1_Click(sender As Object, e As EventArgs) Handles CAD_OctavePlus1.Click
        CAD_OctavePlus1.Checked = True
        CAD_Octave0.Checked = False
        CAD_OctaveMoins1.Checked = False
        CAD_OctaveMoins2.Checked = False
        '
        CAD_Maj_ChoixOctave(0, "+1")
    End Sub

    Private Sub CAD_Octave0_Click(sender As Object, e As EventArgs) Handles CAD_Octave0.Click
        CAD_OctavePlus1.Checked = False
        CAD_Octave0.Checked = True
        CAD_OctaveMoins1.Checked = False
        CAD_OctaveMoins2.Checked = False
        '
        CAD_Maj_ChoixOctave(1, "0")
    End Sub

    Private Sub CAD_OctaveMoins1_Click(sender As Object, e As EventArgs) Handles CAD_OctaveMoins1.Click
        CAD_OctavePlus1.Checked = False
        CAD_Octave0.Checked = False
        CAD_OctaveMoins1.Checked = True
        CAD_OctaveMoins2.Checked = False
        '
        CAD_Maj_ChoixOctave(2, "-1")
    End Sub
    Private Sub CAD_OctaveMoins2_Click(sender As Object, e As EventArgs) Handles CAD_OctaveMoins2.Click
        CAD_OctavePlus1.Checked = False
        CAD_Octave0.Checked = False
        CAD_OctaveMoins1.Checked = False
        CAD_OctaveMoins2.Checked = True
        '
        CAD_Maj_ChoixOctave(3, "-2")
    End Sub
    Private Sub Button5_Click(sender As Object, e As EventArgs)
        PositionInitiale()
    End Sub

    Sub PositionInitiale()
        Dim h As Integer
        Dim w As Integer
        '
        'My.Computer.Audio.Play("C:\Waterfall.wav", AudioPlayMode.Background)

        h = 770 '720
        w = 1400
        '
        Init_Graphisme()

    End Sub
    Private Sub SplitContainer12_Panel2_Paint(sender As Object, e As PaintEventArgs) Handles SplitContainer12.Panel2.Paint

    End Sub

    Private Sub ComboMidiIn_SelectedIndexChanged_2(sender As Object, e As EventArgs) Handles ComboMidiIn.SelectedIndexChanged
        Dim a As String
        Dim ii As Integer
        Dim T As Integer

        '
        T = 0
        ii = ChoixEntréeMidi

        ChoixEntréeMidi = ComboMidiIn.SelectedIndex


        a = Trim(Str(ChoixEntréeMidi))
        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixEntréeMIDI", a)

        'Ouverture_EntréeMidi() ' ??????
        Try
            If EnChargement = False Then
                If (EntréeMidi.Item(ii).IsReceiving) And Thru.Checked = True Then ' 
                    T = 1
                    EntréeMidi.Item(ii).StopReceiving()
                End If

                'EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                If Thru.Checked = True Then
                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsOpen) Then
                        T = 2
                        EntréeMidi.Item(ChoixEntréeMidi).Open()
                    End If

                    If Not (EntréeMidi.Item(ChoixEntréeMidi).IsReceiving) Then
                        T = 3
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    Else
                        T = 4
                        EntréeMidi.Item(ChoixEntréeMidi).StopReceiving()
                        T = 5
                        EntréeMidi.Item(ChoixEntréeMidi).StartReceiving(HorlogeMidi)
                    End If
                End If
            End If
        Catch ex As Exception
            messa = "Cette ressource MIDI pourrait être déjà utilisée par une autre application"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "ComboMidiIn_SelectedIndexChanged_2" + "." + Constants.vbCrLf +
                "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            'Dim result As DialogResult = MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
        End Try
    End Sub

    Private Sub ComboMidiOut_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboMidiOut.SelectedIndexChanged
        Dim a As String
        Dim titre As String
        Dim sauvChoixSortieMidi As Integer = ChoixSortieMidi
        '
        '
        Try
            If EnChargement = False Then
                ChoixSortieMidi = ComboMidiOut.SelectedIndex
                '
                a = Trim(Str(ChoixSortieMidi))
                ' **** Ceci est un TEST ****
                ' test de l'interface choisie : si problème le catch entre en jeu
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    '
                    SortieMidi.Item(ChoixSortieMidi).Open()
                    SortieMidi.Item(ChoixSortieMidi).Close()

                Else
                    SortieMidi.Item(ChoixSortieMidi).Close()
                End If

                My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "ChoixSortieMIDI", a)
            End If
            '
        Catch ex As Exception

            If Module1.LangueIHM = "fr" Then
                titre = "Veuillez noter que ..."
                Avertis = "La Sortie MIDI " + ComboMidiOut.Text + " est  indisponible. Veuillez choisir une autre sortie MIDI."
            Else
                titre = "Please note that ..."
                Avertis = "The MIDI output " + ComboMidiOut.Text + " is not avaliable. Please choose an other MIDI Output"
            End If
            MessageHV.PContenuMess = Avertis
            MessageHV.Titre = titre
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            '
        End Try
    End Sub


    Private Sub Thru_CheckedChanged_1(sender As Object, e As EventArgs) Handles Thru.CheckedChanged
        Dim a As String
        If Thru.Checked Then
            a = "1"
        Else
            a = "0"
        End If

        My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\CalquesMIDI\HyperVoicing\Préférences", "Thru", a)

        Ouverture_EntréeMidi()

    End Sub

    Private Sub TabControl4_SelectedIndexChanged(sender As Object, e As EventArgs)
        'Dim tcont As TabControl = sender
        'Dim a As String


        ''OngletCours = Val(tcont.SelectedTab.Tag)
        'a = tcont.SelectedTab.Text


    End Sub
    'Private Sub Timer_Aff_MidiIn_Tick(sender As Object, e As EventArgs) Handles Timer_Aff_MidiIn.Tick
    '
    '   If AfficherNote = True Then
    '          'LabelPianoMidiIn.Item(N_Note).Refresh()
    '         'LabelPianoMidiIn.Item(N_Note).BringToFront()
    '        LabelPianoMidiIn.Item(N_Note).BackColor = Color.Red
    'Else
    'If Det_NoteEstDiése(N_Note) = "#" Then
    '           LabelPianoMidiIn.Item(N_Note).BackColor = Color.Black
    'Else
    '           LabelPianoMidiIn.Item(N_Note).BackColor = Color.White
    'End If
    'End If
    'End Sub
    Private Function Det_NoteEstDiése(Note As Byte) As String
        Dim i, j, k As Integer

        Det_NoteEstDiése = ""

        For i = 0 To 127 Step 12
            For j = 0 To 11
                k = i + j
                If k = Note Then
                    Select Case j
                        Case 1, 3, 6, 8, 10
                            Det_NoteEstDiése = "#"
                        Case Else
                            Det_NoteEstDiése = ""
                    End Select
                End If
            Next j
        Next i
    End Function
    Private Sub Button8_Click(sender As Object, e As EventArgs)
        RAZ_Clavier()
    End Sub

    Private Sub CheckBox2_CheckedChanged(sender As Object, e As EventArgs)
        If CheckBox2.Checked = False Then
            RAZ_Clavier()
        End If
    End Sub

    Private Sub Button9_Click(sender As Object, e As EventArgs)
        CheckMaj.Checked = False
        CheckMinH.Checked = False
        CheckMinM.Checked = False
        CheckPentaMin.Checked = False
        CheckBlues.Checked = False
    End Sub
    Sub EcritureAccordDsGrid2(Acc As String, Colonne As Integer)
        Dim i As Integer
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim tbl() As String
        Dim a As String
        Dim ligne2 As Integer
        Dim degré As Integer
        Dim Indexdegré As Integer
        Dim Acc1 As String
        '
        If Trim(Acc) <> "" Then
            '
            DerGridCliquée = GridCours.Grid2
            '
            m = Colonne
            t = 1 ' parce que nous sommes dans grid2; on écrit sur t=1 et ct1 (mais il peut y avoir d'accords dans la mesure : le cas est traité)
            ct = 1 ' idem
            '
            ' Pour CTRL Z
            ' ***********
            ZAnnulation_Sauvegarde(m, m) ' (mdeb, mfin)
            '
            Acc1 = Acc
            '
            ' OngletCours = 0   Onglet Progression
            ' OngletCours = 1   Onglet Tonalité
            ' OngletCours = 7   Onglet Modulation
            ' OngletCours = 16  Onglet Substitution
            '
            If OngletCours = 1 Or OngletCours = 21 Then ' Tonalité -> OngletCours = 1  / Modes -> OngletCours = 21

                ' Ecriture accords à partir du tableau des tonalités
                ' **************************************************
                '
                Maj_PropriétésEntrée2() ' mise à jour de de Entrée_Tonalité Entrée_Mode et Entrée_Gamme (ici au moment de l'entrée de l'acccord Mode=Gamme)
                '
                If Trim(TableEventH(m, t, ct).Accord) = "" Then ' à mettre en premier
                    TableEventH(m, t, ct).Racine = Det_RacinePréced(Colonne) '
                    TableEventH(m, t, ct).Vel = "100"
                End If
                '
                TableEventH(m, t, ct).Accord = Trim(Acc) ' Entrée_Accord
                '
                TableEventH(m, t, ct).Gamme = Trim(Entrée_Gamme)

                If Flag_EcrDragDrop = True Then
                    TableEventH(m, t, ct).Mode = Trim(Entrée_Mode) ' Mode = Gamme - le mode n'est pas affiché mais je garde l'info por le moment
                    TableEventH(m, t, ct).Tonalité = Trim(Entrée_Tonalité) 'Trim(ComboBox1.Text) 'Entrée_Tonalité
                    '
                    Entrée_Position = Str(Colonne) + ".1" + ".1"
                    TableEventH(m, t, ct).Position = Trim(Entrée_Position)
                    '
                    If OngletCours = 1 Then
                        ligne2 = Det_LigneTableGlobale(LabelCours) ' LabelCours = variable globale mise à jour dans TabTon_MouseDown
                        degré = Det_IndexDegré2(LabelCours)
                        TableEventH(m, t, ct).Degré = degré
                    Else
                        TableEventH(m, t, ct).Degré = Entrée_Degré
                    End If
                End If
            Else
                ' Ecriture accords à partir du tableau des progressions : Progressions -> OngletCours = 0
                ' *****************************************************
                '
                If OngletCours = 0 Then ' Onglet Progression : correspond à TabPag2
                    TableEventH(m, t, ct).Accord = Trim(Acc)
                    TableEventH(m, t, ct).Gamme = Entrée_Gamme
                    If Flag_EcrDragDrop = True Then
                        TableEventH(m, t, ct).Mode = Entrée_Gamme ' Mode = Gamme
                        TableEventH(m, t, ct).Tonalité = Entrée_Tonalité 'Trim(ComboBox1.Text) 'Entrée_Tonalité
                        '
                        Entrée_Position = Str(Colonne) + ".1" + ".1"
                        TableEventH(m, t, ct).Position = Trim(Entrée_Position)
                        '
                        ' Calcul du degré
                        ' ***************
                        Indexdegré = CAD_LabelCours 'Det_IndexDegré(a)
                        TableEventH(m, t, ct).Degré = Indexdegré
                        If Indexdegré = 2 And OrigineAccord = Modes.Cadence_Mixte Then
                            TableEventH(m, t, ct).Degré = 4
                        End If
                        '
                        If Trim(Grid2.Cell(1, m).Text) = "" Then
                            TableEventH(m, t, ct).Racine = Det_RacinePréced(Colonne)
                            TableEventH(m, t, ct).Vel = "100"
                        End If
                    End If
                Else ' MODULATION : OngletCours= 7 - Tabpage7 - (Function Det_RelativeMajeure2(Mode As String) As String)
                    If OngletCours = 7 Then
                        TableEventH(m, t, ct).Position = Str(Colonne) + ".1" + ".1"
                        TableEventH(m, t, ct).Accord = Entrée_Accord ' Entrée_Accord
                        TableEventH(m, t, ct).Gamme = Entrée_Gamme ' Entrée_Gamme
                        TableEventH(m, t, ct).Mode = Entrée_Mode ' Entrée_Mode
                        TableEventH(m, t, ct).Tonalité = Entrée_Tonalité  ' Entrée_Tonalité
                        TableEventH(m, t, ct).Degré = Entrée_Degré
                        If Trim(Grid2.Cell(1, m).Text) = "" Then
                            TableEventH(m, t, ct).Racine = Det_RacinePréced(Colonne) '
                            TableEventH(m, t, ct).Vel = "100"
                        End If
                    Else ' SUBSTITUTION --> OngletCours = 16
                        TableEventH(m, t, ct).Position = Str(Colonne) + ".1" + ".1"
                        TableEventH(m, t, ct).Accord = Entrée_Accord ' Entrée_Accord
                        TableEventH(m, t, ct).Gamme = Entrée_Gamme ' Entrée_Gamme
                        TableEventH(m, t, ct).Mode = Entrée_Mode ' Entrée_Mode
                        TableEventH(m, t, ct).Tonalité = Entrée_Tonalité  ' Entrée_Tonalité
                        TableEventH(m, t, ct).Degré = Val(Entrée_Degré)
                        If Trim(Grid2.Cell(1, m).Text) = "" Then
                            TableEventH(m, t, ct).Racine = Det_RacinePréced(Colonne) '
                            TableEventH(m, t, ct).Vel = "100"
                        End If

                    End If
                End If
            End If
            '
            Maj_InfoAccord(m, t, ct)
            '
            ' ********************************************
            ' MISE A JOUR : ECRITURE dans Grid2 et Grid3 *
            ' ********************************************
            If Trim(Grid2.Cell(1, m).Text) = "" Then
                Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
                Grid2.Cell(1, m).Text = Acc1
                Grid2.Cell(1, m).Locked = True
                Grid2.ReadonlyFocusRect = FlexCell.FocusRectEnum.Solid
            Else
                Grid2.Cell(1, m).Text = ChaineAccord(m)
            End If
            '
            i = Det_IndexGrid3_De_ColGrid2(Colonne) ' Det_IndexGrid3_De_ColGrid2(Grid2.ActiveCell.Col)
            If i <> 1 Then ' ici on ne traite que les couluers uaf les couleurs de la colonne 1 qui et toujours en rouge
                Grid2.AutoRedraw = False
                Grid3.AutoRedraw = False
                '
                Grid3.Cell(2, i).BackColor = Couleur_Accord_Grid3
                Grid3.Cell(2, i).ForeColor = Color.White
                'Grid2.ActiveCell.BackColor = Couleur_Accord_Grid3
                '
                a = TableEventH(m, t, ct).Tonalité 'Det_TonalitédDuPremierAccordDsMesure(m)
                a = Det_RelativeMajeure2(a) ' si la tonalité est mineure alors on affiche la couleur de la relative majeure
                tbl = Split(a)
                Grid2.Cell(1, m).BackColor = DicoCouleur.Item(Trim(tbl(0))) ' la couleur est fonction de la tonalité
                Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(tbl(0))
                '
                Grid2.Refresh()
                Grid3.Refresh()
                Grid2.AutoRedraw = True
                Grid3.AutoRedraw = True
                '
            End If
            '
            Ecriture_Entrée_Ds_CompoGrid() ' ' Mise à jour correspondante dans Grid1
            '
        End If
    End Sub
    Sub EcritureAccordDsGrid2_2(Tonalité As String, Accord As String, Gamme As String, Mode As String,
                                m As Integer, t As Integer, ct As Integer) ' les variables Tonalités, Accord, Gamme et Mode sont exprimées ici en Anglais et en #
        Dim tbl() As String
        Dim a, b As String

        DerGridCliquée = GridCours.Grid2
        ' Pour CTRL Z
        ' ***********
        '
        ' Ecriture accords à partir du tableau des tonalités
        ' **************************************************
        '

        b = TonalitéDsClef(Tonalité) ' cette fonction détermine si la tonalité exprimée en # existe bien dans les tonalités possibles (par exemple A# n'existe pas, c'est Bb qu'il faut choisir)
        If b = "b" Then ' si oui, il est nécessaire de tout transformer en "b"
            Tonalité = TradAcc_DieseEnBem(Tonalité)
            Accord = TradAcc_DieseEnBem(Accord)
            Gamme = TradAcc_DieseEnBem(Gamme)
            Mode = TradAcc_DieseEnBem(Mode)
        End If
        TableEventH(m, t, ct).Tonalité = Trim(Tonalité) '  Trim(ComboBox1.Text) 'Entrée_Tonalité
        TableEventH(m, t, ct).Accord = Trim(Accord)     ' Entrée_Accord
        TableEventH(m, t, ct).Gamme = Trim(Gamme)
        TableEventH(m, t, ct).Mode = Trim(Mode)        ' Mode = Gamme - le mode n'est pas affiché mais je garde l'info por le moment

        '
        ' ECRITURE dans Grid2
        ' *******************
        Grid2.AutoRedraw = False
        If Trim(Grid2.Cell(1, m).Text) = "" Then
            Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
            Grid2.Cell(1, m).Text = Accord
            Grid2.Cell(1, m).Locked = True
            Grid2.ReadonlyFocusRect = FlexCell.FocusRectEnum.Solid
        Else
            Grid2.Cell(1, m).Text = ChaineAccord(m)
        End If
        Grid2.Refresh()
        Grid2.AutoRedraw = True
        '
        tbl = Split(Trim(Tonalité), " ")
        a = tbl(0) ' note de la tonalité courante
        If m <> 1 Then
            Grid2.AutoRedraw = False
            '
            Grid2.Cell(1, m).BackColor = DicoCouleur.Item(a) ' la couleur est fonction de la tonalité
            Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(a)
            '
            Grid2.Refresh()
            Grid2.AutoRedraw = True
            '
        End If
        '
        Refresh()
    End Sub
    Function Det_RacinePréced(mesure As Integer) As String
        Dim m, t, ct As Integer
        Dim sortir As Boolean = False
        Dim a As String = RacineDéfaut
        '
        If mesure <> 1 Then
            For m = mesure To 0 Step -1 '- 1
                For t = UBound(TableEventH, 2) To 0 Step -1 '- 1
                    For ct = UBound(TableEventH, 3) To 0 Step -1 '- 1
                        If Trim(TableEventH(m, t, ct).Racine) <> "" And Trim(TableEventH(m, t, ct).Position) <> "" Then
                            a = Trim(TableEventH(m, t, ct).Racine)
                            sortir = True
                            Exit For
                        End If
                    Next ct
                    If sortir = True Then Exit For
                Next t
                If sortir = True Then Exit For
            Next m
        End If
        '
        Return Trim(a)
    End Function


    'Private Sub Grid3_DragEnter(sender As Object, e As DragEventArgs)
    'If (e.Data.GetDataPresent(DataFormats.Text)) Then
    '        e.Effect = DragDropEffects.Copy
    'Else
    '        e.Effect = DragDropEffects.None
    'End If
    'End Sub
    'Private Sub Grid3_DragDrop(sender As Object, e As DragEventArgs)
    'Dim a As String
    'Dim colonne As Integer
    'Dim ligne As Integer
    '
    '   colonne = Grid3.MouseCol
    'If colonne <= nbMesures * nbColonnesGrid3ParMesure Then
    '       ligne = Grid3.MouseRow
    ''
    'If colonne <> 0 Then
    '           a = e.Data.GetData(DataFormats.Text).ToString
    '          'Grid2.Cell(Grid2.MouseRow, Grid2.MouseCol).Text = Trim(a)
    '         Maj_PropriétésEntrée2()
    '         Flag_EcrDragDrop = True
    '         EcritureAccordDsGrid3(a, colonne, ligne)
    '         RAZ_Grid4()
    '         ' Mettre à jour selon auto voicing
    '         ' ********************************
    '         Calcul_AutoVoicingZ()
    '         '
    '         EcritUneFois = True
    'End If
    '       '
    '       Grid3.Cell(2, colonne).SetFocus()
    'End If
    'End Sub
    Sub EcritureAccordDsGrid3(Acc As String, Colonne As Integer, Ligne3 As Integer)
        Dim a As String
        Dim mesure As String = "0"
        Dim temps As String = "0"
        Dim résultat As String = ""
        Dim IndexDansMesure As Integer
        Dim ColMesure As Integer
        '
        Dim contretemps As Integer = 0
        '
        Dim i, j As Integer
        Dim Cel As FlexCell.Cell
        '
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim ligne, ligne2 As Integer
        Dim col As Integer
        '
        Dim degré As Integer
        Dim IndexDegré As Integer
        Dim tbl() As String

        ' OngletCours = 0   Onglet Progression
        ' OngletCours = 1   Onglet Tonalité
        ' OngletCours = 7   Onglet Modulation
        ' OngletCours = 16  Onglet Substitution
        ' OngletCours = 21  Onglet Modes

        If Ligne3 > 1 Then
            '
            DerGridCliquée = GridCours.Grid3
            '
            ' Arrêter jeu Accord
            ' ******************
            If AccordAEtéJoué = True Then
                CouperJouerAccord()
                AccordAEtéJoué = False
            End If
            '
            ligne = Ligne3 'Grid3.MouseRow ' Grid3.ActiveCell.Row
            col = Colonne 'Grid3.MouseCol ' Grid3.ActiveCell.Col
            Cel = Grid3.Cell(ligne, col)
            '
            j = Colonne 'Grid3.MouseCol
            '
            ' détermination de la mesure
            ' **************************
            For i = j To 0 Step -1
                a = Grid3.Cell(1, i).Text
                If Trim(a) <> "" Then
                    mesure = Trim(a)
                    ColMesure = i
                    Exit For
                End If
            Next i
            '
            IndexDansMesure = j - ColMesure ' à supprimer ??????
            '
            ' détermination des index t et ct
            ' *******************************
            contretemps = 1
            For i = j To 0 Step -1
                a = Grid3.Cell(2, i).Text
                If Trim(a) <> "" Then
                    temps = Trim(a)
                    résultat = Trim(mesure) + "." + Trim(temps) + "." + Trim(Str(contretemps + 1))
                    Exit For
                End If
                contretemps = contretemps + 1 ' détermination du contretemps
            Next i
            '
            If Trim(mesure) <> "0" Then
                Grid2.Cell(1, 0).Text = Trim(résultat) ' c'est maintenant caché par les zoom
            End If
            '
            m = Val(mesure)
            t = Val(temps) '- 1
            ct = contretemps '- 1
            '
            ' Ecriture de l'accord dans grid3
            ' *******************************
            '
            If Trim(Acc) <> "" Then
                ' Pour CTRL Z
                ' ***********
                ZAnnulation_Sauvegarde(m, m)
                '
                ' Mise à jour grid3 (pas d'écriture dans grid3 )
                ' **********************************************

                Cel.BackColor = Couleur_Accord_Grid3
                Cel.ForeColor = Color.White
                Cel.Locked = True
                '
                Grid3.ReadonlyFocusRect = FlexCell.FocusRectEnum.Solid
                '
                ' Mise à jour TableventH
                ' ********************** 
                TableEventH(m, t, ct).Accord = Entrée_Accord
                TableEventH(m, t, ct).Gamme = Entrée_Gamme ' la traduction en notation anglaise est déjà faire
                'LigneGrid1 = Det_LigneMesureGrid1(m.ToString + "." + t.ToString + "." + ct.ToString)
                TableEventH(m, t, ct).Racine = Det_RacinePréced(m)
                TableEventH(m, t, ct).Vel = "100"
                '
                If Flag_EcrDragDrop = True Then
                    TableEventH(m, t, ct).Position = Trim(mesure) + "." + Trim(temps) + "." + Trim(contretemps)
                    Entrée_Position = TableEventH(m, t, ct).Position

                    TableEventH(m, t, ct).Tonalité = Entrée_Tonalité
                    TableEventH(m, t, ct).Mode = Entrée_Gamme
                End If
                '
                If OngletCours = 1 Then ' Tonalité -> OngletCours = 1 (OrigineAccord <> Modes.Cadence_Majeure) And (OrigineAccord <> Modes.Cadence_Mineure) Then
                    If Flag_EcrDragDrop = True Then
                        ligne2 = Det_LigneTableGlobale(LabelCours) ' LabelCours = variable globale mise à jour dans TabTon_MouseDown
                        degré = Det_IndexDegré2(LabelCours)
                        TableEventH(m, t, ct).Degré = degré
                    End If
                Else
                    If OngletCours = 0 Then
                        If Flag_EcrDragDrop = True Then
                            IndexDegré = CAD_LabelCours
                            TableEventH(m, t, ct).Degré = CAD_LabelCours
                            If IndexDegré = 2 And OrigineAccord = Modes.Cadence_Mixte Then
                                TableEventH(m, t, ct).Degré = 4
                            End If
                        End If
                    Else
                        If OngletCours = 7 Or OngletCours = 16 Then
                            TableEventH(m, t, ct).Mode = Entrée_Mode
                            TableEventH(m, t, ct).Degré = Entrée_Degré
                        End If
                    End If
                End If
                '
                ' Ecriture dans Grid2
                ' *******************
                ' Mise à jour couleur dans Grid2
                ' ******************************
                tbl = Split(Trim(ComboBox1.Text))
                If m > 1 Then ' colonne 1 qui reste toujours rouge
                    a = Det_TonalitédDuPremierAccordDsMesure(m)
                    tbl = Split(a)
                    Grid2.Cell(1, m).BackColor = DicoCouleur.Item(tbl(0)) 'Couleur_Accord_Marqué
                    Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(tbl(0)) 'Couleur_Accord_Marqué
                End If

                If Trim(Grid2.Cell(1, m).Text) = "" Then
                    Grid2.Cell(1, m).Alignment = FlexCell.AlignmentEnum.CenterCenter
                    Grid2.Cell(1, m).Text = Trim(Acc)
                Else
                    Grid2.Cell(1, m).Text = ChaineAccord(m)
                End If
                '
                Ecriture_Entrée_Ds_CompoGrid()
            End If
        End If
    End Sub

    Private Sub EffacerToolStripMenuItem_Click_1(sender As Object, e As EventArgs) Handles EffacerToolStripMenuItem.Click
        Dim i, j As Integer
        Dim r, c As Integer
        Dim a As String
        Dim FirstCol As Integer

        'Copie()

        Select Case DerGridCliquée
            Case GridCours.Grid1
                Effacer_Grid1() ' effacement des marqueurs seulement
            Case GridCours.Grid2
                ' If Grid2.ActiveCell.Col > 1 Then
                FirstCol = Grid2.Selection.FirstCol
                If FirstCol = 1 Then
                    FirstCol = 2
                End If
                ZAnnulation_Sauvegarde(FirstCol, Grid2.Selection.LastCol)
                Effacer_Grid2_3(FirstCol, Grid2.Selection.LastCol)
                ' Mise à jour Grid1 : comprogrid
                Ecriture_Entrée_Ds_CompoGrid()
                'Mise à jour PianoRoll
                Maj_PianoRoll()
                Maj_DrumEdit()
                'Mise à jour Grid4 : gammes
                RAZ_Grid4()
                '
                Calcul_AutoVoicingZ()
                'End If
            Case GridCours.Grid3
                If Grid3.ActiveCell.Col > 1 Then
                    r = Grid3.ActiveCell.Row
                    c = Grid3.ActiveCell.Col
                    a = Grid3.Cell(1, c).Text
                    '
                    '
                    For i = c To 0 Step -1
                        If Trim(Grid3.Cell(1, i).Text) <> "" Then
                            a = Grid3.Cell(1, i).Text
                            j = Val(a)
                            Exit For
                        End If
                    Next i
                    ZAnnulation_Sauvegarde(j, j)
                    Effacer_Grid3(Grid3.Selection.FirstCol, Grid3.Selection.LastCol)
                    ' Mise à jour Grid1
                    Ecriture_Entrée_Ds_CompoGrid()
                    'Mise à jour PianoRoll
                    Maj_PianoRoll()
                    Maj_DrumEdit()
                    RAZ_Grid4()
                    '
                    Calcul_AutoVoicingZ()
                End If
        End Select
    End Sub
    Private Sub Effacer_Grid1()
        Dim a As String
        Dim tbl1() As String
        Dim n_Mesure As Integer
        '
        Dim m, t, ct As Integer

        If Grid1.ActiveCell.Col = 2 Then ' colonne des marqueurs
            a = Det_Index_De_Ligne(Grid1.ActiveCell.Row) ' a contient la position (de type 1.1.1) si elle existe
            If Trim(a) <> "" Then
                tbl1 = Split(a, "-")
                'If Trim(a) <> "" Then
                m = Val(tbl1(0))
                t = Val(tbl1(1))
                ct = Val(tbl1(2))
                TableEventH(m, t, ct).Marqueur = ""
                If Not (Det_MarqueurDsMesure(m)) Then ' il peut y avoir plusieurs marqueurs dans la même mesure
                    n_Mesure = Val(tbl1(0))
                    '
                    Grid2.Cell(0, n_Mesure).Locked = False
                    Grid2.Cell(0, n_Mesure).BackColor = Color.Beige
                    Grid2.Cell(0, n_Mesure).ForeColor = Color.Black
                    Grid2.Cell(0, n_Mesure).Locked = True
                    Grid2.Cell(0, n_Mesure).SetFocus()
                    '
                    If TContext1.AutoVoiceValid = True Then
                        Grid2.AutoRedraw = False
                        '
                        For i = TContext1.ColDeb To TContext1.Colfin
                            If Grid2.Cell(0, i).BackColor <> Color.Green Then
                                Grid2.Cell(0, i).BackColor = Color.Gainsboro
                            End If
                        Next i
                        '
                        Grid2.Refresh()
                        Grid2.AutoRedraw = True
                    End If
                    '
                    '
                End If
                Grid1.ActiveCell.BackColor = Color.Red
                If Grid1.ActiveCell.Row > 1 Then
                    Grid1.ActiveCell.BackColor = Couleur_Marqueurs
                End If
                Grid1.ActiveCell.ForeColor = Color.Black
                Grid1.ActiveCell.Text = ""
                TMarqueur.Text = ""
                TMarqueur.Visible = False
                EcritUneFois = True
                '
                'End If
                ' 
            Else
                Grid1.ActiveCell.BackColor = Couleur_Marqueurs
                Grid1.ActiveCell.ForeColor = Color.Black
                Grid1.ActiveCell.Text = ""
                TMarqueur.Text = ""
                TMarqueur.Visible = False
                EcritUneFois = True
            End If
        End If

        LockageColonnes()
        '
    End Sub
    Private Sub EtendreNote1_Click(sender As Object, e As EventArgs) Handles EtendreNote1.Click
        If EtendreNote1.Checked = True Then
            EtendreNote1.Checked = False
        Else
            EtendreNote1.Checked = True
        End If
        Maj_ChoixEtendre(0, EtendreNote1.Checked)
    End Sub

    Private Sub EtendreNote2_Click(sender As Object, e As EventArgs) Handles EtendreNote2.Click
        If EtendreNote2.Checked = True Then
            EtendreNote2.Checked = False
        Else
            EtendreNote2.Checked = True
        End If
        '
        Maj_ChoixEtendre(1, EtendreNote2.Checked)
    End Sub

    Private Sub EtendreNote3_Click(sender As Object, e As EventArgs) Handles EtendreNote3.Click
        If EtendreNote3.Checked = True Then
            EtendreNote3.Checked = False
        Else
            EtendreNote3.Checked = True
        End If
        Maj_ChoixEtendre(2, EtendreNote3.Checked)
    End Sub

    Private Sub EtendreNote4_Click(sender As Object, e As EventArgs) Handles EtendreNote4.Click
        If EtendreNote4.Checked = True Then
            EtendreNote4.Checked = False
        Else
            EtendreNote4.Checked = True
        End If
        Maj_ChoixEtendre(3, EtendreNote4.Checked)
    End Sub

    Private Sub EtendreNote5_Click(sender As Object, e As EventArgs) Handles EtendreNote5.Click
        If EtendreNote5.Checked = True Then
            EtendreNote5.Checked = False
        Else
            EtendreNote5.Checked = True
        End If
        Maj_ChoixEtendre(4, EtendreNote5.Checked)
    End Sub
    Sub Maj_ChoixEtendre(EtendreChoisi As Integer, EtendreValeur As Boolean)
        Dim i As Integer
        Dim ligne As Integer
        Dim degré As Integer

        For i = 0 To 20
            'If TabTonsSelect.Item(i).Checked = True Then
            If TabTons.Item(i).BackColor = Color.Red Then
                ligne = Det_LigneTableGlobale(i)
                degré = Det_IndexDegré2(i)
                '
                TableCoursAcc(ligne, degré).EtendreChecked(EtendreChoisi) = EtendreValeur
                '
            End If
        Next i
    End Sub

    Private Sub CAD_EtendreNote1_Click(sender As Object, e As EventArgs) Handles CAD_EtendreNote1.Click
        If CAD_EtendreNote1.Checked = True Then
            CAD_EtendreNote1.Checked = False
        Else
            CAD_EtendreNote1.Checked = True
        End If
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(0) = CAD_EtendreNote1.Checked
    End Sub
    Private Sub CAD_EtendreNote2_Click(sender As Object, e As EventArgs) Handles CAD_EtendreNote2.Click
        If CAD_EtendreNote2.Checked = True Then
            CAD_EtendreNote2.Checked = False
        Else
            CAD_EtendreNote2.Checked = True
        End If
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(1) = CAD_EtendreNote2.Checked
    End Sub
    Private Sub CAD_EtendreNote3_Click(sender As Object, e As EventArgs) Handles CAD_EtendreNote3.Click
        If CAD_EtendreNote3.Checked = True Then
            CAD_EtendreNote3.Checked = False
        Else
            CAD_EtendreNote3.Checked = True
        End If
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(2) = CAD_EtendreNote3.Checked
    End Sub
    Private Sub CAD_EtendreNote4_Click(sender As Object, e As EventArgs) Handles CAD_EtendreNote4.Click
        If CAD_EtendreNote4.Checked = True Then
            CAD_EtendreNote4.Checked = False
        Else
            CAD_EtendreNote4.Checked = True
        End If
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(3) = CAD_EtendreNote4.Checked
    End Sub
    Private Sub CAD_EtendreNote5_Click(sender As Object, e As EventArgs) Handles CAD_EtendreNote5.Click
        If CAD_EtendreNote5.Checked = True Then
            CAD_EtendreNote5.Checked = False
        Else
            CAD_EtendreNote5.Checked = True
        End If
        CAD_TableCoursAcc(CAD_LabelCours).EtendreChecked(4) = CAD_EtendreNote5.Checked
    End Sub
    <SecurityPermission(SecurityAction.LinkDemand, ControlDomainPolicy:=True)>
    Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles MyBase.Shown
        ' remarque : l'évènement shown arrive toujours après l'évènement Load. La variable 'FichierEntréSurClic'
        ' est mise à jour dans la l'évènement Load.
        ' 
        'DessinApplication2()
        '
        Try
            ' Dimensions pour l'onglet de navigation PDF
            ' *****************************************

            '
            Dim aa As AppDomainSetup = AppDomain.CurrentDomain.SetupInformation
            If Not (aa.ActivationArguments Is Nothing) Then
                If (aa.ActivationArguments.ActivationData.Count >= 1) Then
                    FichierEntréSurClic = aa.ActivationArguments.ActivationData(0)
                    Ouvrir2()
                End If
            End If
        Catch
        End Try
    End Sub
    Public Sub Calcul_AutoVoicingZ_PLAY()
        Dim mdeb, tdeb, ctdeb As Integer
        Dim mfin, tfin, ctfin As Integer

        Try

            mdeb = Convert.ToInt16(Transport.Début.Value) ' Val(TZone(i).DébutZ)
            tdeb = 0
            ctdeb = 0
            '
            mfin = Convert.ToInt16(Transport.Terme.Value) ''Val(TZone(i).TermeZ)
            tfin = 5
            ctfin = 4
            '
            AutoVoicing(mdeb, tdeb, ctdeb, mfin, tfin, ctfin)
            '
            Maj_VueNotes()
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
        'End If
    End Sub
    Public Sub Calcul_AutoVoicingZ()
        Dim mdeb, tdeb, ctdeb As Integer
        Dim mfin, tfin, ctfin As Integer

        Try

            mdeb = Convert.ToInt16(1) ' 
            tdeb = 0
            ctdeb = 0
            '
            mfin = Convert.ToInt16(nbMesures - 1) '
            tfin = 5
            ctfin = 4
            '
            AutoVoicing(mdeb, tdeb, ctdeb, mfin, tfin, ctfin)
            '
            Maj_VueNotes()
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
        'End If
    End Sub
    Public Sub Calcul_AutoVoicingZPlay()
        Dim mdeb, tdeb, ctdeb As Integer
        Dim mfin, tfin, ctfin As Integer

        Try
            mdeb = 0
            tdeb = 0
            ctdeb = 0
            '
            mfin = Det_NumDerAccord()
            tfin = 5
            ctfin = 4
            '
            AutoVoicing(mdeb, tdeb, ctdeb, mfin, tfin, ctfin)
            '
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
        'End If
    End Sub

    Private Sub AutoVoicing(mdeb As Integer, tdeb As Integer, ctdeb As Integer, mfin As Integer, tfin As Integer, ctfin As Integer)
        Dim m, t, ct As Integer
        Dim a, b As String
        Dim ii, jj As Integer
        Dim AncienV As String



        Grid2.Refresh()
        Grid2.AutoRedraw = True
        '
        Try
            For m = mdeb To mfin
                For t = tdeb To tfin
                    For ct = ctdeb To ctfin
                        a = TableEventH(m, t, ct).Accord
                        TableNotesAccordsZ(m, t, ct) = ""
                        If Trim(a) <> "" Then
                            a = Det_NotesAccord(Trim(a))
                            a = Trad_ListeNotesEnD(Trim(a), "-") ' la traduction est nécessaire car Maj_NotesCommunes ne traite que des notes en #
                            'Renv = TableEventH(m, t, ct).Renversement(0)
                            b = Maj_NotesCommunes(Trim(a), TableEventH(m, t, ct).Racine)
                            b = Transform(m, b)
                            AncienV = Trim(TableNotesAccordsZ(m, t, ct)) ' pour Mise en évidence d'une racine significative quand il ya changement de racine par touche + ou touche -
                            TableNotesAccordsZ(m, t, ct) = Trim(b)
                            '
                            ' Mise en évidence d'une racine significative dans grid1 quand Grid1.KeyDown est appelé
                            ' *************************************************************************************
                            If TableEventH(m, t, ct).Ligne <> -1 Then
                                ii = TableEventH(m, t, ct).Ligne
                                jj = 8 ' colonne des racines dans grid1
                                If b <> AncienV Then
                                    Grid1.Cell(ii, jj).BackColor = Color.Orange
                                    Grid1.Refresh()
                                Else
                                    If ii = 1 Then
                                        Grid1.Cell(ii, jj).BackColor = Color.Red
                                    Else
                                        Grid1.Cell(ii, jj).BackColor = Color.Beige
                                    End If
                                End If
                            End If
                        End If
                    Next ct
                Next t
            Next m
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub
    Private Function Transform(mes As String, acc As String) As String
        Dim i As Integer
        Dim tbl() As String
        Dim Note_str As String
        Dim Note_int1 As Integer
        Dim Note_int2 As Integer

        Transform = Trim(acc)

        tbl = acc.Split()
        '
        Note_str = Trim(tbl(ComboBox12.SelectedIndex))
        Note_int1 = ValNoteCubase.IndexOf(UCase(Note_str))
        '
        Note_str = Trim(tbl(ComboBox11.SelectedIndex))
        Note_int2 = ValNoteCubase.IndexOf(UCase(Note_str))

        ' 4Notes : Etendre à quatre notes les accords de 3 notes
        ' *****************************************************
        If QuatreNotes.Checked And tbl.Count = 3 And Val(mes) >= UpDown2.Value Then ' tbl.Count = 3 signifie que l'on agit uniquement sur les accord de 3 notes 
            Note_int1 = Note_int1 + 12
            If Note_int1 <= 127 Then
                Note_str = ValNoteCubase(Note_int1)
                ReDim Preserve tbl(3)
                tbl(3) = LCase(Note_str)
                Transform = Join(tbl, " ")
            End If
        End If
        '
        ' Basse -1 : Descendre d'une octave la 1ere note
        ' **********************************************
        If BasseMoins12.Checked And Val(mes) >= UpDown1.Value Then
            Note_int2 = Note_int2 - 12 ' descendre d'une octave
            If Note_int2 >= 0 Then
                ' Calcul de la note
                Note_str = ValNoteCubase(Note_int2)
                For i = 0 To tbl.Count - 1
                    tbl(i) = UCase(tbl(i)) ' tout mettre en majuscule
                Next
                tbl(ComboBox11.SelectedIndex) = Trim(Note_str)
                ' ordonner les notes
                Dim tbl1(0 To tbl.Count - 1) As Integer
                For i = 0 To tbl.Count - 1
                    tbl1(i) = ValNoteCubase.IndexOf(tbl(i))
                Next
                Array.Sort(tbl1) 'tire des notes (sous forme chiffre)
                For i = 0 To tbl.Count - 1
                    tbl(i) = LCase(ValNoteCubase(tbl1(i)))
                Next
                Transform = Join(tbl, " ")
            End If
        End If
        '

    End Function
    Function AccordBemDies(accord As String) ' savoir si un accord est exprimé avec des Bémols ou des dièess
        Dim tbl() As String
        Dim i As Integer

        tbl = Split(accord, " ")
        AccordBemDies = "#"
        For i = 0 To UBound(tbl)
            If Mid(tbl(i), 2, 1) = "b" Then
                AccordBemDies = "b"
                Exit For
            End If
        Next i
    End Function



    Sub RAZ_MarqAutoVoice()
        Dim i As Integer

        Grid2.AutoRedraw = False
        '
        For i = 0 To Grid2.Cols - 1
            If Grid2.Cell(0, i).BackColor <> Color.Green Then
                Grid2.Cell(0, i).BackColor = Color.Beige
            End If
        Next i
        '
        Grid2.Refresh()
        Grid2.AutoRedraw = True
    End Sub
    Sub Effacer_Grid4()
        Dim i, j As Integer

        For i = 1 To Grid4.Rows - 1
            For j = 0 To Grid4.Cols - 1
                Grid4.Cell(i, j).Text = ""
            Next j
        Next i
    End Sub
    Private Sub Button11_Click_3(sender As Object, e As EventArgs) Handles Button11.Click
        Dim i As Integer = NouveauProjet()
    End Sub
    Private Sub Button13_Click(sender As Object, e As EventArgs) Handles Button13.Click
        Enregistrer()
    End Sub
    Private Sub Button27_Click(sender As Object, e As EventArgs) Handles Button27.Click
        ExportMarqueurs()
    End Sub

    Private Sub Button28_Click(sender As Object, e As EventArgs) Handles Button28.Click
        ExportCalqueMIDI()
    End Sub

    Private Sub Button14_Click_1(sender As Object, e As EventArgs)
        Annuler()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Button15_Click(sender As Object, e As EventArgs)
        Couper()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Button16_Click_2(sender As Object, e As EventArgs)
        Copier()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Button22_Click(sender As Object, e As EventArgs)
        Coller()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Button23_Click_1(sender As Object, e As EventArgs)
        MIDIReset()
    End Sub
    Private Sub Button29_Click(sender As Object, e As EventArgs) Handles Button29.Click
        MIDIReset()
    End Sub
    Public Function Det_DerMesure() As Integer
        Dim i As Integer
        Dim j As Integer = -1
        Dim k As Integer = -1
        Dim LstPos As New List(Of Integer)
        For i = 0 To listPIANOROLL.Count - 1
            j = listPIANOROLL.Item(i).Det_DerPosNoteOff()
            If j <> -1 Then
                LstPos.Add(j)
            End If
        Next
        If LstPos.Count <> 0 Then
            LstPos.Sort()
            LstPos.Reverse()
            k = LstPos.Item(0)
        End If
        Return (k + 15) / 16
    End Function

    Function Det_DerEventH() As Integer
        Dim i, j As Integer
        Det_DerEventH = Terme.Value
        j = Terme.Value
        For i = j To 1 Step -1
            If Trim(Grid2.Cell(1, i).Text) <> "" Then
                Det_DerEventH = i
                Exit Function
            End If
        Next i
    End Function
    Private Sub Transp1_Click(sender As Object, e As EventArgs) Handles Transp1.Click
        Transposer2(Transp1.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp2_Click(sender As Object, e As EventArgs) Handles Transp2.Click
        Transposer2(Transp2.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp3_Click(sender As Object, e As EventArgs) Handles Transp3.Click
        Transposer2(Transp3.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp4_Click(sender As Object, e As EventArgs) Handles Transp4.Click
        Transposer2(Transp4.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp5_Click(sender As Object, e As EventArgs) Handles Transp5.Click
        Transposer2(Transp5.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp6_Click(sender As Object, e As EventArgs) Handles Transp6.Click
        Transposer2(Transp6.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp7_Click(sender As Object, e As EventArgs) Handles Transp7.Click
        Transposer2(Transp7.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp8_Click(sender As Object, e As EventArgs) Handles Transp8.Click
        Transposer2(Transp8.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp9_Click(sender As Object, e As EventArgs) Handles Transp9.Click
        Transposer2(Transp9.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp10_Click(sender As Object, e As EventArgs) Handles Transp10.Click
        Transposer2(Transp10.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transp11_Click(sender As Object, e As EventArgs) Handles Transp11.Click
        Transposer2(Transp11.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Sub Transposer(vTransp As String)
        Dim i, j, k As Integer
        Dim valTransp As Integer
        Dim a, b, c, e, f As String
        Dim tbl1(), tbl2(), tbl3() As String
        Dim m, t, ct As Integer
        Dim Sortir As Boolean = False
        Dim Tonalité, Accord, Gamme, Mode As String
        Dim sauv_Clef As String = Clef




        valTransp = Val(vTransp)
        '
        ZAnnulation_Sauvegarde(Grid2.Selection.FirstCol, Grid2.Selection.LastCol) ' (mdeb, mfin)
        '
        For i = Grid2.Selection.FirstCol To Grid2.Selection.LastCol
            '
            tbl3 = Split(Grid2.Cell(1, i).Text, "/")
            a = ""
            Erase tbl1
            For j = 0 To UBound(tbl3)
                a = Trim(tbl3(j))
                ReDim Preserve tbl1(j)
                tbl1(j) = Trim(a)
            Next j
            '
            Grid2.Cell(1, i).Text = "" 'effacer la cellule Grid2 cotenant le ou les accord(s)
            'tbl1 = Split(a, "/")
            e = ""
            For j = 0 To UBound(tbl1) ' tbl1 contient le ou les accords cotenu(s) dans la sélection de cellules de Grid2

                '
                ' Détermination des index m, t, ct dans TableEventH
                ' *************************************************
                m = i
                Sortir = False
                For t = 0 To UBound(TableEventH, 2)
                    For ct = 0 To UBound(TableEventH, 3)
                        If Trim(TableEventH(m, t, ct).Accord) = Trim(tbl1(j)) Then
                            Sortir = True
                            Exit For ' t et ct sont trouvés
                        End If
                    Next ct
                    If Sortir Then
                        Exit For
                    End If
                Next t

                Maj_TabNotes("#") ' tout est calculé en # --> on prépare la table Tabnotes en Anglais et en #
                '
                ' le calcul se fait en notation anglaise et en #
                ' Détermination de Tonalité
                ' *************************
                f = TableEventH(m, t, ct).Tonalité
                f = TradAcc_BemEnDiese(f) ' 
                tbl2 = Split(Trim(f), " ")
                b = LCase(tbl2(0)) ' lecture de la tonique de la tonalité --> on passe minuscile
                ' rechercher la note dans ListNotesd
                k = Det_NoteDsTabnotes(b)
                ' détermination de la nouvelle tonique transposée
                c = UCase(TabNotes(k + valTransp))
                ' 
                Tonalité = Trim(c) + " " + Trim(tbl2(1))

                ' Détermination de Accord
                ' ***********************
                f = TableEventH(m, t, ct).Accord
                f = TradAcc_BemEnDiese(f)
                tbl2 = Split(Trim(f), " ")
                b = LCase(tbl2(0)) ' lecture de la tonique de l'accord
                ' rechercher la note dans ListNotesd
                k = Det_NoteDsTabnotes(b)
                ' détermination de la nouvelle tonique transposée
                c = UCase(TabNotes(k + valTransp))
                ' 
                If UBound(tbl2) = 0 Then
                    Accord = Trim(c)
                Else
                    Accord = Trim(c) + " " + Trim(tbl2(1))
                End If
                '
                'Maj_RenvPourTransp(Accord, m, t, ct)
                '
                ' Détermination de Gamme
                ' **********************
                f = TableEventH(m, t, ct).Gamme
                f = TradAcc_BemEnDiese(f)
                tbl2 = Split(Trim(f), " ")
                b = LCase(tbl2(0)) ' lecture de la tonique de la gamme
                ' rechercher la note dans ListNotesd
                k = Det_NoteDsTabnotes(b)
                ' détermination de la nouvelle tonique transposée
                c = UCase(TabNotes(k + valTransp))
                ' 
                Gamme = Trim(c) + " " + Trim(tbl2(1))
                '
                ' Détermination de Mode
                ' **********************
                f = TableEventH(m, t, ct).Mode
                f = TradAcc_BemEnDiese(f)
                tbl2 = Split(Trim(f), " ")
                b = LCase(tbl2(0)) ' lecture de la tonique de la gamme
                ' rechercher la note dans ListNotesd
                k = Det_NoteDsTabnotes(b)
                ' détermination de la nouvelle tonique transposée
                c = UCase(TabNotes(k + valTransp))
                ' 
                Mode = Trim(c) + " " + Trim(tbl2(1))
                ' les variables Tonalités, Accord, Gamme et Mode sont exprimées ici en Anglais et en #
                '
                ' Ecriture de la transpostion
                ' ***************************
                EcritureAccordDsGrid2_2(Tonalité, Accord, Gamme, Mode, m, t, ct) ' cette procédure d'écriture d'accords dans Grid2 n'est utilisé que par laprocédure "Transposer"
            Next j
        Next i
        '
        Ecriture_Entrée_Ds_CompoGrid() ' ' Mise à jour correspondante dans Grid1
        '
        ' Positionner barre bleu-Barre rouge
        ' **********************************
        'a = Trim(Trim(Str(m)) + "." + "1" + "." + "1")
        'ligne = TrouverLignedePosition2(a)
        'If ligne <> -1 Then
        'Grid1.Cell(ligne, 0).EnsureVisible() ' doit être placé avant
        'PositionnerCurseursRougeBleu(ligne)
        'End If
        '
        Clef = sauv_Clef
        Maj_TabNotes(Clef) ' restitution de tabnotes
    End Sub
    Sub Transposer2(vTransp As String)
        Dim i, k As Integer
        Dim valTransp As Integer
        Dim b, c, f As String
        Dim m, t, ct As Integer
        Dim Sortir As Boolean = False
        Dim Tonalité, Accord, Gamme, Mode As String
        Dim sauv_Clef As String = Clef
        Dim tbl2() As String



        valTransp = Val(vTransp)
        '
        ZAnnulation_Sauvegarde(Grid2.Selection.FirstCol, Grid2.Selection.LastCol) ' (mdeb, mfin)
        '
        For i = Grid2.Selection.FirstCol To Grid2.Selection.LastCol
            '
            Grid2.Cell(1, i).Text = "" 'effacer la cellule Grid2 cotenant le ou les accord(s)
            '
            ' Détermination des index m, t, ct dans TableEventH
            ' *************************************************
            m = i
            Sortir = False
            For t = 0 To UBound(TableEventH, 2)
                For ct = 0 To UBound(TableEventH, 3)
                    If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                        Maj_TabNotes("#") ' tout est calculé en # --> on prépare la table Tabnotes en Anglais et en #
                        '
                        ' le calcul se fait en notation anglaise et en #
                        ' Détermination de Tonalité
                        ' *************************
                        f = TableEventH(m, t, ct).Tonalité
                        f = TradAcc_BemEnDiese(f) ' 
                        tbl2 = Split(Trim(f), " ")
                        b = LCase(tbl2(0)) ' lecture de la tonique de la tonalité --> on passe minuscule
                        ' rechercher la note dans ListNotesd
                        k = Det_NoteDsTabnotes(b)
                        ' détermination de la nouvelle tonique transposée
                        c = UCase(TabNotes(k + valTransp))
                        ' 
                        Tonalité = Trim(c) + " " + Trim(tbl2(1))

                        ' Détermination de Accord
                        ' ***********************
                        f = TableEventH(m, t, ct).Accord
                        f = TradAcc_BemEnDiese(f)
                        tbl2 = Split(Trim(f), " ")
                        b = LCase(tbl2(0)) ' lecture de la tonique de l'accord
                        ' rechercher la note dans ListNotesd
                        k = Det_NoteDsTabnotes(b)
                        ' détermination de la nouvelle tonique transposée
                        c = UCase(TabNotes(k + valTransp))
                        ' 
                        If UBound(tbl2) = 0 Then
                            Accord = Trim(c)
                        Else
                            Accord = Trim(c) + " " + Trim(tbl2(1))
                        End If
                        '
                        'Maj_RenvPourTransp(Accord, m, t, ct)
                        '
                        ' Détermination de Gamme
                        ' **********************
                        f = TableEventH(m, t, ct).Gamme
                        f = TradAcc_BemEnDiese(f)
                        tbl2 = Split(Trim(f), " ")
                        b = LCase(tbl2(0)) ' lecture de la tonique de la gamme
                        ' rechercher la note dans ListNotesd
                        k = Det_NoteDsTabnotes(b)
                        ' détermination de la nouvelle tonique transposée
                        c = UCase(TabNotes(k + valTransp))
                        ' 
                        Gamme = Trim(c) + " " + Trim(tbl2(1))
                        '
                        ' Détermination de Mode
                        ' **********************
                        f = TableEventH(m, t, ct).Mode
                        f = TradAcc_BemEnDiese(f)
                        tbl2 = Split(Trim(f), " ")
                        b = LCase(tbl2(0)) ' lecture de la tonique de la gamme
                        ' rechercher la note dans ListNotesd
                        k = Det_NoteDsTabnotes(b)
                        ' détermination de la nouvelle tonique transposée
                        c = UCase(TabNotes(k + valTransp))
                        ' 
                        Mode = Trim(c) + " " + Trim(tbl2(1))
                        ' les variables Tonalités, Accord, Gamme et Mode sont exprimées ici en Anglais et en #
                        '
                        ' Ecriture de la transpostion
                        ' ***************************
                        EcritureAccordDsGrid2_2(Tonalité, Accord, Gamme, Mode, m, t, ct) ' cette procédure d'écriture d'accords dans Grid2 n'est utilisé que par la procédure "Transposer"
                        '
                    End If
                Next ct
            Next t
        Next i
        '
        Ecriture_Entrée_Ds_CompoGrid() ' ' Mise à jour correspondante dans Grid1
        '
        ' Positionner barre bleu-Barre rouge
        ' **********************************
        'a = Trim(Trim(Str(m)) + "." + "1" + "." + "1")
        'ligne = TrouverLignedePosition2(a)
        'If ligne <> -1 Then
        'Grid1.Cell(ligne, 0).EnsureVisible() ' doit être placé avant
        'PositionnerCurseursRougeBleu(ligne)
        'End If
        '
        Clef = sauv_Clef
        Maj_TabNotes(Clef) ' restitution de tabnotes
    End Sub
    Function TonalitéDsClef(Tonalité) As String
        Dim table1(0 To 12) As String
        Dim tbl() As String
        Dim i As Integer
        Dim flag1 As Boolean = False
        ' cette procédure part du principe que la Tonalité en entrée est toujours fournie en #
        table1(0) = "C#"
        table1(1) = "F#"
        table1(2) = "B"
        table1(3) = "E"
        table1(4) = "A"
        table1(5) = "D"
        table1(6) = "G"
        table1(7) = "C"
        table1(8) = "F"
        table1(10) = "Bb"
        table1(11) = "Eb"
        table1(12) = "Ab"
        '
        tbl = Split(Trim(Tonalité), " ")
        For i = 0 To 12
            If Trim(tbl(0)) = table1(i) Then
                flag1 = True
                Exit For
            End If
        Next
        If flag1 = True Then
            TonalitéDsClef = "#"
            If Trim(tbl(0)) = "F" Then
                TonalitéDsClef = "b"
            End If
        Else
            TonalitéDsClef = "b"
        End If
    End Function
    Function TonalitéDsClef2(Tonalité) As String
        Dim table1(0 To 12) As String
        Dim table2(0 To 12) As String
        Dim tbl() As String
        Dim i As Integer
        Dim flag1 As Boolean = False
        Dim RelativeMaj As String
        ' cette procédure part du principe que la Tonalité en entrée est toujours fournie en #
        tbl = Split(Trim(Tonalité), " ")
        table1(0) = "C#"
        table1(1) = "F#"
        table1(2) = "B"
        table1(3) = "E"
        table1(4) = "A"
        table1(5) = "D"
        table1(6) = "G"
        table1(7) = "C"
        table1(8) = "F"
        table1(10) = "Bb"
        table1(11) = "Eb"
        table1(12) = "Ab"
        If tbl(1) = "MinH" Or tbl(1) = "MinM" Then
            table2(0) = "A#"
            table2(1) = "D#"
            table2(2) = "G#"
            table2(3) = "C#"
            table2(4) = "F#"
            table2(5) = "B"
            table2(6) = "E"
            table2(7) = "A"
            table2(8) = "D"
            table2(10) = "G"
            table2(11) = "C"
            table2(12) = "F"
            '
            For i = 0 To 12
                If Trim(tbl(0)) = table2(i) Then
                    flag1 = True
                    Exit For
                End If
            Next
            RelativeMaj = table1(i) + " " + "Maj"
            tbl = Split(Trim(RelativeMaj), " ")
        End If
        '
        For i = 0 To 12
            If Trim(tbl(0)) = table1(i) Then
                flag1 = True
                Exit For
            End If
        Next i
        If flag1 = True Then
            TonalitéDsClef2 = "#"
            If Trim(tbl(0)) = "F" Then
                TonalitéDsClef2 = "b"
            End If
        Else
            TonalitéDsClef2 = "b"
        End If
    End Function
    Function TradAcc_DieseEnBem(accord As String) As String
        Dim tbl() As String
        Dim a, b As String
        Dim i As Integer
        '
        TradAcc_DieseEnBem = Trim(accord)
        '
        tbl = Split(accord)
        a = LCase(tbl(0))
        '
        For i = 0 To 35
            If a = TabNotesD(i) Then
                a = TabNotesB(i) ' on traduit la tonique de l'accord en #
                Exit For
            End If
        Next
        '
        ' Mettre en majuscules
        ' *******************
        If Len(a) = 1 Then
            a = UCase(a)
        Else
            If Mid(a, 2, 2) = "#" Then
                a = UCase(a)
            Else
                b = Mid(a, 1, 1)
                b = UCase(b)
                a = Trim(b) + "b"
            End If
        End If

        If UBound(tbl) > 0 Then
            TradAcc_DieseEnBem = a + " " + tbl(1)
        Else
            TradAcc_DieseEnBem = a
        End If
    End Function
    Function Det_NoteDsTabnotes(Note As String) As Integer
        Dim i As Integer

        Det_NoteDsTabnotes = 0
        For i = 0 To UBound(TabNotes)
            If Trim(Note) = Trim(TabNotes(i)) Then
                Exit For
            End If
        Next i
        '
        Det_NoteDsTabnotes = i
    End Function
    Function Det_NoteDsTabnotesMaj(Note As String) As Integer
        Dim i As Integer

        Det_NoteDsTabnotesMaj = 0
        For i = 0 To UBound(TabNotes)
            If Trim(Note) = Trim(TabNotes(i)) Then
                Exit For
            End If
        Next i
        '
        Det_NoteDsTabnotesMaj = i
    End Function
    Function Det_TonalitédDuPremierAccordDsMesure(m As Integer) As String
        Dim t, ct As Integer
        Dim sortir As Boolean

        sortir = False
        For t = 0 To UBound(TableEventH, 2) - 1
            For ct = 0 To UBound(TableEventH, 3) - 1
                If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                    sortir = True
                    Exit For ' t et ct sont trouvés
                End If
            Next ct
            If sortir Then
                Exit For
            End If
        Next t
        Det_TonalitédDuPremierAccordDsMesure = TableEventH(m, t, ct).Tonalité
    End Function

    Sub Init_Graphisme()
        If Me.WindowState <> FormWindowState.Maximized Then

            If Not (EnChargement) Then
                Me.Visible = False
            End If
            DessinApplication2()

            If Not (EnChargement) Then
                Me.Visible = True
            End If
            '

        End If
        If Me.WindowState = FormWindowState.Maximized Then
            Me.WindowState = FormWindowState.Normal
        End If
    End Sub


    Private Sub Accord11_Click(sender As Object, e As EventArgs) Handles Accord11.Click
        Ecr_AccordParMenu(Trim(Accord11.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord12_Click(sender As Object, e As EventArgs) Handles Accord12.Click
        Ecr_AccordParMenu(Trim(Accord12.Text))
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord13_Click(sender As Object, e As EventArgs) Handles Accord13.Click
        Ecr_AccordParMenu(Trim(Accord13.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord14_Click(sender As Object, e As EventArgs) Handles Accord14.Click
        Ecr_AccordParMenu(Trim(Accord14.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord15_Click(sender As Object, e As EventArgs) Handles Accord15.Click
        Ecr_AccordParMenu(Trim(Accord15.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord16_Click(sender As Object, e As EventArgs) Handles Accord16.Click
        Ecr_AccordParMenu(Trim(Accord16.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord17_Click(sender As Object, e As EventArgs) Handles Accord17.Click
        Ecr_AccordParMenu(Trim(Accord17.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub Accord18_Click(sender As Object, e As EventArgs) Handles Accord18.Click
        Ecr_AccordParMenu(Trim(Accord18.Text))
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub
    Sub Ecr_AccordParMenu(Acc As String)
        Dim ligne As Integer
        Dim tbl() As String
        Dim Chiffrage As String
        Dim m, t, ct As Integer
        Dim a As String


        Flag_EcrDragDrop = False
        Select Case DerGridCliquée
            Case GridCours.Grid2
                tbl = Split(TableEventH(SauveMouseColGrid2, 1, 1).Mode, " ")
                Chiffrage = tbl(1)
                Select Case Trim(Chiffrage)
                    Case "Maj"
                        OrigineAccord = Modes.Majeur   ' OrigineAccord est mis à jour pour EcritureAccordDsGrid2
                    Case "MinH"
                        OrigineAccord = Modes.MineurH
                    Case "MinM"
                        OrigineAccord = Modes.MineurM
                End Select
                ' Les 3 paramètres ci-après sont utilisés par la procédure "EcritureAccordDsGrid2"
                ' *******************************************************************************

                Entrée_Accord = Trim(Acc)
                Entrée_Tonalité = TableEventH(SauveMouseColGrid2, 1, 1).Tonalité
                Entrée_Gamme = TableEventH(SauveMouseColGrid2, 1, 1).Gamme
                Entrée_Mode = TableEventH(SauveMouseColGrid2, 1, 1).Mode
                Entrée_Degré = TableEventH(SauveMouseColGrid2, 1, 1).Degré
                Entrée_Position = TableEventH(SauveMouseColGrid2, 1, 1).Position

                CAD_LabelCours = TableEventH(SauveMouseColGrid2, 1, 1).Degré

                EcritureAccordDsGrid2(Trim(Acc), SauveMouseColGrid2)
                '

            Case GridCours.Grid3
                a = IndexTableEventHColgrid3(SauveMouseColGrid3)
                tbl = Split(a, " ")
                m = Val(tbl(0))
                t = Val(tbl(1))
                ct = Val(tbl(2))
                '
                Entrée_Accord = Trim(Acc)
                Entrée_Tonalité = TableEventH(SauveMouseColGrid2, 1, 1).Tonalité
                Entrée_Gamme = TableEventH(SauveMouseColGrid2, 1, 1).Gamme
                Entrée_Mode = TableEventH(SauveMouseColGrid2, 1, 1).Mode
                Entrée_Degré = TableEventH(SauveMouseColGrid2, 1, 1).Degré
                Entrée_Position = TableEventH(SauveMouseColGrid2, 1, 1).Position

                ligne = 2 ' pour écriture accord par menu contextuel on force ligne3=2 dans l'appel de EcritureAccordDsGrid3
                AccordMarqué = Trim(Acc)
                EcritureAccordDsGrid3(Trim(Acc), SauveMouseColGrid3, ligne) ' pour écriture accord par menu contextuel on force ligne3=2 dans l'appel de EcritureAccordDsGrid3
        End Select
    End Sub
    Function IndexTableEventHColgrid3(ColonneGrid3 As Integer) As String
        Dim i, j As Integer
        Dim mesure As String = ""
        Dim temps As String = ""
        Dim contretemps As Integer = 1
        Dim m, t, ct As Integer
        Dim a As String

        j = ColonneGrid3 'Grid3.MouseCol
        '
        ' détermination de la mesure
        ' **************************
        For i = j To 0 Step -1
            a = Grid3.Cell(1, i).Text
            If Trim(a) <> "" Then
                mesure = Trim(a)
                'ColMesure = i
                Exit For
            End If
        Next i
        '
        'IndexDansMesure = j - ColMesure ' à supprimer ??????
        '
        ' détermination des index t et ct
        ' *******************************
        contretemps = 1
        For i = j To 0 Step -1
            a = Grid3.Cell(2, i).Text
            If Trim(a) <> "" Then
                temps = Trim(a)
                'résultat = Trim(mesure) + "." + Trim(temps) + "." + Trim(Str(contretemps + 1))
                Exit For
            End If
            contretemps = contretemps + 1 ' détermination du contretemps
        Next i

        m = Val(mesure)
        t = Val(temps) '- 1
        ct = contretemps '- 1
        '
        IndexTableEventHColgrid3 = Trim(mesure) + " " + Trim(temps) + " " + Trim(Str(contretemps))
    End Function

    Sub ECR_CelluleTabtons(N_Cellule As Integer, Accord As String)
        Dim i, j, k As Integer
        Dim ligne, col As Integer
        Dim a As String
        Dim IndexDegré As Integer

        i = N_Cellule
        ' Ecriture du nouvel accord dans Tabtons
        ' **************************************
        TabTons.Item(i).Text = Trim(Accord)
        TabTons.Item(i).Refresh()
        '
        ' Détermination de l'index du degré dans chaque ligne (equivalence de N_Cellule en N° degré)
        ' ******************************************************************************************
        ligne = Det_LigneTableGlobale(i)
        Select Case ligne
            Case 0
                col = i
            Case 1
                col = i - 7
            Case 2
                col = i - 14
        End Select
        a = TabTonsDegrés.Item(col).Text
        IndexDegré = Det_IndexDegré(a)
        '
        ' Mise à jour de l'accord dans TableCoursAcc (avec ligne et Indexdegré)
        ' *********************************************************************
        TableCoursAcc(ligne, IndexDegré).Accord = Trim(Accord)
        '
        ' Mise à jour du type d'accord dans TableCoursAcc 
        ' ***********************************************
        j = InStr(Accord, "7")
        If j <> 0 Then
            TableCoursAcc(ligne, IndexDegré).TyAcc = Menu4Notes.Text ' Accord de 7e
        Else
            j = InStr(Accord, "9")
            If j <> 0 Then
                TableCoursAcc(ligne, IndexDegré).TyAcc = MenuNotes9.Text ' Accord de 9e
            Else
                j = InStr(Accord, "4")
                k = InStr(Accord, "11")
                If j <> 0 Or k <> 0 Then
                    TableCoursAcc(ligne, IndexDegré).TyAcc = MenuNotes11.Text ' Accord de 11e ou 4
                Else
                    TableCoursAcc(ligne, IndexDegré).TyAcc = Menu3notes.Text  ' Accord de 3 notes
                End If
            End If
        End If
        '
        'Maj_Renversement(i)
        'RAZ_FiltresTabtons(i)
    End Sub
    Sub ECR_CelluleTabtonsVoisins(N_Cellule As Integer, Accord As String)
        Dim i, j, k As Integer
        Dim ligne As Integer
        Dim IndexDegré As Integer

        i = N_Cellule
        ' Ecriture du nouvel accord dans Tabtons
        ' **************************************
        TabTonsVoisins.Item(i).Text = Trim(Accord)
        TabTonsVoisins.Item(i).Refresh()
        '
        ' Détermination de l'index du degré dans chaque ligne (equivalence de N_Cellule en N° degré)
        ' ******************************************************************************************
        IndexDegré = Det_IndexDegré2(i)
        ligne = Det_LigneTableGlobale(i)
        '
        ' Mise à jour de l'accord dans TableCoursAcc (avec ligne et Indexdegré)
        ' *********************************************************************
        TableCoursAccVoisins(ligne, IndexDegré).Accord = Trim(Accord)
        '
        ' Mise à jour du type d'accord dans TableCoursAccVoisins 
        ' ******************************************************
        j = InStr(Accord, "7")
        If j <> 0 Then
            TableCoursAccVoisins(ligne, IndexDegré).TyAcc = Menu4Notes.Text ' Accord de 7e
        Else
            j = InStr(Accord, "9")
            If j <> 0 Then
                TableCoursAccVoisins(ligne, IndexDegré).TyAcc = MenuNotes9.Text ' Accord de 9e
            Else
                j = InStr(Accord, "4")
                k = InStr(Accord, "11")
                If j <> 0 Or k <> 0 Then
                    TableCoursAccVoisins(ligne, IndexDegré).TyAcc = MenuNotes11.Text ' Accord de 11e ou 4
                Else
                    TableCoursAccVoisins(ligne, IndexDegré).TyAcc = Menu3notes.Text  ' Accord de 3 notes
                End If
            End If
        End If
        '
    End Sub
    Private Sub Accord11_2_Click(sender As Object, e As EventArgs) Handles Accord11_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord11_2.Text))
    End Sub
    Private Sub Accord12_2_Click(sender As Object, e As EventArgs) Handles Accord12_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord12_2.Text))
    End Sub
    Private Sub Accord13_2_Click(sender As Object, e As EventArgs) Handles Accord13_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord13_2.Text))
    End Sub
    Private Sub Accord14_2_Click(sender As Object, e As EventArgs) Handles Accord14_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord14_2.Text))
    End Sub
    Private Sub Accord15_2_Click(sender As Object, e As EventArgs) Handles Accord15_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord15_2.Text))
    End Sub

    Private Sub Accord16_2_Click(sender As Object, e As EventArgs) Handles Accord16_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord16_2.Text))
    End Sub

    Private Sub Accord17_2_Click(sender As Object, e As EventArgs) Handles Accord17_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord17_2.Text))
    End Sub

    Private Sub Accord18_2_Click(sender As Object, e As EventArgs) Handles Accord18_2.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtonsCAD(ind, Trim(Accord18_2.Text))
    End Sub
    Sub ECR_CelluleTabtonsCAD(N_Cellule As Integer, Accord As String)
        Dim i As Integer
        Dim a As String
        Dim typAccord, IndexDegré As Integer
        '
        For i = 0 To 3 ' on recopie les données de TableGlobalAcc dans CAD_TableGlobalAcc
            For k = 0 To 6
                CAD_TableGlobalAcc(i, 0, k) = TableGlobalAcc(i, 0, k) ' mise à jour des accords majeurs
                CAD_TableGlobalAcc(i, 1, k) = TableGlobalAcc(i, 1, k) ' mise à jour des accords mineures
            Next k
        Next i
        '
        i = N_Cellule
        typAccord = ComboBox6.SelectedIndex
        '
        a = TabCadDegrés.Item(i).Text
        If Trim(a) <> "" Then
            IndexDegré = Det_IndexDegré(a)
            '
            CAD_TableCoursAcc(IndexDegré).Accord = Trim(Accord) 'TableGlobalAcc(typAccord, 0, indexDegré)
            TabCad.Item(i).Text = Trim(Accord) ' CAD_TableCoursAcc(i).Accord
        End If
    End Sub

    Private Sub Accord11_1_Click(sender As Object, e As EventArgs) Handles Accord11_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord11_1.Text))

    End Sub
    Private Sub Accord12_1_Click(sender As Object, e As EventArgs) Handles Accord12_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord12_1.Text))

    End Sub
    Private Sub Accord13_1_Click(sender As Object, e As EventArgs) Handles Accord13_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord13_1.Text))

    End Sub
    Private Sub Accord14_1_Click(sender As Object, e As EventArgs) Handles Accord14_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord14_1.Text))

    End Sub
    Private Sub Accord15_1_Click(sender As Object, e As EventArgs) Handles Accord15_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord15_1.Text))

    End Sub
    Private Sub Accord16_1_Click(sender As Object, e As EventArgs) Handles Accord16_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)

        ECR_CelluleTabtons(ind, Trim(Accord16_1.Text))

    End Sub
    Private Sub Accord17_1_Click(sender As Object, e As EventArgs) Handles Accord17_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord17_1.Text))

    End Sub
    Private Sub Accord18_1_Click(sender As Object, e As EventArgs) Handles Accord18_1.Click
        Dim com As ToolStripMenuItem = sender
        Dim ind As Integer

        ind = Val(com.Tag)
        '
        ECR_CelluleTabtons(ind, Trim(Accord18_1.Text))

    End Sub

    Private Sub OctaveRacine_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub NoteRacine_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox1_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox2_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox3_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox4_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox6_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox22_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboBox23_KeyDown(sender As Object, e As KeyEventArgs)
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboMidiOut_KeyDown(sender As Object, e As KeyEventArgs) Handles ComboMidiOut.KeyDown
        e.SuppressKeyPress = True
    End Sub

    Private Sub ComboMidiIn_KeyDown(sender As Object, e As KeyEventArgs) Handles ComboMidiIn.KeyDown
        e.SuppressKeyPress = True
    End Sub
    Private Sub NoteRacine_SelectedIndexChanged_2(sender As Object, e As EventArgs)
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Octave_Plus1_CheckedChanged(sender As Object, e As EventArgs)
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Button30_Click(sender As Object, e As EventArgs)
        Dim a As String

        a = Det_NotesAccord("C M7")
    End Sub

    Private Sub Label46_Click(sender As Object, e As EventArgs)

    End Sub
    Private Sub Button4_Click(sender As Object, e As EventArgs)
        RAZ_CouleursPiano()
    End Sub

    Function Det_RelativeMajeure(Mode As String) As String
        Dim tbl() As String
        Dim note As String
        '
        '
        Det_RelativeMajeure = Trim(Mode)
        '
        tbl = Split(Mode)
        If Trim(tbl(1)) = "MinH" Or Trim(tbl(1)) = "MinM" Or Trim(tbl(1)) = "MinN" Then
            note = tbl(0)
            Select Case Trim(note)
                Case "A#", "Bb"
                    Det_RelativeMajeure = "C# " + "Maj"
                Case "D#", "Eb"
                    Det_RelativeMajeure = "F# " + "Maj"
                Case "G#", "Ab"
                    Det_RelativeMajeure = "B " + "Maj"
                Case "C#", "Db"
                    Det_RelativeMajeure = "E " + "Maj"
                Case "F#", "Gb"
                    Det_RelativeMajeure = "A " + "Maj"
                Case "B"
                    Det_RelativeMajeure = "D " + "Maj"
                Case "E"
                    Det_RelativeMajeure = "G " + "Maj"
                Case "A"
                    Det_RelativeMajeure = "C " + "Maj"
                Case "D"
                    Det_RelativeMajeure = "F " + "Maj"
                Case "G"
                    Det_RelativeMajeure = "Bb " + "Maj"
                Case "C"
                    Det_RelativeMajeure = "Eb " + "Maj"
                Case "F"
                    Det_RelativeMajeure = "Ab " + "Maj"
            End Select

        End If


    End Function
    Function Det_RelativeMineure(Mode As String) As String
        Dim tbl() As String
        Dim note As String
        '
        Det_RelativeMineure = Trim(Mode)

        tbl = Split(Mode)
        If Trim(tbl(1)) = "Maj" Then
            note = tbl(0)
            Select Case Trim(note)
                Case "C#"
                    Det_RelativeMineure = "A# " + "Min"
                Case "F#"
                    Det_RelativeMineure = "D# " + "Min"
                Case "B"
                    Det_RelativeMineure = "G# " + "Min"
                Case "E"
                    Det_RelativeMineure = "C# " + "Min"
                Case "A"
                    Det_RelativeMineure = "F# " + "Min"
                Case "D"
                    Det_RelativeMineure = "B " + "Min"
                Case "G"
                    Det_RelativeMineure = "E " + "Min"
                Case "C"
                    Det_RelativeMineure = "A " + "Min"
                Case "F"
                    Det_RelativeMineure = "D " + "Min"
                Case "Bb"
                    Det_RelativeMineure = "G " + "Min"
                Case "Eb"
                    Det_RelativeMineure = "C " + "Min"
                Case "Ab"
                    Det_RelativeMineure = "F " + "Min"
            End Select

        End If
    End Function

    Function Det_RelatMaj(acc As String) As String
        Dim tbl() As String
        Dim note As String
        Dim a As String

        Det_RelatMaj = "C"
        tbl = Split(acc)
        note = tbl(0)
        Select Case Trim(note)
            Case "A#", "Bb"
                a = "C#"
            Case "D#", "Eb"
                a = "F#"
            Case "G#", "Ab"
                a = "B"
            Case "C#", "Db"
                a = "E"
            Case "F#", "Gb"
                a = "A"
            Case "B"
                a = "D"
            Case "E"
                a = "G"
            Case "A"
                a = "C"
            Case "D"
                a = "F"
            Case "G"
                a = "Bb"
            Case "C"
                a = "Eb"
            Case "F"
                a = "Ab"
            Case Else
                a = "C"
        End Select
        '
    End Function


    Function Det_RelativeMajeure2(Mode As String) As String
        Dim tbl() As String
        Dim note As String
        '
        ' ici la note du Mode mineure doivent arriver obligatoirement en notation anglo-saxonne
        '
        Det_RelativeMajeure2 = Trim(Mode)

        tbl = Split(Mode)
        If Trim(tbl(1)) = "MinH" Or Trim(tbl(1)) = "MinM" Then
            note = tbl(0)
            Select Case Trim(note)
                Case "A#"
                    Det_RelativeMajeure2 = "C# " + "Maj"
                Case "D#"
                    Det_RelativeMajeure2 = "F# " + "Maj"
                Case "G#"
                    Det_RelativeMajeure2 = "B " + "Maj"
                Case "C#"
                    Det_RelativeMajeure2 = "E " + "Maj"
                Case "F#"
                    Det_RelativeMajeure2 = "A " + "Maj"
                Case "B"
                    Det_RelativeMajeure2 = "D " + "Maj"
                Case "E"
                    Det_RelativeMajeure2 = "G " + "Maj"
                Case "A"
                    Det_RelativeMajeure2 = "C " + "Maj"
                Case "D"
                    Det_RelativeMajeure2 = "F " + "Maj"
                Case "G"
                    Det_RelativeMajeure2 = "Bb " + "Maj"
                Case "C"
                    Det_RelativeMajeure2 = "Eb " + "Maj"
                Case "F"
                    Det_RelativeMajeure2 = "Ab " + "Maj"
            End Select

        End If


    End Function
    Sub Maj_LGamMaj()
        LGamMaj.Add("C Maj")
        LGamMaj.Add("C# Maj")
        LGamMaj.Add("D Maj")
        LGamMaj.Add("D# Maj")
        LGamMaj.Add("E Maj")
        LGamMaj.Add("F Maj")
        LGamMaj.Add("F# Maj")
        LGamMaj.Add("G Maj")
        LGamMaj.Add("G# Maj")
        LGamMaj.Add("A Maj")
        LGamMaj.Add("A# Maj")
        LGamMaj.Add("B Maj")
    End Sub
    Sub Maj_LGamMinH()
        LGamMinH.Add("C MinH")
        LGamMinH.Add("C# MinH")
        LGamMinH.Add("D MinH")
        LGamMinH.Add("D# MinH")
        LGamMinH.Add("E MinH")
        LGamMinH.Add("F MinH")
        LGamMinH.Add("F# MinH")
        LGamMinH.Add("G MinH")
        LGamMinH.Add("G# MinH")
        LGamMinH.Add("A MinH")
        LGamMinH.Add("A# MinH")
        LGamMinH.Add("B MinH")
    End Sub
    Sub Maj_LGamMinM()
        LGamMinM.Add("C MinM")
        LGamMinM.Add("C# MinM")
        LGamMinM.Add("D MinM")
        LGamMinM.Add("D# MinM")
        LGamMinM.Add("E MinM")
        LGamMinM.Add("F MinM")
        LGamMinM.Add("F# MinM")
        LGamMinM.Add("G MinM")
        LGamMinM.Add("G# MinM")
        LGamMinM.Add("A MinM")
        LGamMinM.Add("A# MinM")
        LGamMinM.Add("B MinM")
    End Sub
    Sub Maj_LGamMajH()
        LGamMajH.Add("C MajH")
        LGamMajH.Add("C# MajH")
        LGamMajH.Add("D MajH")
        LGamMajH.Add("D# MajH")
        LGamMajH.Add("E MajH")
        LGamMajH.Add("F MajH")
        LGamMajH.Add("F# MajH")
        LGamMajH.Add("G MajH")
        LGamMajH.Add("G# MajH")
        LGamMajH.Add("A MajH")
        LGamMajH.Add("A# MajH")
        LGamMajH.Add("B MajH")
    End Sub
    Sub Maj_LGamPentaMin()
        LGamPentaMin.Add("C PMin")
        LGamPentaMin.Add("C# PMin")
        LGamPentaMin.Add("D PMin")
        LGamPentaMin.Add("D# PMin")
        LGamPentaMin.Add("E PMin")
        LGamPentaMin.Add("F PMin")
        LGamPentaMin.Add("F# PMin")
        LGamPentaMin.Add("G PMin")
        LGamPentaMin.Add("G# PMin")
        LGamPentaMin.Add("A PMin")
        LGamPentaMin.Add("A# PMin")
        LGamPentaMin.Add("B PMin")
    End Sub
    Sub Maj_LGamBlues()
        LGamBlues.Add("C Blues")
        LGamBlues.Add("C# Blues")
        LGamBlues.Add("D Blues")
        LGamBlues.Add("D# Blues")
        LGamBlues.Add("E Blues")
        LGamBlues.Add("F Blues")
        LGamBlues.Add("F# Blues")
        LGamBlues.Add("G Blues")
        LGamBlues.Add("G# Blues")
        LGamBlues.Add("A Blues")
        LGamBlues.Add("A# Blues")
        LGamBlues.Add("B Blues")
    End Sub
    Sub Maj_LGam()
        Maj_LGamMaj()
        Maj_LGamMinH()
        Maj_LGamMinM()
        Maj_LGamMajH()
        Maj_LGamPentaMin()
        Maj_LGamBlues()
    End Sub
    Public Function AccordsSélection2(Ldeb As Integer, Lfin As Integer) As String
        Dim i As Integer
        Dim a As String
        Dim b As String = ""

        For i = Ldeb To Lfin
            a = Trim(Grid1.Cell(i, 4).Text)
            If Trim(a) <> "" Then
                b = b + Trim(a) + ";"
            End If
        Next
        If Trim(b) <> "" Then
            'b = Mid(b, 1, Len(b) - 1)
            b = Microsoft.VisualBasic.Left(b, Len(b) - 1)
        End If
        Return b

    End Function
    Function TradAcc_BemEnDiese(accord As String) As String
        Dim tbl() As String
        Dim a As String
        Dim i As Integer
        '
        TradAcc_BemEnDiese = Trim(accord)
        '
        tbl = Split(accord)
        a = LCase(tbl(0))
        '
        For i = 0 To 35
            If a = TabNotesB(i) Then
                a = TabNotesD(i) ' on traduit la tonique de l'accord en #
                Exit For
            End If
        Next
        If UBound(tbl) > 0 Then
            TradAcc_BemEnDiese = UCase(a) + " " + tbl(1)
        Else
            TradAcc_BemEnDiese = UCase(a)
        End If
    End Function

    Function Trad_RacineEnBem(noteR As String) As String
        Dim i As Integer

        Trad_RacineEnBem = noteR
        For i = 0 To 35
            If noteR = TabNotesD(i) Then
                Trad_RacineEnBem = TabNotesB(i) ' on traduit la racine en b
                Exit For
            End If
        Next
    End Function

    Private Sub AideToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AideToolStripMenuItem.Click
        Dim a As String = "https://compomusic.fr/guide-rapide/"
        '
        Process.Start(Trim(a))
    End Sub

    Private Sub AuSujetDeToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AuSujetDeToolStripMenuItem.Click
        AboutBox1.ShowDialog()
    End Sub

    Private Sub FrançaisToolStripMenuItem1_Click(sender As Object, e As EventArgs)
        Process.Start("www.calquesmidi.fr/HV_Manuel/HV_ManuelFR.htm")
    End Sub

    Private Sub EnglishToolStripMenuItem1_Click(sender As Object, e As EventArgs)
        Dim a As String
        a = "en" ' sauvegarde de la langue
        Avertis = "Coming soon ..."
        MessageHV.PContenuMess = Avertis
        MessageHV.PTypBouton = "OK"
        Cacher_FormTransparents()
        MessageHV.ShowDialog()
        ' Dim result As DialogResult = MessageBox.Show(Avertis, titre, MessageBoxButtons.OK, MessageBoxIcon.Warning)
        Langue = Trim(a) ' restitution de la "Langue"

    End Sub
    Private Sub ToolStripMenuItem6_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem6.Click
        If Module1.LangueIHM = "fr" Then
            Process.Start("http://calquesmidi.fr/au-sujet-du-site")
        Else
            Process.Start("http://midilayers.org/about-this-web-site")
        End If
    End Sub
    Private Sub FichierExcelToolStripMenuItem_Click(sender As Object, e As EventArgs)
        Try
            If Det_NomFichExportExcel() Then
                Grid1.ExportToExcel(FichierExportDoc)
            End If
        Catch ex As Exception ' ce try catch est necessaire pour éviter ici une erreur qui survient quand on place le focus sur une cellule différente de la cellule Active (voir le setfocus dans les évènements gridx_mouseclick)
            MessageBox.Show(ex.Message)

        End Try
    End Sub

    Private Sub FichierPDFToolStripMenuItem_Click(sender As Object, e As EventArgs)
        Try
            If Det_NomFichExportPDF() Then
                Grid1.ExportToPDF(FichierExportDoc)
            End If
        Catch ex As Exception ' ce try catch est necessaire pour éviter ici une erreur qui survient quand on place le focus sur une cellule différente de la cellule Active (voir le setfocus dans les évènements gridx_mouseclick)
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    Private Sub FichierHTMLToolStripMenuItem_Click(sender As Object, e As EventArgs)
        'Form2.ShowDialog()
        'ExportHTML()

    End Sub
    Private Sub ExportHTML()
        'Dim a As String
        ''
        'Dim nbLignes As Integer
        'Dim nbCols As Integer
        'Dim PrésenceModeEtendu As Boolean
        'Dim l As Integer

        'Try


        'If Det_NomFichExportHTM() Then
        'Grid1.AutoRedraw = False
        ''
        ''
        '' 1- Réduire au nombre de lignes utilisées
        '' ****************************************
        'nbLignes = Grid1.Rows
        'l = Det_NbLignesUtilisées()
        'Grid1.Rows = l
        'nbCols = Grid1.Cols
        '
        '' 2- Au moins 1 info à afficher dans le mode étendue ?
        '' ****************************************************
        '
        'PrésenceModeEtendu = False
        'For i = 1 To Grid1.Rows - 1
        'If Trim(Grid1.Cell(i, 8).Text) <> "" Then
        'PrésenceModeEtendu = True
        'Exit For
        'End If
        'Next i
        '' 3 - Impression
        '' **************
        'If Not (PrésenceModeEtendu) Then
        'Grid1.Cols = 7
        'Else
        'Grid1.Cols = nbColonnesGrid1 - 1
        'End If
        ''
        'Grid1.ExportToHTML(FichierExportDoc, "UTF-8", True, True) ' export
        ''
        '' 4 - Rétablissement du mode étendu et du nombre total de lignes
        '' **************************************************************
        'Grid1.Rows = nbLignes
        'If Not (PrésenceModeEtendu) Then
        'Grid1.Cols = nbCols
        'LargeursColGrid1()
        'End If
        'Restit_ModeEntendu()

        '' Modification du HTML
        'Dim lines() As String = File.ReadAllLines(FichierExportDoc)
        'Dim writer As New StreamWriter(FichierExportDoc)
        'For Each line As String In lines
        'If line.Contains("<title>") Then
        'writer.WriteLine("<title>HyperVoicing&nbsp;Doc</title>")
        ''
        'If Trim(Form2.OTitre.Text) <> "" Then
        'writer.WriteLine(Trim(Form2.OTitre.Text)) ' titre
        'writer.WriteLine("<BR>")
        'End If
        ''
        'If Trim(Form2.OAuteur.Text) <> "" Then
        'writer.WriteLine(Form2.OAuteur.Text) ' auteur
        'writer.WriteLine("<BR>")
        'End If
        ''
        ''Maj_ParPrintExport() ' mise à jour de la date et de la signature
        ''
        'If Trim(Form2.ODate.Text) <> "" Then
        'writer.WriteLine(Form2.ODate.Text)
        'writer.WriteLine("<BR>")
        'End If
        ''
        'If Trim(Form2.OSignature.Text) <> "" Then
        'writer.WriteLine(Form2.OSignature.Text)
        'writer.WriteLine("<BR>")
        'End If
        'Else
        'writer.WriteLine(line) ' recopie des autres lignes
        'End If
        'Next
        'writer.Close()
        'Grid1.Rows = nbLignes
        'Grid1.AutoRedraw = True
        'Grid1.Refresh()
        '
        '' affichage du fichier HTML
        '' *************************
        'a = Trim("file:///" + FichierExportDoc)
        'Process.Start(a)
        'End If
        'Catch ex As Exception ' ce try catch est necessaire pour éviter ici une erreur qui survient quand on place le focus sur une cellule différente de la cellule Active (voir le setfocus dans les évènements gridx_mouseclick)
        'MessageBox.Show(ex.Message)
        'End Try
    End Sub
    Private Sub Transpo1_Click(sender As Object, e As EventArgs) Handles Transpo1.Click
        Transposer2(Transpo1.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo2_Click(sender As Object, e As EventArgs) Handles Transpo2.Click
        Transposer2(Transpo2.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo3_Click(sender As Object, e As EventArgs) Handles Transpo3.Click
        Transposer2(Transpo3.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo4_Click(sender As Object, e As EventArgs) Handles Transpo4.Click
        Transposer2(Transpo4.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo5_Click(sender As Object, e As EventArgs) Handles Transpo5.Click
        Transposer2(Transpo5.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo6_Click(sender As Object, e As EventArgs) Handles Transpo6.Click
        Transposer2(Transpo6.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
    End Sub

    Private Sub Transpo7_Click(sender As Object, e As EventArgs) Handles Transpo7.Click
        Transposer2(Transpo7.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo8_Click(sender As Object, e As EventArgs) Handles Transpo8.Click
        Transposer(Transpo8.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo9_Click(sender As Object, e As EventArgs) Handles Transpo9.Click
        Transposer2(Transpo9.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo10_Click(sender As Object, e As EventArgs) Handles Transpo10.Click
        Transposer2(Transpo10.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub

    Private Sub Transpo11_Click(sender As Object, e As EventArgs) Handles Transpo11.Click
        Transposer2(Transpo11.Text)
        '
        'Calcul_AutoVoicing()
        'Copie_THorsZones_Ds_TZones()
        Calcul_AutoVoicingZ()
        RAZ_Grid4()
    End Sub


    Private Function Det_NbLignesUtilisées() As Integer
        Det_NbLignesUtilisées = Grid1.Rows - 1
        For i = 0 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                Det_NbLignesUtilisées = i
            End If
        Next i

    End Function
    Private Sub TimerEcrGamme_Tick(sender As Object, e As EventArgs) Handles TimerEcrGamme.Tick
        'Dim Sz As Size
        'Sz.Height = 3
        'Sz.Width = 380
        'Label33.Size = Sz
        '
        ' Timer permettant d'afficher les Accords lors de l(exécution d'une chanson
        ' Son Nom TimerEcrGamme est historique : il s'agit non pas d'écrire une gamme, mais d'afficher un Accord
        '
        Label35.BackColor = Color.DarkOliveGreen
        Label35.ForeColor = Color.Yellow
        Label35.Text = "---"
        Label35.Refresh()

        TimerEcrGamme.Enabled = False

    End Sub



    Private Sub Cartozone_Paint(sender As Object, e As PaintEventArgs)
        OngletCours = 2
    End Sub

    Private Sub SiteWebToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SiteWebToolStripMenuItem.Click
        'Process.Start("https://sourceforge.net/p/hypervoicing/wiki/Home/")
        Process.Start("https://compomusic.fr")
    End Sub

    Private Sub InitClavier_MouseDown(sender As Object, e As MouseEventArgs)
        'RAZ_Clavier()
    End Sub

    Private Sub InitClavier_Click(sender As Object, e As EventArgs)
        RAZ_Clavier()
    End Sub
    Private Sub Button7_Click_2(sender As Object, e As EventArgs)

        If CheckMaj.Checked = True Or CheckMaj.Checked = True Or CheckMinM.Checked = True Or CheckMajH.Checked = True Or CheckPentaMin.Checked = True Or CheckBlues.Checked = True Then
            CheckMaj.Checked = False
            CheckMinH.Checked = False
            CheckMinM.Checked = False
            CheckMajH.Checked = False
            CheckPentaMin.Checked = False
            CheckBlues.Checked = False
        Else
            CheckMaj.Checked = True
            CheckMinH.Checked = True
            CheckMinM.Checked = True
            CheckMajH.Checked = True
            CheckPentaMin.Checked = True
            CheckBlues.Checked = True
        End If

    End Sub

    Private Sub ComboBox6_SelectedIndexChanged(sender As Object, e As EventArgs)
        If EnChargement = False Then ' And ChangementLangue = False
            'ChoixTypeAccord()
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub

    Private Sub ComboBox3_SelectedIndexChanged(sender As Object, e As EventArgs)
        ModeSimple_Cadence = "Maj" ' pour Ouvrir/Enregsitrer
        ComboBox4.Select(0, 0)
        '
        If EnChargement = True Or ChangementLangue = False Then
            Cad_OrigineAccord = Modes.Cadence_Majeure
            OrigineAccord = Modes.Cadence_Majeure
            Mode_Cadence = Cad_OrigineAccord
            '
            Cad_RAZ_CouleurMarquée()
            '
            Select Case ComboBox3.Text
                Case "Anatole"
                    Cad_AnatoleMaj()
                    Label28.Text = "Anatole"
                    '
                Case "Complète"
                    Cad_ComplèteMaj()
                    Label28.Text = "Complète"

                Case "Complete"
                    Cad_ComplèteMaj()
                    Label28.Text = "Complete"
                    '
                Case "2-5-1"
                    Cad_251Maj()
                    Label28.Text = "2-5-1"
                    '
                Case "Demi"
                    Cad_DemiMaj()
                    Label28.Text = "Demi"

                Case "Half"
                    Cad_DemiMaj()
                    Label28.Text = "Half"
                    '
                Case "Parfaite"
                    Cad_ParfaiteMaj()
                    Label28.Text = "Parfaite"

                Case "Perfect"
                    Cad_ParfaiteMaj()
                    Label28.Text = "Perfect"
                    '
                Case "Plagale"
                    Cad_PlagaleMaj()
                    Label28.Text = "Plagale"

                Case "Plagal"
                    Cad_PlagaleMaj()
                    Label28.Text = "Plagal"
                    '
                Case "Plagale2"
                    Cad_Plagale2Maj()
                    Label28.Text = "Plagale2"

                Case "Plagal2"
                    Cad_Plagale2Maj()
                    Label28.Text = "Plagal2"
                    '
                Case "Rompue"
                    Cad_RompueMaj()
                    Label28.Text = "Rompue"

                Case "Broken"
                    Cad_RompueMaj()
                    Label28.Text = "Broken"
                    '
                Case "Rompue2"
                    Cad_Rompue2Maj()
                    Label28.Text = "Rompue2"

                Case "Broken2"
                    Cad_Rompue2Maj()
                    Label28.Text = "Broken2"
                    '
                Case "Rompue3"
                    Cad_Rompue3Maj()
                    Label28.Text = "Rompue3"

                Case "Broken3"
                    Cad_Rompue3Maj()
                    Label28.Text = "Broken3"

                Case "Modale"
                    Cad_ModaleMaj()
                    Label28.Text = "Modale"

                Case "Modal"
                    Cad_ModaleMaj()
                    Label28.Text = "Modal"
                    '
                Case "Modale2"
                    Cad_Modale2Maj()
                    Label28.Text = "Modale2"

                Case "Modal2"
                    Cad_Modale2Maj()
                    Label28.Text = "Modal2"
                    '
                Case "Modale3"
                    Cad_Modale3Maj()
                    Label28.Text = "Modale3"

                Case "Modal3"
                    Cad_Modale3Maj()
                    Label28.Text = "Modal3"

                Case "Napolitaine"
                    Cad_NapolitaineMaj()
                    Label28.Text = "Napolitaine"

                Case "Napolitan"
                    Cad_NapolitaineMaj()
                    Label28.Text = "Napolitan"
                    '
            End Select
            'Mode_Cadence = "Maj"
        End If
    End Sub

    Private Sub ComboBox4_SelectedIndexChanged(sender As Object, e As EventArgs)
        ModeSimple_Cadence = "Min" ' pour Ouvrir/Enregistrer
        ComboBox3.Select(0, 0)
        '
        If EnChargement = False And ChangementLangue = False Then
            '
            'Mode_Cadence = "Min"
            '
            Cad_OrigineAccord = Modes.Cadence_Mineure
            OrigineAccord = Modes.Cadence_Mineure
            Mode_Cadence = Cad_OrigineAccord
            '
            Cad_RAZ_CouleurMarquée()
            Select Case ComboBox4.Text 'ComboBox4.Text
                Case "Anatole Min"
                    Cad_AnatoleMin()
                    Label28.Text = "Anatole Min"
                Case "Pseudo 2-5-1"
                    Cad_Pseudo251Min()
                    Label28.Text = "Pseudo 2-5-1"
                    '
                Case "Plagale", "Plagale Min"
                    Cad_PLagalMin()
                    Label28.Text = "Plagale Min"

                Case "Plagal", "Minor Plagal"
                    Cad_PLagalMin()
                    Label28.Text = "Minor Plagal"
                    '
                Case "Hispanique"
                    Cad_OrigineAccord = Modes.Cadence_Mixte
                    OrigineAccord = Modes.Cadence_Mixte
                    Mode_Cadence = Cad_OrigineAccord
                    Cad_HispaniqueMixte()
                    Label28.Text = "Hispanique"
                Case "Hispanic"
                    Cad_OrigineAccord = Modes.Cadence_Mixte
                    OrigineAccord = Modes.Cadence_Mixte
                    Mode_Cadence = Cad_OrigineAccord
                    Cad_HispaniqueMixte()
                    Label28.Text = "Hispanic"
            End Select
        End If
    End Sub

    'Private Sub Text_i_KeyPress(sender As Object, e As KeyPressEventArgs)
    '    Automate_Char(e)
    ''Calcul_AutoVoicingZ()
    'End Sub
    'Private Sub Text_i_KeyUp(sender As Object, e As KeyEventArgs)
    'If e.KeyCode = Keys.Delete Then
    '        Text_i.Text = ""
    'End If
    'End Sub
    'Private Sub Text_j_KeyUp(sender As Object, e As KeyEventArgs)
    ' If e.KeyCode = Keys.Delete Then
    '        Text_j.Text = ""
    'End If
    'End Sub
    'Private Sub Text_j_KeyPress(sender As Object, e As KeyPressEventArgs)
    '    Automate_Char(e)
    'Calcul_AutoVoicingZ()
    'End Sub

    Private Sub ComboBox1_SelectedIndexChanged_1(sender As Object, e As EventArgs) Handles ComboBox1.SelectedIndexChanged
        Dim tona As String
        Dim tonaMin As String
        Dim tbl() As String
        '
        tbl = Split(Trim(ComboBox1.Text))

        Clef = Det_Clef(Trim(tbl(0)))
        '

        If EnChargement = False Then ' And ChangementLangue = False
            ' Maj du combo de la relative mineure
            ComboBox2.SelectedIndex = ComboBox1.SelectedIndex
            ComboBox2.Refresh()
            ' Mise à jour onglet Modes (Tabage1)
            ' **********************************
            tona = Det_TonaCours2()
            tonaMin = Det_TonaMinCours3(ComboBox1.Text) '
            '
            tonaMin = TradNote_AnglMinMaj(tonaMin)
            Maj_TableGlobalAcc(Trim(tona), Trim(tonaMin)) ' TableGlobaleAcc contient tous les accords de 3, 4 et 5 notes pour la tonalité choisie
            '
            Maj_TabTons(Trim(ComboBox23.SelectedIndex)) ' maj du contenu de l'onglet TabPage1 (Modes)
            ComboBox2.Refresh()
            '
            ' Mise à jour Modulation
            ' **********************        '
            'If TGrille2 = TGrilleCours.Rien Then
            ' Maj_ModulationRadioB()
            'Maj_Modulation()
            'End If

            Refresh()
            CAD_Maj_TableGlobalAcc()
            Refresh()

            '
            RAZ_CouleurMarquée()

            Refresh()
            Entrée_Tonalité = Trim(Det_TonaCours2() + " " + "Maj")
            Refresh()
            '
            ' Mise à jours onglet Modes
            ' *************************
            Dim tbl1() As String = Trim(ComboBox1.Text).Split()
            MLabTon.Text = tbl1(0)
            a = LCase(tbl1(0))
            ' mise à jour tonalité dans  Onglet Modes
            If Trim(MLabNomG.Text) <> "" Then
                Dim tbl2() As String = MLabNomG.Text.Split()
                Dim b = tbl2(2)
                ' Détermination des accords possibles
                ' ***********************************
                Calc_AccMode(a, b)
                '
                ' Mise à jour du tableau des accords possibles
                ' ********************************************
                Maj_TabModeAcc()
            End If
        Else
            Maj_TableGlobalAcc("C", "A") ' valeurs par défaut au démarrage
            Maj_TabTons(0)
            Maj_TableCoursAccInit()
            CAD_Maj_TableCoursAccInit()


            ' Mise à jour Modulation
            ' **********************        '
            'Maj_ModulationRadioB()
            'For i = 0 To 6
            'Grid5.Cell(1, i + 1).Text = TableGlobalAcc(0, 0, i) 'tbl1(i) ' mise à jour de la gamme de C Maj dans l'onglet Modulation
            'Next i
        End If
        '
        TGrille2 = TGrilleCours.Rien ' cette instruction doit rester à la fin de cette procédure

    End Sub

    Private Sub ComboBox2_SelectedIndexChanged_1(sender As Object, e As EventArgs) Handles ComboBox2.SelectedIndexChanged
        'If EnChargement = False Then
        ComboBox1.SelectedIndex = ComboBox2.SelectedIndex
        'Else ' en chargement
        'ComboBox1.SelectedIndex = ComboBox2.SelectedIndex
        'Maj_ModulationRadioB() ' cette procédure est appelée ici car elle besoin que la liste de combobox2 soit remplie pour fonctionner
        'End If
        'End If
    End Sub

    Private Sub ComboBox23_SelectedIndexChanged_1(sender As Object, e As EventArgs) Handles ComboBox23.SelectedIndexChanged
        If EnChargement = False Then ' And ChangementLangue = False
            ChoixTypeAccord()
            ' CAD_Maj_TableGlobalAcc(Mode_Cadence)
        End If
    End Sub

    Private Sub ComboBox3_SelectedIndexChanged_1(sender As Object, e As EventArgs) Handles ComboBox3.SelectedIndexChanged
        ModeSimple_Cadence = "Maj" ' pour Ouvrir/Enregistrer
        ComboBox4.Select(0, 0)
        '
        If EnChargement = True Or ChangementLangue = False Then
            Cad_OrigineAccord = Modes.Cadence_Majeure
            OrigineAccord = Modes.Cadence_Majeure
            Mode_Cadence = Cad_OrigineAccord
            '
            Cad_RAZ_CouleurMarquée()
            '
            Select Case ComboBox3.Text
                Case "Anatole"
                    Cad_AnatoleMaj()
                    Label28.Text = "Anatole"

                Case "Forme2"
                    Cad_Forme2()
                    Label28.Text = "Forme2"

                Case "Forme3"
                    Cad_Forme3()
                    Label28.Text = "Forme3"
                    '
                Case "Complète"
                    Cad_ComplèteMaj()
                    Label28.Text = "Complète"

                Case "Complete"
                    Cad_ComplèteMaj()
                    Label28.Text = "Complete"
                    '
                Case "2-5-1"
                    Cad_251Maj()
                    Label28.Text = "2-5-1"
                    '
                Case "Demi"
                    Cad_DemiMaj()
                    Label28.Text = "Demi"

                Case "Half"
                    Cad_DemiMaj()
                    Label28.Text = "Half"
                    '
                Case "Parfaite"
                    Cad_ParfaiteMaj()
                    Label28.Text = "Parfaite"

                Case "Perfect"
                    Cad_ParfaiteMaj()
                    Label28.Text = "Perfect"
                    '
                Case "Plagale"
                    Cad_PlagaleMaj()
                    Label28.Text = "Plagale"

                Case "Plagal"
                    Cad_PlagaleMaj()
                    Label28.Text = "Plagal"
                    '
                Case "Plagale2"
                    Cad_Plagale2Maj()
                    Label28.Text = "Plagale2"

                Case "Plagal2"
                    Cad_Plagale2Maj()
                    Label28.Text = "Plagal2"
                    '
                Case "Rompue"
                    Cad_RompueMaj()
                    Label28.Text = "Rompue"

                Case "Broken"
                    Cad_RompueMaj()
                    Label28.Text = "Broken"
                    '
                Case "Rompue2"
                    Cad_Rompue2Maj()
                    Label28.Text = "Rompue2"

                Case "Broken2"
                    Cad_Rompue2Maj()
                    Label28.Text = "Broken2"
                    '
                Case "Rompue3"
                    Cad_Rompue3Maj()
                    Label28.Text = "Rompue3"

                Case "Broken3"
                    Cad_Rompue3Maj()
                    Label28.Text = "Broken3"

                Case "Modale"
                    Cad_ModaleMaj()
                    Label28.Text = "Modale"

                Case "Modal"
                    Cad_ModaleMaj()
                    Label28.Text = "Modal"
                    '
                Case "Modale2"
                    Cad_Modale2Maj()
                    Label28.Text = "Modale2"

                Case "Modal2"
                    Cad_Modale2Maj()
                    Label28.Text = "Modal2"
                    '
                Case "Modale3"
                    Cad_Modale3Maj()
                    Label28.Text = "Modale3"

                Case "Modal3"
                    Cad_Modale3Maj()
                    Label28.Text = "Modal3"

                Case "Napolitaine"
                    Cad_NapolitaineMaj()
                    Label28.Text = "Napolitaine"

                Case "Napolitan"
                    Cad_NapolitaineMaj()
                    Label28.Text = "Napolitan"
                    '
            End Select
            'Mode_Cadence = "Maj"
        End If
    End Sub

    Private Sub ComboBox4_SelectedIndexChanged_1(sender As Object, e As EventArgs) Handles ComboBox4.SelectedIndexChanged
        ModeSimple_Cadence = "Min" ' pour Ouvrir/Enregistrer
        ComboBox3.Select(0, 0)
        '
        If EnChargement = False And ChangementLangue = False Then
            '
            'Mode_Cadence = "Min"
            '

            Cad_OrigineAccord = Modes.Cadence_Mineure
            OrigineAccord = Modes.Cadence_Mineure
            Mode_Cadence = Cad_OrigineAccord
            '
            Cad_RAZ_CouleurMarquée()
            Select Case ComboBox4.Text 'ComboBox4.Text
                Case "Anatole Min"
                    Cad_AnatoleMin()
                    Label28.Text = "Anatole Min"


                Case "Pseudo 2-5-1"
                    Cad_Pseudo251Min()
                    Label28.Text = "Pseudo 2-5-1"
                    '
                Case "Plagale", "Plagale Min"
                    Cad_PLagalMin()
                    Label28.Text = "Plagale Min"

                Case "Plagal", "Minor Plagal"
                    Cad_PLagalMin()
                    Label28.Text = "Minor Plagal"
                    '
                Case "Hispanique"
                    Cad_OrigineAccord = Modes.Cadence_Mixte
                    OrigineAccord = Modes.Cadence_Mixte
                    Mode_Cadence = Cad_OrigineAccord
                    Cad_HispaniqueMixte()
                    Label28.Text = "Hispanique"

                Case "Hispanic"
                    Cad_OrigineAccord = Modes.Cadence_Mixte
                    OrigineAccord = Modes.Cadence_Mixte
                    Mode_Cadence = Cad_OrigineAccord
                    Cad_HispaniqueMixte()
                    Label28.Text = "Hispanic"
            End Select
        End If
    End Sub

    Private Sub ComboBox6_SelectedIndexChanged_1(sender As Object, e As EventArgs) Handles ComboBox6.SelectedIndexChanged
        If EnChargement = False Then ' And ChangementLangue = False
            'ChoixTypeAccord()
            CAD_Maj_TableGlobalAcc()
        End If
    End Sub
    Private Sub Tempo_ValueChanged(sender As Object, e As EventArgs) Handles Tempo.ValueChanged

    End Sub
    Private Sub StopMidi_Click(sender As Object, e As EventArgs) Handles StopMidi.Click
        StopPlay()
    End Sub
    Private Sub PlayMidi_Click(sender As Object, e As EventArgs) Handles PlayMidi.Click
        Me.Terme.BackColor = Color.White
        TermeFin = Me.Terme.Value
        i = Me.Det_DerEventH2()
        If Me.Début.Value <= i Then
            If i < Me.Terme.Value Then
                TermeFin = i
                Me.Terme.BackColor = Color.Orange
            End If
        End If
        Calcul_AutoVoicingZ()
        INIT_LesPistes()
        CalculMusique(False)
        '
        PlayArp()
        'PlayAccords()
    End Sub

    Sub StopPlay()
        If ComboMidiOut.Items.Count > 0 Then '
            FIN()
            Me.Enabled = True
        End If
    End Sub
    Private Sub Grid2_DragDrop(sender As Object, e As DragEventArgs) Handles Grid2.DragDrop

        Colonne_Drag = Grid2.MouseCol
        Ligne_Drag = Grid2.MouseRow
        Valeur_Drag = e.Data.GetData(DataFormats.Text)
        Flag_EcrDragDrop = True
        GridDest = TGridDest.Grid2

    End Sub


    Sub Maj_Extension()
        Select Case Etat_Extension
            Case Ty_Extension.Accords
                Maj_Extension_Accord()
            Case Ty_Extension.Gammes
                Maj_Extension_Gamme()
            Case Ty_Extension.Modes
                Maj_Extension_Mode()
            Case Ty_Extension.Tonalités
                Maj_Extension_Tonalité()
        End Select
    End Sub
    Private Sub Grid3_DragDrop(sender As Object, e As DragEventArgs) Handles Grid3.DragDrop

        Colonne_Drag = Grid3.MouseCol
        Ligne_Drag = Grid3.MouseRow
        Valeur_Drag = e.Data.GetData(DataFormats.Text)
        Flag_EcrDragDrop = True
        GridDest = TGridDest.Grid3

    End Sub

    Private Sub Grid2_DragEnter(sender As Object, e As DragEventArgs) Handles Grid2.DragEnter
        If (e.Data.GetDataPresent(DataFormats.Text)) Then
            e.Effect = DragDropEffects.Copy
        Else
            e.Effect = DragDropEffects.None
        End If
    End Sub

    Private Sub Grid3_DragEnter(sender As Object, e As DragEventArgs) Handles Grid3.DragEnter
        If (e.Data.GetDataPresent(DataFormats.Text)) Then
            e.Effect = DragDropEffects.Copy
        Else
            e.Effect = DragDropEffects.None
        End If
    End Sub
    Sub PositionnerCurseursRougeBleu(Ligne As Integer)
        Dim LigneVisible As Integer
        Dim H As Integer
        '
        Dim p1 As New Point(1, 100)
        Dim p2 As New Point(1, 100)
        '
        '
        If EnChargement = False Then 'And Not (My.Computer.Keyboard.CtrlKeyDown) And Not (My.Computer.Keyboard.AltKeyDown) Then
            If AccordAEtéJoué1 = "Non" Then
                ' **************************
                ' Barre rouge / Barre Bleu *
                ' **************************
                '
                Ligne = Ligne + 1
                LigneVisible = Grid1.TopRow - 1
                H = Grid1.Row(Ligne).Height
                p1.Y = ((Ligne * H) - (H * (1 + LigneVisible))) ' 
                If p1.Y <= 0 Then
                    p1.Y = H '
                End If
                Label32.Location = p1
                '
                p2.Y = p1.Y + Grid1.Row(Ligne).Height
                Label33.Location = p2
                '
            End If
        End If
    End Sub
    Private Sub Grid1_MouseDown(Sender As Object, e As MouseEventArgs) Handles Grid1.MouseDown
        Dim i, j, k, m, t, ct, co, ro As Integer
        Dim tbl() As String
        Dim a, b As String
        Dim Sauvclef As String



        '                                                                                                                                       
        ' Jouer les EventH cliqués dans Grid1
        ' ***********************************
        Grid1.Focus()
        Grid1.Refresh()
        i = Grid1.MouseRow
        j = Grid1.MouseCol
        ro = i
        co = j
        '
        ' Mise a jour du tableau des modes Tabtons sur un clic dans Grid2 àtravers combobox1 et combobox2
        ' ************************************************************************************************
        a = Trim(Grid1.Cell(Grid1.ActiveCell.Row, 3).Text)
        If a <> "" Then
            tbl = a.Split
            If tbl(1) = "Maj" Then
                a = " " + tbl(0) + " Major"
                ii = ComboBox1.Items.IndexOf(a)
                ComboBox1.SelectedIndex = ii
            Else
                a = " " + tbl(0) + " Minor"
                ii = ComboBox2.Items.IndexOf(a)
                ComboBox1.SelectedIndex = ii
            End If
        End If


        If i > 0 And j >= 0 Then
            ' Selection de la colonne de 'Vue Notes'(Grid6) et de la piste accord (Grid2) correspondant à la ligne de Grid1
            ' *************************************************************************************************************
            a = Grid1.Cell(i, 1).Text
            If Trim(a) <> "" Then
                Grid6.Range(0, i, Grid6.Rows - 1, i).SelectCells()
                '
                a = Grid1.Cell(i, 1).Text
                tbl = Split(Trim(a), ".")
                k = Val(tbl(0))
                Grid2.LeftCol = k ' positionnement de grid2 
                'Grid2.Range(0, k, Grid2.Rows - 1, k).SelectCells()
                Grid3.LeftCol = ((Grid2.LeftCol - 1) * nbColonnesGrid3ParMesure) + 1 ' positionnement de grid3 en fonction de Grid2
            End If
            '
            If Trim(Grid1.Cell(i, j).Text) <> "" And e.Button = Windows.Forms.MouseButtons.Left Then ' j = 4 And 
                Select Case j
                    Case 3 ' tonalité
                        Sauvclef = Clef
                        Maj_TabNotes("#")
                        Aff_Gamme(Trim(Grid1.Cell(i, 3).Text), "") ' afficher tonalité
                        Clef = Sauvclef
                    Case 4 ' accord
                        Sauvclef = Clef
                        Maj_TabNotes("#")
                        Aff_Accord(Trim(Grid1.Cell(i, 4).Text)) ' afficher accord
                        Clef = Sauvclef
                    Case 5 'gamme
                        Sauvclef = Clef
                        Maj_TabNotes("#")
                        Aff_Gamme(Trim(Grid1.Cell(i, 5).Text), "") ' afficher gamme
                        Clef = Sauvclef
                    Case 10 ' infos extension
                        Select Case Grid1.Cell(i, 10).BackColor
                            Case Couleur_ButtTonalités
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                Aff_Gamme(Trim(Grid1.Cell(i, 3).Text), "") ' afficher gamme
                                Clef = Sauvclef
                            Case Couleur_ButtAccords
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                Aff_Accord(Trim(Grid1.Cell(i, 4).Text)) ' afficher accord
                                Clef = Sauvclef
                            Case Couleur_ButtGammes
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                Aff_Gamme(Trim(Grid1.Cell(i, 5).Text), "") ' afficher gamme
                                Clef = Sauvclef
                            Case Couleur_ButtModes
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                a = Trad_BemDies(Trim(Grid1.Cell(i, 10).Text))
                                tbl = a.Split()
                                Aff_Gamme(Trim(Grid1.Cell(i, 3).Text), Trim(LCase(tbl(0)))) ' afficher tonalité
                                Clef = Sauvclef

                            Case Couleur_ButtAccords, Couleur_ButtGammes
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                'Aff_Gamme(Trim(Grid1.Cell(i, 5).Text), "") ' afficher gamme
                                Clef = Sauvclef
                        End Select

                    Case Else

                End Select
                'Else
                'RAZ_Clavier()
            End If

            ' Jouer "Accord"
            ' **************
            If My.Computer.Keyboard.CtrlKeyDown Then
                If ComboMidiOut.Items.Count > 0 Then
                    ' Jouer Accord
                    ' ************
                    If j = 4 And e.Button() = Windows.Forms.MouseButtons.Left Then 'jouer accord
                        If EnChargement = False Then        ' jouer "Accord"
                            If AccordAEtéJoué = False Then
                                a = Grid1.Cell(i, 1).Text
                                tbl = Split(Trim(a), ".")
                                m = Val(tbl(0))
                                t = Val(tbl(1))
                                ct = Val(tbl(2))
                                b = TableEventH(m, t, ct).Tonalité
                                tbl = Split(b)
                                Clef = Det_Clef(tbl(0))
                                '
                                JouerAccord123(Trim(a))
                            End If
                        End If
                        '
                    End If
                    ' jouer "Gamme" 
                    ' ************
                    If j = 5 Then
                        If GammeAEtéJouée = False Then
                            If e.Button() = Windows.Forms.MouseButtons.Left Then
                                SENSGamme = "Monter"
                            Else
                                SENSGamme = "Descendre"
                            End If
                            'Création_Schedule2(CréationFichierScheduleGamme("FichierGamme", Trim(Grid1.Cell(i, 3).Text), "", i))
                            GammeAEtéJouée = True
                            JouerGamme(Trim(Grid1.Cell(i, 5).Text), i)
                        End If
                    End If
                    ' jouer "Tonalité"
                    ' ***************
                    If j = 3 Then
                        If GammeAEtéJouée = False Then
                            If e.Button() = Windows.Forms.MouseButtons.Left Then
                                SENSGamme = "Monter"
                            Else
                                SENSGamme = "Descendre"
                            End If
                            'Création_Schedule2(CréationFichierScheduleGamme("FichierGamme", Trim(Grid1.Cell(i, 3).Text), "", i))
                            GammeAEtéJouée = True
                            JouerGamme(Trim(Grid1.Cell(i, 3).Text), i)
                        End If
                    End If
                    ' jouer Détails
                    ' *************
                    If j = 10 And Trim(Grid1.Cell(i, 10).Text) <> "" Then
                        If GammeAEtéJouée = False Then
                            If e.Button() = Windows.Forms.MouseButtons.Left Then
                                SENSGamme = "Monter"
                            Else
                                SENSGamme = "Descendre"
                            End If
                            GammeAEtéJouée = True
                            JouerDétails(i)
                        End If
                    End If
                    If j >= 11 And j <= nbColonnesGrid1 - 2 And Trim(Grid1.Cell(i, 10).Text) <> "" Then ' Détails
                        If My.Computer.Keyboard.CtrlKeyDown And Grid1.MouseCol > 1 And GammeAEtéJouée = False Then
                            JouerNoteDétails(Grid1.MouseRow, Grid1.MouseCol)
                        End If
                    End If
                End If
            End If
            '
            ' Affichage notes accords sur clavier sans jouer l'accord
            ' *******************************************************
            If e.Button() = MouseButtons.Middle And Not (My.Computer.Keyboard.CtrlKeyDown) And Not (My.Computer.Keyboard.AltKeyDown) _
                                        And Not (My.Computer.Keyboard.ShiftKeyDown) Then
                If Trim(Grid1.Cell(i, 4).Text) <> "" And Grid1.MouseCol = 4 Then
                    AfficherAccordRapport(Trim(Grid1.Cell(i, 1).Text))
                End If
            End If
            '
            ' Positionner les curseurs Rouge/Bleu
            ' ***********************************
            'Grid1.Cell(Grid1.ActiveCell.Row, 0).EnsureVisible() ' doit être placé avant
            PositionnerCurseursRougeBleu(i) ' i=Grid1.mouserow
            ' Positionnement du scrolling de l'ascenceur vertical de Grid4
            ' ************************************************************
            Grid4.TopRow = 1
            Grid4.Cell(1, 1).SetFocus() ' sélectionner la ligne TopRow=1
            ' 
            ' Zone d'extension
            ' ****************
            Select Case j
                Case 3
                    Maj_Extension_Tonalité()
                Case 4
                    Maj_Extension_Accord()
                Case 5
                    Maj_Extension_Gamme()
            End Select
        End If
        '
        ' Mise à jour de la tonalités de départ de l'onglet de Modulation
        ' **************************************************************
        ro = Grid1.MouseRow
        If ro >= 1 Then Maj_ModulationRadioB2(ro)

        '
    End Sub
    Sub Aff_Clavier()
        Dim i, j As Integer
        '
        i = Grid1.ActiveCell.Row
        j = Grid1.ActiveCell.Col

        If i > 0 Then
            If Trim(Grid1.Cell(i, j).Text) <> "" Then ' j = 4 And 
                Select Case j
                    Case 3 ' tonalité
                        Sauvclef = Clef
                        Maj_TabNotes("#")
                        Aff_Gamme(Trim(Grid1.Cell(i, 3).Text), "") ' afficher tonalité
                        Clef = Sauvclef
                    Case 4 ' accord
                        Sauvclef = Clef
                        Maj_TabNotes("#")
                        Aff_Accord(Trim(Grid1.Cell(i, 4).Text)) ' afficher accord
                        Clef = Sauvclef
                    Case 5 'gamme
                        Sauvclef = Clef
                        Maj_TabNotes("#")
                        Aff_Gamme(Trim(Grid1.Cell(i, 5).Text), "") ' afficher gamme
                        Clef = Sauvclef
                    Case 10 ' infos extension
                        Select Case Grid1.Cell(i, 10).BackColor
                            Case Couleur_ButtTonalités
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                Aff_Gamme(Trim(Grid1.Cell(i, 3).Text), "") ' afficher gamme
                                Clef = Sauvclef
                            Case Couleur_ButtAccords
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                Aff_Accord(Trim(Grid1.Cell(i, 4).Text)) ' afficher accord
                                Clef = Sauvclef
                            Case Couleur_ButtGammes
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                Aff_Gamme(Trim(Grid1.Cell(i, 5).Text), "") ' afficher gamme
                                Clef = Sauvclef
                            Case Couleur_ButtModes
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                a = Trad_BemDies(Trim(Grid1.Cell(i, 10).Text))
                                tbl = a.Split()
                                Aff_Gamme(Trim(Grid1.Cell(i, 3).Text), Trim(LCase(tbl(0)))) ' afficher tonalité
                                Clef = Sauvclef

                            Case Couleur_ButtAccords, Couleur_ButtGammes
                                Sauvclef = Clef
                                Maj_TabNotes("#")
                                'Aff_Gamme(Trim(Grid1.Cell(i, 5).Text), "") ' afficher gamme
                                Clef = Sauvclef
                        End Select

                    Case Else

                End Select
            End If
        End If
    End Sub
    Private Function ListeDétails(Ligne As Integer) As String
        Dim tbl() As String
        Dim i As Integer
        Dim a, c As String
        Dim DepassOct, indexC As Integer
        Dim Clef As String

        ' Détermination de la Clef (b ou #) de la tonalité de l'accord
        ' ************************************************************
        tbl = Split(Trim(Grid1.Cell(Ligne, 3).Text)) 'lecture de la tonalité

        Clef = Det_ClefEn2(tbl(0), tbl(1))



        a = ""
        For i = 11 To nbColonnesGrid1 - 2
            b = Trim(Grid1.Cell(Ligne, i).Text)
            a = a + b + " "
        Next i
        a = Trad_ListeNotesEnD(Trim(a), " ") ' traduction en # si nécessaire
        tbl = Split(Trim(a), "-")
        '
        ' Placer les octaves
        ' ******************
        Maj_TabNotes("#")
        DepassOct = 11
        indexC = 0
        c = "3"
        For i = 0 To UBound(tbl)
            indexC = DetectOct(tbl(i), indexC)
            If indexC > DepassOct Then
                c = Str(Val(c) + 1)
                DepassOct = 23
            End If
            If Val(c) < 8 Then ' pour ne pas dépasser le nombre de notes max de 127 : en fait l'octave 8 ne devrait jamais être utilisée
                tbl(i) = Trim(tbl(i) + Trim(c))
            End If
        Next
        a = ""
        If SENSGamme = "Monter" Then
            For i = 0 To UBound(tbl)
                n = ListNotesd.IndexOf(Trim(tbl(i))) '
                a = Trim(a + Str(n) + " ")
            Next i
        Else
            For i = UBound(tbl) To 0 Step -1
                n = ListNotesd.IndexOf(Trim(tbl(i))) '
                a = Trim(a + Str(n) + " ")
            Next i
        End If
        ' Rajout de la tonique à l'octave en tant que dernière note
        ' *********************************************************
        tbl = a.Split()
        i = Convert.ToInt16(tbl(0)) + 12
        If i <= 127 Then
            b = i.ToString
            a = a + " " + Trim(b)
        End If
        ' Retour de la fonction
        ' ********************
        ListeDétails = Trim(a)
    End Function
    Private Function ListeRechercheG4(Ligne As Integer) As String
        Dim tbl() As String
        Dim i As Integer
        Dim a, c As String
        Dim DepassOct, indexC As Integer
        Dim Clef As String

        ' Traduction des notes en notation anglo-saxonne et Clef= #
        ' ********************************************************
        Maj_TabNotes("#")
        a = ""
        Clef = Det_ClefDsGrid4(Ligne) '
        For i = 2 To Grid4.Cols - 1
            b = Trim(Grid4.Cell(Ligne, i).Text)

            a = a + b + " "
        Next i
        a = Trad_ListeNotesEnD(Trim(a), " ") ' traduction en # si nécessire
        tbl = Split(Trim(a), "-")
        '
        ' Placer les octaves
        ' ******************
        DepassOct = 11
        indexC = 0
        c = "3"
        For i = 0 To UBound(tbl)
            indexC = DetectOct(tbl(i), indexC)
            If indexC > DepassOct Then
                c = Str(Val(c) + 1)
                DepassOct = 23
            End If
            If Val(c) < 8 Then ' pour ne pas dépaser le nombre de notes max de 127 : en fait l'octave 8 ne devrait jamais être utilisée
                tbl(i) = Trim(tbl(i) + Trim(c))
            End If
        Next
        a = ""
        If SENSGamme = "Monter" Then
            For i = 0 To UBound(tbl)
                n = ListNotesd.IndexOf(Trim(tbl(i))) '
                a = Trim(a + Str(n) + " ")
            Next i
        Else
            For i = UBound(tbl) To 0 Step -1
                n = ListNotesd.IndexOf(Trim(tbl(i))) '
                a = Trim(a + Str(n) + " ")
            Next i
        End If
        ListeRechercheG4 = Trim(a)
    End Function
    Private Function NoteRechercheG4(Ligne As Integer, Colonne As Integer) As String
        Dim tbl() As String
        Dim i As Integer
        Dim a, c As String
        Dim DepassOct, indexC As Integer
        Dim Clef As String

        ' Détermination de la Clef (b ou #) : ici, la tonalité est basée sur la tonique de la gamme jouée
        ' ***********************************************************************************************
        Maj_TabNotes("#") ' on traite toujours en #
        '
        a = ""
        Clef = Det_ClefDsGrid4(Ligne) ' si clef = b alors traduire en #
        For i = 2 To Grid4.Cols - 1
            b = Trim(Grid4.Cell(Ligne, i).Text)
            a = a + b + " "
        Next i
        a = Trad_ListeNotesEnD(Trim(a), " ") ' traduction systématique en #
        tbl = Split(Trim(a), "-")
        '
        ' Placer les octaves
        ' ******************
        DepassOct = 11
        indexC = 0
        c = "3"
        For i = 0 To UBound(tbl)
            indexC = DetectOct(tbl(i), indexC)
            If indexC > DepassOct Then
                c = Str(Val(c) + 1)
                DepassOct = 23
            End If
            If Val(c) < 8 Then ' pour ne pas dépaser le nombre de notes max de 127 : en fait l'octave 8 ne devrait jamais être utilisée
                tbl(i) = Trim(tbl(i) + Trim(c))
            End If
        Next
        a = ""
        For i = 0 To UBound(tbl)
            n = ListNotesd.IndexOf(Trim(tbl(i))) '
            a = Trim(a + Str(n) + " ")
        Next i
        tbl = Split(a)
        NoteRechercheG4 = Trim(tbl(Colonne - 2))
    End Function
    Private Function NoteRechercheDétails(Ligne As Integer, Colonne As Integer) As String
        Dim tbl() As String
        Dim i As Integer
        Dim a, c As String
        Dim DepassOct, indexC As Integer
        Dim Clef As String

        ' Détermination de la Clef (b ou #) : ici, la tonalité est basée sur la tonique de la gamme jouée
        ' ***********************************************************************************************
        Maj_TabNotes("#") ' on traite toujours en #
        '
        a = ""
        Clef = Det_ClefDsDétails(Ligne) ' si clef = b alors traduire en #
        For i = 11 To nbColonnesGrid1 - 2
            b = Trim(Grid1.Cell(Ligne, i).Text)

            a = a + b + " "
        Next i
        a = Trad_ListeNotesEnD(Trim(a), " ") ' traduction systématique en #
        tbl = Split(Trim(a), "-")
        '
        ' Placer les octaves
        ' ******************
        DepassOct = 11
        indexC = 0
        c = "3"
        For i = 0 To UBound(tbl)
            indexC = DetectOct(tbl(i), indexC)
            If indexC > DepassOct Then
                c = Str(Val(c) + 1)
                DepassOct = 23
            End If
            If Val(c) < 8 Then ' pour ne pas dépaser le nombre de notes max de 127 : en fait l'octave 8 ne devrait jamais être utilisée
                tbl(i) = Trim(tbl(i) + Trim(c))
            End If
        Next
        a = ""
        For i = 0 To UBound(tbl)
            n = ListNotesd.IndexOf(Trim(tbl(i))) '
            a = Trim(a + Str(n) + " ")
        Next i
        tbl = Split(a)
        NoteRechercheDétails = Trim(tbl(Colonne - 11))
    End Function
    Private Function Det_ClefDsGrid4(ligne) As String
        Dim i As Integer

        Det_ClefDsGrid4 = "#"
        For i = 2 To Grid4.Cols - 1
            a = Trim(Grid4.Cell(ligne, i).Text)
            If Microsoft.VisualBasic.Right(a, 1) = "b" And Len(a) > 1 Then
                Det_ClefDsGrid4 = "b"
                Exit For
            End If
        Next i

    End Function
    Private Function Det_ClefDsDétails(ligne) As String
        Dim i As Integer

        Det_ClefDsDétails = "#"
        For i = 9 To nbColonnesGrid1 - 2
            a = Trim(Grid1.Cell(ligne, i).Text)
            If Microsoft.VisualBasic.Right(a, 1) = "b" And Len(a) > 1 Then
                Det_ClefDsDétails = "b"
                Exit For
            End If
        Next i

    End Function
    Private Sub Grid1_MouseUp(Sender As Object, e As MouseEventArgs) Handles Grid1.MouseUp
        Dim i As Integer
        Dim j As Integer
        '
        Dim p1 As New Point(1, 100)
        Dim p2 As New Point(1, 100)
        '
        '
        Dim a, b As String
        Dim Lgam, Lacc, g As String
        Dim LNotesGam As New List(Of String)
        '
        Dim ligne As Integer
        Dim colonne As Integer
        '

        Dim SigneClef As String
        Dim SauvClef As String
        Dim TabPourMode(0 To 35) As String
        '
        Dim tbl() As String
        Dim tbl2() As String
        i = ZoneCourante
        SauvClef = Clef

        Maj_TabNotes("#") ' tous les calculs se font ici en #

        ' Couper Jouer Accord (hors extension)
        ' *******************
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
        '
        ' Mise a jour Onglet TON sur un clic dans Grid2 à travers combobox1 et combobox2
        ' ******************************************************************************
        a = Trim(Grid1.Cell(Grid1.ActiveCell.Row, 3).Text) ' leture TONALITE
        If Trim(a) <> "" Then
            tbl = a.Split
            If tbl(1) = "Maj" Then
                a = " " + tbl(0) + " Major"
                ii = ComboBox1.Items.IndexOf(a)
                ComboBox1.SelectedIndex = ii
            Else
                a = " " + tbl(0) + " Minor"
                ii = ComboBox2.Items.IndexOf(a)
                ComboBox1.SelectedIndex = ii
            End If
        End If
        '
        ' Mise a jour Onglet MODES sur un clic dans Grid2 à travers combobox1 et combobox2
        ' ********************************************************************************
        Maj_MODES(Grid1.ActiveCell.Row)
        '
        ' Effacer accord extension (Notes en jaunes sur piano) (suite à jouerdétails)
        ' ***************************************************************************
        If AccordAEtéJoué_Ext = True Then

            For i = 0 To UBound(AccordJouerPiano.Notes)
                If AccordJouerPiano.Notes(i) <> -1 Then
                    j = AccordJouerPiano.Notes(i)
                    LabelPiano.Item(j).BackColor = AccordJouerPiano.OldBackColor(i)
                    LabelPiano.Item(j).Text = ""
                End If
            Next i
            AccordAEtéJoué_Ext = False
        Else
            If NotesAff <> Nothing Then
                tbl2 = NotesAff.Split
                For i = 0 To UBound(AccordJouerPiano.Notes)
                    If AccordJouerPiano.Notes(i) <> -1 Then
                        j = AccordJouerPiano.Notes(i)
                        LabelPiano.Item(j).Text = tbl2(i)
                        If InStr(tbl2(i), "#") = 0 Then
                            LabelPiano.Item(j).ForeColor = Color.Black
                        Else
                            LabelPiano.Item(j).ForeColor = Color.White
                        End If
                    End If
                Next
            End If

        End If
        '
        ' RAZ
        ' ***
        NotesAff = Nothing
        '
        Aff_Clavier()
        '
        ' détail des eventh dans grid1
        ' ****************************
        ligne = Grid1.ActiveCell.Row
        '
        If Trim(Grid1.Cell(ligne, 3).Text) <> "" Then ' si la ligne n'est pas vide
            tbl = Split(Grid1.Cell(ligne, 3).Text) ' on va chercher le signe de clef dans la tonalité

            SigneClef = Trim(Det_ClefEn2(tbl(0), tbl(1)))

            '

        End If
        ' ******************************
        ' * Positionnement des grilles *
        ' ******************************
        '
        If e.Button() = MouseButtons.Left Then 'And Not (My.Computer.Keyboard.CtrlKeyDown) And Not (My.Computer.Keyboard.AltKeyDown) Then

            ligne = Grid1.ActiveCell.Row
            colonne = Grid1.ActiveCell.Col
            '
            '
            j = Grid1.ActiveCell.Row ' Grid1.MouseRow
            SélectionLignes = (Grid1.Selection.LastRow - Grid1.Selection.FirstRow) + 1
            'i = Det_LimiteSélection(SélectionLignes, j)
            Maj_ListeLignes(j, SélectionLignes) ' pour le système écoute rapide

            DerGridCliquée = GridCours.Grid1
            '
            ' ************************************
            '  Détermination des gammes communes *
            ' ************************************
            '
            RAZ_Grid4()
            a = Grid1.Cell(Grid1.ActiveCell.Row, 1).Text ' lecture du N° de mesure - pas d'eventh si ""
            ' Détermination de la liste d'accords
            b = Trim(AccordsSélection2(Grid1.Selection.FirstRow, Grid1.Selection.LastRow)) ' AccordSélection2 est une fonction retournant la liste des accords dont on doit trouver les gammes jouables
            tbl = b.Split(";")
            For i = 0 To tbl.Count - 1
                tbl(i) = TradD(tbl(i))
            Next
            Lacc = Join(tbl, "-")

            If Trim(a) <> "" Then
                EnrechercheGammes = True ' indicateur destiné à la fonction NoteInterval utilisé ensuite
                '
                ' recherche de gammes avec RechercheG_V2
                ' **************************************
                Dim oo2 As New RechercheG_v2

                Lgam = "Maj" + " " + "MinH" + " " + "MinM" + " " + "MajH" + " " + "PentaMin" + " " + "Blues" + " " + "Blues2" _
                    + " " + "Hongrois1" + " " + "Hongrois2" + " " + "Oriental" + " " + "Arabe" + " " + "Balkanique" + " " + "Bertha" _
                    + " " + "Andalou" + " " + "Tzigane"


                Lacc = TradDLacc(Lacc) ' traduction en # de toutes les notes des accords
                g = oo2.ApparteanceG(Trim(Lacc), Trim(Lgam)) ' séparateur de Accords = "-"

                tbl = g.Split("-") ' Nom des gammes trouvées

                LNotesGam.Clear()

                Grid4.AutoRedraw = False
                '
                i = 1
                If Trim(tbl(0)) <> "" Then ' cas où aucune gamme trouvée
                    For Each gamme As String In tbl
                        LNotesGam.Add(Trim(gamme) + "-" + oo2.Det_NotesGammes3(Trim(gamme)))
                        Grid4.Cell(i, 1).Text = Trim(gamme)
                        tbl1 = oo2.Det_NotesGammes3(Trim(gamme)).Split("-")

                        For j = 2 To (UBound(tbl1)) + 2
                            Grid4.Cell(i, j).Text = Trim(tbl1(j - 2))
                        Next
                        i = i + 1
                    Next
                End If

                Grid4.Refresh()
                Grid4.AutoRedraw = True
                '
                EnrechercheGammes = False

            End If
        End If
        Maj_TabNotes(Clef) ' on rétablit la valeur initial de TabNotes
        '
        RAZ_AffNoteAcc() ' raz affichage des notes de l'accord sans jouer l'accord (bouton souris = médian)
        SauvClef = Clef
        '

        Grid1.Cell(Grid1.ActiveCell.Row, 0).EnsureVisible() ' doit être placé avant
        ' désactivation de la sélection pour cas particulier : marqueur, vélocité et racine
        If Grid1.ActiveCell.Col <> 2 And Grid1.ActiveCell.Col <> 7 And Grid1.ActiveCell.Col <> 8 Then ' col=2 correspond aux marqueurs, colonnes 7 et 8 correspondent aux vélocités et aux racines
            Grid1.Range(Grid1.Selection.FirstRow, 0, Grid1.Selection.LastRow, Grid1.Cols - 1).SelectCells()
            Grid1.Refresh()
        End If
        ' Donner le focus à écriture de marqueurs si nécessaire
        ' *****************************************************
        TMarqueur.Focus()
    End Sub
    Sub Maj_MODES(ligne As Integer)
        Dim a, b As String
        Dim i As Integer
        Dim tbl() As String

        b = Trim(Grid1.Cell(ligne, 5).Text) ' leture MODE

        If Trim(b) <> "" Then
            tbl = b.Split()
            a = Trim(LCase(tbl(0)))
            b = Trim(tbl(1))
            i = MComboModes.Items.IndexOf(Trim(b))
            If i <> -1 Then
                MComboModes.SelectedIndex = i
            Else
                i = MComboMHarm.Items.IndexOf(Trim(b))
                If i <> -1 Then
                    MComboMHarm.SelectedIndex = i
                Else
                    i = MComboMMel.Items.IndexOf(Trim(b))
                    If i <> -1 Then
                        MComboMMel.SelectedIndex = i
                    Else
                        i = MComboMSynth.Items.IndexOf(Trim(b))
                        If i <> -1 Then
                            MComboMSynth.SelectedIndex = i
                        End If
                    End If
                End If
            End If
            If i <> -1 Then
                ' Détermination des accords possibles
                ' ***********************************
                Calc_AccMode(a, b)
                '
                ' Mise à jour du tableau des accords possibles
                ' ********************************************
                Maj_TabModeAcc()
            Else ' raz du tableau des modes
                MLabNomG.Text = ""
                MGrid1.Range(1, 1, MGrid1.Rows - 1, MGrid1.Cols - 1).ClearText()
            End If
        End If
    End Sub


    Function TradDLacc(Lacc As String) As String
        Dim tbl1() As String = Lacc.Split("-")
        Dim a As String = ""
        Dim b As String = ""

        For Each acc In tbl1
            b = TradAcc_BemEnDiese(acc)
            a = Trim(a + b + "-")
        Next
        a = Microsoft.VisualBasic.Left(a, a.Length - 1)
        Return a
    End Function


    Private Sub Maj_Détails(ligne As Integer, Détails As String)
        Dim tbl() As String

        tbl = Split(Grid1.Cell(ligne, 1).Text, ".")
        TableEventH(Val(tbl(0)), Val(tbl(1)), Val(tbl(2))).Détails = Trim(Détails)
    End Sub
    Private Sub RAZ_Détails(ligne As Integer)
        Dim tbl() As String

        If Trim(Grid1.Cell(ligne, 1).Text) <> "" Then
            tbl = Split(Grid1.Cell(ligne, 1).Text, ".")
            TableEventH(Val(tbl(0)), Val(tbl(1)), Val(tbl(2))).Détails = ""
            '
            'For i = 8 To 15
            'Grid1.Cell(ligne, j).Text = ""
            'Next
        End If
    End Sub
    Function Det_CouleurGamme(Gam As String) As Color
        Dim a As String
        Dim tbl() As String


        tbl = Split(Gam)
        a = Trim(tbl(1))
        Select Case a
            Case "Maj"
                Det_CouleurGamme = CheckMaj.ForeColor
            Case "MinH"
                Det_CouleurGamme = CheckMinH.ForeColor
            Case "MinM"
                Det_CouleurGamme = CheckMinM.ForeColor
            Case "MajH"
                Det_CouleurGamme = CheckMajH.ForeColor
            Case "PMin"
                Det_CouleurGamme = CheckPentaMin.ForeColor
            Case "Blues"
                Det_CouleurGamme = CheckBlues.ForeColor
        End Select

    End Function


    Function TradDegré_ChiffreLettre(Chiffre As Integer) As String
        TradDegré_ChiffreLettre = ""
        Select Case Chiffre
            Case 0
                TradDegré_ChiffreLettre = "I"
            Case 1
                TradDegré_ChiffreLettre = "II"
            Case 2
                TradDegré_ChiffreLettre = "III"
            Case 3
                TradDegré_ChiffreLettre = "IV"
            Case 4
                TradDegré_ChiffreLettre = "V"
            Case 5
                TradDegré_ChiffreLettre = "VI"
            Case 6
                TradDegré_ChiffreLettre = "VII"

        End Select
    End Function
    Private Sub Grid1_KeyDown(Sender As Object, e As KeyEventArgs) Handles Grid1.KeyDown
        Dim a As String
        Dim b As String
        Dim c As String
        Dim tbl(), tbl1(), tbl2(), tbl3() As String
        Dim n_Mesure As Integer
        '
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        '
        ' variables pour incrémenter/décrémenter les vélocités
        Dim i As Integer = Grid1.ActiveCell.Row
        Dim j As Integer = Grid1.ActiveCell.Col
        Dim k As Integer
        Dim sortir As Boolean = False

        Try
            a = e.KeyData
            '
            '**********************************
            ' Touches Suppr sur les Marqueurs *
            '**********************************
            '
            If a = "46" And Grid1.ActiveCell.Col = 2 Then ' 46 : touche suppr - 2 Colonne marqueur
                b = Det_Index_De_Ligne(Grid1.ActiveCell.Row)
                '
                tbl = Split(b, "-")
                m = tbl(0)
                t = tbl(1)
                ct = tbl(2)

                TableEventH(m, t, ct).Marqueur = ""
                Grid1.ActiveCell.Text = ""
                Grid1.ActiveCell.BackColor = Couleur_Marqueurs
                Grid1.ActiveCell.ForeColor = Color.Black
                '
            End If
            '
            '
            '***********************************
            ' Touches Entrée sur les Marqueurs *
            '***********************************
            '
            If a = "13" And Grid1.ActiveCell.Col = 2 Then ' 13 : touche "entrée" - 2 : Colonne  marqueur : entrer un marqueur
                b = Grid1.ActiveCell.Text
                c = Det_Index_De_Ligne(Grid1.ActiveCell.Row) ' c contient la position si elle existe
                tbl1 = Split(c, "-")
                n_Mesure = Val(tbl1(0))
                '
                If Trim(c) <> "" Then ' existence d'une position ?
                    tbl = Split(c, "-")
                    m = Val(tbl(0))
                    t = Val(tbl(1))
                    ct = Val(tbl(2))
                    '
                    If Trim(b) <> "" Then ' marqueurs différent de "" ? (sinon effacement)
                        '
                        Grid1.ActiveCell.BackColor = Color.Green
                        Grid1.ActiveCell.ForeColor = Color.Yellow
                        '
                        Grid2.AutoRedraw = False
                        Grid2.Cell(0, n_Mesure).Locked = False
                        Grid2.Cell(0, n_Mesure).BackColor = Color.Green
                        Grid2.Cell(0, n_Mesure).ForeColor = Color.Yellow
                        Grid2.Cell(0, n_Mesure).Locked = True
                        'Grid2.Cell(0, n_Mesure).SetFocus()
                        Grid2.Refresh()
                        Grid2.AutoRedraw = True
                        '
                        '
                        TableEventH(m, t, ct).Marqueur = Trim(b)
                    Else
                        Grid1.ActiveCell.BackColor = Couleur_Marqueurs
                        Grid1.ActiveCell.ForeColor = Color.Black
                        '
                        TableEventH(m, t, ct).Marqueur = ""
                        '
                        ' Gestion de Grid2
                        ' ****************
                        '
                        If Not (Det_MarqueurDsMesure(m)) Then ' il peut y avoir un autre marqueur dans la mesure (plusiueurs accords dans la mesure)
                            Grid2.Cell(0, n_Mesure).Locked = False
                            Grid2.Cell(0, n_Mesure).BackColor = Color.Beige
                            Grid2.Cell(0, n_Mesure).ForeColor = Color.Black
                            Grid2.Cell(0, n_Mesure).Locked = True
                            Grid2.Cell(0, n_Mesure).SetFocus()
                            '
                            If TContext1.AutoVoiceValid = True Then
                                Grid2.AutoRedraw = False
                                '
                                For i = TContext1.ColDeb To TContext1.Colfin
                                    If Grid2.Cell(0, i).BackColor <> Color.Green Then
                                        Grid2.Cell(0, i).BackColor = Color.Gainsboro
                                    End If
                                Next i
                                '
                                Grid2.Refresh()
                                Grid2.AutoRedraw = True
                            End If
                            '
                        End If
                    End If
                End If
            End If

            '****************************************
            ' Incrémenter/Décrémenter les vélocités *
            '****************************************
            If (e.KeyCode = Keys.P Or e.KeyCode = Keys.M) And Grid1.Selection.FirstCol = ColVélo And OK_KeyDown = True Then
                Grid1.AutoRedraw = False
                Grid1.Range(0, ColVélo, nbLignesGrid1 - 1, ColVélo).Locked = False ' Vérouillage des cellules
                ' arrowdirection
                b = CellDyn()
                ' traitement des dynamiques avec les touches + et -
                If Trim(b) <> "" Then
                    tbl1 = Split(b)
                    For ii = 0 To UBound(tbl1)
                        tbl2 = Split(tbl1(ii), ",")
                        i = Convert.ToInt16(tbl2(0)) ' ligne - - - 
                        j = Convert.ToInt16(tbl2(1)) ' col
                        k = Convert.ToInt16(Grid1.Cell(i, j).Text)
                        ' détermination de la nécessité d'incrémenter
                        If k >= 127 And e.KeyCode = Keys.Add Then
                            sortir = True ' si l'une des valeurs =127 alors on n'augmente plus aucune valeur de la sélection --> sortir = true
                            Exit For
                        End If
                        ' détermination de la nécessité de décrémenter
                        If k <= 0 And e.KeyCode = Keys.Subtract Then
                            sortir = True ' si l'une des valeurs =127 alors on n'augmente plus aucune valeur de la sélection  --> sortir = true
                            Exit For
                        End If
                        '
                    Next
                    ' incrémentation/décrémentation (si sortir = false)
                    If sortir = False Then
                        b = Det_Index_De_Ligne(Grid1.ActiveCell.Row)
                        '
                        tbl = Split(b, "-")
                        m = tbl(0)
                        t = tbl(1)
                        ct = tbl(2)
                        For ii = 0 To UBound(tbl1)
                            tbl2 = Split(tbl1(ii), ",")
                            i = Convert.ToInt16(tbl2(0)) ' ligne 
                            j = Convert.ToInt16(tbl2(1))
                            a = Trim(Grid1.Cell(i, j).Text)
                            '
                            tbl3 = Trim(Grid1.Cell(i, 1).Text).Split(".")
                            m = Convert.ToInt16(tbl3(0))
                            t = Convert.ToInt16(tbl3(1))
                            ct = Convert.ToInt16(tbl3(2))
                            '
                            If e.KeyCode = Keys.P Then
                                k = Convert.ToInt16(a) + 1
                                If k <= 127 Then
                                    Grid1.Cell(i, j).Text = Convert.ToString(k)
                                    TableEventH(m, t, ct).Vel = Grid1.Cell(i, j).Text
                                End If
                            ElseIf e.KeyCode = Keys.M Then
                                k = Convert.ToInt16(a) - 1
                                If k >= 0 Then
                                    Grid1.Cell(i, j).Text = Convert.ToString(k)
                                    TableEventH(m, t, ct).Vel = Grid1.Cell(i, j).Text
                                End If
                            End If
                        Next
                        JouerAcc(Grid1.Cell(Grid1.ActiveCell.Row, 1).Text)
                        OK_KeyDown = False
                    End If
                End If

                Grid1.Range(0, 7, nbLignesGrid1 - 1, 7).Locked = False ' DéVérouillage des cellules
                Grid1.AutoRedraw = True
                Grid1.Refresh()

            End If

            '****************************************
            '        Réinit des vélocités           *
            '****************************************

            If (e.KeyCode = Keys.Escape) And Grid1.Selection.FirstCol = ColVélo Then
                b = CellDyn()
                ' traitement des dynamiques avec les touches + et -
                If Trim(b) <> "" Then
                    tbl1 = Split(b)
                    For ii = 0 To UBound(tbl1)
                        ' écriture de la valeur d'init dans la grille
                        tbl2 = Split(tbl1(ii), ",")
                        i = Convert.ToInt16(tbl2(0)) ' ligne - - - 
                        j = Convert.ToInt16(tbl2(1)) ' col
                        Grid1.Cell(i, j).Text = "100"
                        ' écriture de la valeur d'init dans la TableEventh
                        tbl3 = Grid1.Cell(i, 1).Text.Split(".")
                        m = tbl3(0)
                        t = tbl3(1)
                        ct = tbl3(2)
                        TableEventH(m, t, ct).Vel = "100"

                    Next

                End If
            End If

            '
            '****************************************
            ' Incrémenter/Décrémenter les racines   *
            '****************************************
            If (e.KeyCode = Keys.P Or e.KeyCode = Keys.M) And Grid1.Selection.FirstCol = ColRacine And OK_KeyDown = True Then

                Grid1.AutoRedraw = False
                Grid1.Range(0, 8, nbLignesGrid1 - 1, ColRacine).Locked = False ' Vérouillage des cellules
                RAZ_Clavier()
                ' arrowdirection
                b = CellDyn_Racines()
                ' traitement des dynamiques avec les touches + et -
                If Trim(b) <> "" Then
                    tbl1 = Split(b)
                    For ii = 0 To UBound(tbl1)
                        tbl2 = Split(tbl1(ii), ",")
                        i = Convert.ToInt16(tbl2(0)) ' ligne 
                        j = Convert.ToInt16(tbl2(1)) ' col
                        '
                        '
                        'k = Convert.ToInt16(Grid1.Cell(i, j).Text)
                        k = Tracine.IndexOf(Trim(Grid1.Cell(i, j).Text))
                        ' détermination de la nécessité d'incrémenter
                        If k >= Tracine.Count - 1 And e.KeyCode = Keys.Add Then
                            sortir = True ' si l'une des valeurs =max alors on n'augmente plus aucune valeur de la sélection --> sortir = true
                            Exit For
                        End If
                        ' détermination de la nécessité de décrémenter
                        If k <= 0 And e.KeyCode = Keys.Subtract Then
                            sortir = True ' si l'une des valeurs =max alors on n'augmente plus aucune valeur de la sélection  --> sortir = true
                            Exit For
                        End If
                        '
                    Next
                    ' incrémentation/décrémentation (si sortir = false)
                    If sortir = False Then
                        b = Det_Index_De_Ligne(Grid1.ActiveCell.Row)
                        '
                        tbl = Split(b, "-")
                        m = tbl(0)
                        t = tbl(1)
                        ct = tbl(2)

                        For ii = 0 To UBound(tbl1)
                            tbl2 = Split(tbl1(ii), ",")
                            i = Convert.ToInt16(tbl2(0))
                            j = Convert.ToInt16(tbl2(1))
                            a = Trim(Grid1.Cell(i, j).Text)
                            '
                            tbl3 = Trim(Grid1.Cell(i, 1).Text).Split(".")
                            m = Convert.ToInt16(tbl3(0))
                            t = Convert.ToInt16(tbl3(1))
                            ct = Convert.ToInt16(tbl3(2))
                            'If IsNumeric(a) Then
                            If e.KeyCode = Keys.P Then
                                'k = Convert.ToInt16(a) + 1
                                k = Tracine.IndexOf(a)
                                k += 1
                                If k <= Tracine.Count - 1 Then
                                    Grid1.Cell(i, j).Text = Tracine.Item(k)    '
                                    TableEventH(m, t, ct).Racine = Trim(Tracine.Item(k))
                                    JouerAcc(Grid1.Cell(Grid1.ActiveCell.Row, 1).Text) ' jouer l'accord si un seul accord est sélectionné
                                End If
                            ElseIf e.KeyCode = Keys.M Then
                                'k = Convert.ToInt16(a) - 1
                                k = Tracine.IndexOf(Trim(Grid1.Cell(i, j).Text))
                                k -= 1
                                If k >= 0 Then
                                    Grid1.Cell(i, j).Text = Tracine.Item(k)
                                    TableEventH(m, t, ct).Racine = Trim(Tracine.Item(k))
                                    JouerAcc(Grid1.Cell(Grid1.ActiveCell.Row, 1).Text)
                                End If
                            End If
                        Next
                        ' remarque : Calcul_AutoVoicingZ() est appelé dans JouerAcc
                        Maj_VueNotes()
                        OK_KeyDown = False
                    End If
                End If
                Grid1.Range(0, 8, nbLignesGrid1 - 1, 8).Locked = False ' DéVérouillage des cellules
                Grid1.AutoRedraw = True
                Grid1.Refresh()
                Select_ColCours_Grid6()
            End If

            '****************************************
            '        Réinit des racines            *
            '****************************************

            If (e.KeyCode = Keys.Escape) And Grid1.Selection.FirstCol = 8 Then
                b = CellDyn_Racines()
                ' 
                If Trim(b) <> "" Then
                    tbl1 = Split(b)
                    For ii = 0 To UBound(tbl1)
                        ' écriture de la valeur d'init dans la grille
                        tbl2 = Split(tbl1(ii), ",")
                        i = Convert.ToInt16(tbl2(0)) ' ligne - - - 
                        j = Convert.ToInt16(tbl2(1)) ' col
                        Grid1.Cell(i, j).Text = RacineDéfaut
                        ' écriture de la valeur d'init dans la TableEventh
                        tbl3 = Grid1.Cell(i, 1).Text.Split(".")
                        m = tbl3(0)
                        t = tbl3(1)
                        ct = tbl3(2)
                        TableEventH(m, t, ct).Racine = RacineDéfaut
                    Next
                End If
            End If

        Catch ex As Exception
            Dim mess As String = ex.Message
        End Try
    End Sub
    Sub Select_ColCours_Grid6()
        Dim i As Integer = Grid1.ActiveCell.Row
        Dim a As String

        a = Grid1.Cell(i, 1).Text
        If Trim(a) <> "" Then
            Grid6.Range(0, i, Grid6.Rows - 1, i).SelectCells()
            'Grid6.Range(0, i, Grid6.Rows - 1, LastC).SelectCells()
            a = Grid1.Cell(i, 1).Text
            tbl = Split(Trim(a), ".")
            k = Val(tbl(0))
            Grid2.LeftCol = k ' positionnement de grid2 
            Grid3.LeftCol = ((Grid2.LeftCol - 1) * nbColonnesGrid3ParMesure) + 1 ' positionnement de grid3 en fonction de Grid2
        End If
    End Sub
    ''' <summary>
    ''' Joueur accord dans Grid à une position données
    ''' </summary>
    ''' <param name="Position">Position (mesure) de l'accord à jouer</param>
    Sub JouerAcc(Position As String)
        Dim m, t, ct As Integer
        Dim tbl() As String


        Try

            If ComboMidiOut.Items.Count > 0 Then
                If EnChargement = False Then        ' jouer "Accord"
                    If AccordAEtéJoué = False Then
                        tbl = Split(Trim(Position), ".")
                        m = Val(tbl(0))
                        t = Val(tbl(1))
                        ct = Val(tbl(2))
                        b = TableEventH(m, t, ct).Tonalité
                        tbl = Split(b)
                        Clef = Det_Clef(tbl(0))
                        '
                        JouerAccord123(Trim(Position))
                    End If
                End If
                '
            End If
        Catch ex As Exception
            Dim mess As String = ex.Message
        End Try
    End Sub
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <returns>Retourne dans une chaine les coordonnées lignes,colonnes cellules concernées avec la syntaxe suivante : ligne1,Colonne1 Ligne2,Colonne 2 Ligne3,Colonne 3 etc..</returns>
    Function CellDyn() As String
        Dim i, j As Integer
        Dim a As String = ""
        CellDyn = a

        j = Grid1.Selection.FirstCol
        For i = Grid1.Selection.FirstRow To Grid1.Selection.LastRow
            'For j = Grid1.Selection.FirstCol To Grid1.Selection.LastCol
            If IsNumeric(Grid1.Cell(i, j).Text) Then
                a = a + Convert.ToString(i) + "," + Convert.ToString(j) + " "
            End If

        Next
        CellDyn = Trim(a)
    End Function
    ''' <summary>
    ''' 
    ''' </summary>
    ''' <returns>Retourne dans une chaine les coordonnées lignes,colonnes cellules concernées avec la syntaxe suivante : ligne1,Colonne1 Ligne2,Colonne 2 Ligne3,Colonne 3 etc..</returns>
    Function CellDyn_Racines() As String
        Dim i, j As Integer
        Dim a As String = ""
        CellDyn_Racines = a

        j = Grid1.Selection.FirstCol
        For i = Grid1.Selection.FirstRow To Grid1.Selection.LastRow
            'For j = Grid1.Selection.FirstCol To Grid1.Selection.LastCol
            If Trim(Grid1.Cell(i, j).Text) <> "" Then
                a = a + Convert.ToString(i) + "," + Convert.ToString(j) + " "
            End If

        Next
        CellDyn_Racines = Trim(a)
    End Function



    Private Sub Grid2_KeyDown(Sender As Object, e As KeyEventArgs) Handles Grid2.KeyDown
        Dim a As String
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim m As Integer
        Dim mDeb As Integer
        Dim mFin As Integer
        Dim ComptMes As Integer
        Dim t As Integer
        Dim c As Integer
        Dim ct As Integer
        Dim NbDivMesure As Integer

        a = e.KeyData
        mDeb = Grid2.Selection.FirstCol
        mFin = Grid2.Selection.LastCol
        t = 1
        ct = 1
        '
        NbDivMesure = Det_NbDivisionMesure()
        If DerGridCliquée = GridCours.Grid2 Then
            If a = "46" And Grid2.ActiveCell.Col > 1 Then ' 46 = delete Touche Suppr
                '
                ' Pour CTRL Z
                ' ***********
                ZAnnulation_Sauvegarde(mDeb, mFin)
                '
                ' Mise àjour de grid2
                ' *******************
                k = (mFin - mDeb)
                '
                For i = mDeb To mFin
                    Grid2.Column(i).Locked = False
                Next
                '
                Grid2.AutoRedraw = False
                '
                ' Grid2.Selection.ClearText() ' <-- semble ne pas toujors fonctionner
                '
                For i = mDeb To mFin
                    Grid2.Column(i).Locked = True
                    Grid2.Cell(Grid2.ActiveCell.Row, i).BackColor = Color.White
                    Grid2.Cell(Grid2.ActiveCell.Row, i).ForeColor = Color.Black
                    Grid2.Cell(Grid2.ActiveCell.Row, i).Text = ""
                Next
                '
                '
                Grid2.Refresh()
                Grid2.AutoRedraw = True

                ' mise à jour de grid3
                ' ********************
                c = ((mDeb - 1) * NbDivMesure) + 1
                m = mDeb
                ComptMes = 1
                For j = c To (mFin * NbDivMesure)
                    If Grid3.Cell(2, c).BackColor = Couleur_Accord_Grid3 Then
                        '
                        ' Détermination des index t et ct à partir de grid3
                        ' *************************************************
                        ct = 0 '-1
                        For i = c To 0 Step -1
                            ct = ct + 1
                            If Trim(Grid3.Cell(2, i).Text) <> "" Then
                                t = Val(Trim(Grid3.Cell(2, i).Text)) '- 1
                                Exit For
                            End If
                        Next i
                        '
                        ' Effacement
                        ' **********
                        ' Effacement Couleur
                        If Not (mDeb = 1) Then ' ne jamais effacer a couleur de la mesure 1
                            ' Grid2.ActiveCell.Text = ""
                            ' Grid2.ActiveCell.BackColor = Color.White
                            ' Grid2.Cell(Grid2.ActiveCell.Row, m).BackColor = Color.White
                            If ct <> 1 Then
                                Grid3.Cell(2, c).BackColor = Couleur_CTemps
                                Grid3.Cell(2, c).ForeColor = Color.Black
                            Else
                                If EstPair(t) Then
                                    Grid3.Cell(2, c).BackColor = Couleur_CTemps
                                    Grid3.Cell(2, c).ForeColor = Color.Black
                                Else
                                    Grid3.Cell(2, c).BackColor = Couleur_Temps
                                    Grid3.Cell(2, c).ForeColor = Color.Black
                                End If
                            End If
                        End If
                        ' Effacement text dans TableEventH
                        If Not (mDeb = 1 And t = 0) Then ' ne jamais effacer l'accord du temp=1 de la mesure=1 ()
                            '
                            TableEventH(m, t, ct).Accord = ""
                            TableEventH(m, t, ct).Gamme = ""
                            TableEventH(m, t, ct).Marqueur = ""
                            TableEventH(m, t, ct).Tonalité = ""
                            TableEventH(m, t, ct).Mode = ""
                            TableEventH(m, t, ct).Détails = ""
                            TableEventH(m, t, ct).Degré = ""
                            TableEventH(m, t, ct).Position = ""
                            TableEventH(m, t, ct).Ligne = -1
                        End If
                        '
                    End If
                    c = c + 1                           ' comptge des colonnes de grid3
                    ComptMes = ComptMes + 1             ' comptage des numéro de mesures
                    If ComptMes = NbDivMesure + 1 Then
                        ComptMes = 1
                        m = m + 1
                    End If

                Next j
                Ecriture_Entrée_Ds_CompoGrid()
                Maj_PianoRoll()
                Maj_DrumEdit()
                EcritUneFois = True
            End If
        End If
    End Sub

    Private Sub Grid2_Scroll(Sender As Object, e As EventArgs) Handles Grid2.Scroll
        If QuiScroll = "Grid2" Then
            Grid3.LeftCol = ((Grid2.LeftCol - 1) * nbColonnesGrid3ParMesure) + 1
        End If
    End Sub

    Private Sub Grid2_Click(Sender As Object, e As EventArgs) Handles Grid2.Click
        Dim i As Integer
        Dim c As Integer
        Dim r As Integer

        ' Positionnement de grid3 
        ' ***********************
        If Followed.Checked = True Then
            r = 0 'Grid2.Selection.FirstRow
            c = Grid2.Selection.FirstCol
            i = Val(Grid2.Cell(r, c).Text)
            Grid3.LeftCol = ((i - 1) * nbColonnesGrid3ParMesure) + 1
        End If
    End Sub

    Private Sub Grid2_MouseHover(Sender As Object, e As EventArgs) Handles Grid2.MouseHover
        QuiScroll = "Grid2"
    End Sub

    Private Sub Grid3_KeyDown(Sender As Object, e As KeyEventArgs) Handles Grid3.KeyDown
        Dim a As String
        Dim i, j As Integer
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim actcol As Integer
        Dim NbDivMesure As Integer

        Grid3.ActiveCell.Locked = True
        '
        a = e.KeyData
        actcol = Grid3.ActiveCell.Col
        t = -1
        ct = 1
        '
        NbDivMesure = Det_NbDivisionMesure()
        If Grid3.ActiveCell.BackColor = Couleur_Accord_Grid3 Then
            If a = "46" And Grid3.ActiveCell.Col > 1 Then ' 46 = delete Touche Suppr
                ' déterminaton des index
                ' **********************
                For i = actcol To 0 Step -1
                    If Trim(Grid3.Cell(2, i).Text) <> "" And t = -1 Then
                        t = Val(Trim(Grid3.Cell(2, i).Text)) '- 1
                    Else
                        If t = -1 Then
                            ct = ct + 1
                        End If
                    End If
                    If Trim(Grid3.Cell(1, i).Text) <> "" Then
                        m = Val(Trim(Grid3.Cell(1, i).Text))
                        Exit For
                    End If

                Next i
                '
                ' Pour CTRL Z
                ' ***********
                ZAnnulation_Sauvegarde(m, m)

                ' Effacement de l'Accord
                ' **********************
                TableEventH(m, t, ct).Position = ""
                TableEventH(m, t, ct).Marqueur = ""
                TableEventH(m, t, ct).Accord = ""
                TableEventH(m, t, ct).Gamme = ""
                TableEventH(m, t, ct).Ligne = -1
                '
                i = Grid3.ActiveCell.Row
                j = Grid3.ActiveCell.Col
                '
                ' maj couleur accents dans Grid3
                ' ******************************
                If ct = 1 Then
                    If EstPair(t) Then
                        Grid3.ActiveCell.BackColor = Couleur_CTemps
                        Grid3.ActiveCell.ForeColor = Color.Black
                    Else
                        Grid3.ActiveCell.BackColor = Couleur_Temps
                        Grid3.ActiveCell.ForeColor = Color.Black
                    End If
                Else
                    Grid3.ActiveCell.BackColor = Couleur_CTemps
                    Grid3.ActiveCell.ForeColor = Color.Black
                End If

                ' Mise a jour de grid2
                ' ********************
                a = ChaineAccord(m)
                If Trim(a) = "" Then
                    Grid2.Cell(1, m).Text = ""
                    Grid2.Cell(1, m).BackColor = Color.White
                Else
                    Grid2.Cell(1, m).Text = Trim(a)
                End If
                ' Mise à jour CompoGrid
                ' *********************
                Ecriture_Entrée_Ds_CompoGrid()
                Maj_PianoRoll()
                Maj_DrumEdit()
                EcritUneFois = True
            End If
        End If
    End Sub
    Private Sub Grid3_MouseDown(Sender As Object, e As MouseEventArgs) Handles Grid3.MouseDown
        Dim i As Integer
        Dim j As Integer
        Dim Position As String
        Dim Ligne As Integer = 2
        Dim Colonne As Integer
        '
        Dim a, b As String
        Dim m, t, ct As String
        Dim contretemps As Integer
        Dim temps As String = ""
        Dim tbl() As String

        ' paramètre permettant de gérer les CTRL V, C, X de la courbes expression des voicing symphoniques
        ' ************************************************************************************************
        OngletCours_Edition = N_PisteAcc
        '
        TGrille2 = TGrilleCours.Grid3 ' cette instruction doit rester au début de Grid3_MouseDown
        '
        If (Grid3.MouseCol) <= (nbMesures * nbColonnesGrid3ParMesure) - 1 And
            (Grid3.Selection.LastCol <= (nbMesures * nbColonnesGrid3ParMesure) - 1) And
            (Grid3.MouseCol > 0) Then
            'i = Grid3.ActiveCell.Row
            ' Jouer Accord
            ' ************
            i = Grid3.MouseRow
            j = Grid3.MouseCol
            Colonne = j

            ' Détermination de la clef courante
            ' *********************************
            Position = Det_Position_from_Grid3(j)
            tbl = Split(Position, ".")
            m = Val(tbl(0))
            t = Val(tbl(1))
            ct = Val(tbl(2))
            '
            MesureCourante = m
            ' 
            a = TableEventH(m, t, ct).Tonalité
            tbl = Split(a)
            Clef = Det_Clef(a)

            '
            ' Mise a jour du tableau des modes Tabtons sur un clic dans Grid2 à travers combobox1 et combobox2
            ' ************************************************************************************************
            a = Trim(TableEventH(m, t, ct).Accord) ' c'est la valeur de l'accord dans TableEventH qui définit préence ou absence d'un EVENTH
            If a <> "" Then
                a = Trim(TableEventH(m, t, ct).Tonalité)
                tbl = a.Split
                If tbl(1) = "Maj" Then
                    a = " " + tbl(0) + " Major"
                    ii = ComboBox1.Items.IndexOf(a)
                    ComboBox1.SelectedIndex = ii
                Else
                    a = " " + tbl(0) + " Minor"
                    ii = ComboBox2.Items.IndexOf(a)
                    ComboBox1.SelectedIndex = ii
                End If
            End If
            '
            ' Ecrire les notes de l'accord dans la text box (en haut à droite)
            ' ****************************************************************
            Dim AA As String = Trim(TableEventH(m, t, ct).Accord)
            If Trim(AA) <> "" Then
                Dim tbl1() As String = AA.Split 'Trim(ComboBox1.Text).Split()
                Dim bb As String

                If Len(tbl1(0)) > 1 Then
                    bb = Mid(AA, 2, 1)
                    If Trim(bb) = "b" Then
                        TextBox1.Text = Det_NotesAccord3(AA, "b")
                    Else
                        TextBox1.Text = Det_NotesAccord3(AA, "#")
                    End If
                Else
                    TextBox1.Text = Det_NotesAccord3(AA, "#")
                End If
            End If

            ' Mise à jour tonalité courante de l'accord sur lequel on clique (utile entre autre pour Onglet Modulation)
            ' *********************************************************************************************************
            'Maj_TonalitéModulation(MesureCourante, t, ct)
            '
            ' affichage de l'accord dans label31
            ' **********************************
            b = TableEventH(m, t, ct).Accord
            If Trim(b) <> "" Then
                Label31.Text = TableEventH(m, t, ct).Accord
                Label6.Text = Str(m)
            End If
            '
            ' Mise à jour Tables pour Onglet SUBSTITUTION
            ' ********************************************
            If e.Button() = Windows.Forms.MouseButtons.Left And Trim(TableEventH(m, t, ct).Accord) <> "" And
                 Not ((My.Computer.Keyboard.CtrlKeyDown) And (My.Computer.Keyboard.AltKeyDown)) Then ' TabControl4.SelectedIndex = 2 --> onglet Substitution

                Dim TMaj, TMin As String

                tbl = Split(Trim(TableEventH(m, t, ct).Tonalité))
                TMaj = Trim(tbl(0))
                tbl = Det_RelativeMineure(Trim(TableEventH(m, t, ct).Tonalité)).Split
                TMin = tbl(0)
                Maj_TableGlobalAccSubsti(TMaj, TMin, TMaj)
                '
                Maj_Substitutions(m, t, ct)
            Else
                For i = 0 To 3
                    LabSubsti.Item(i).Text = "---"
                Next
                Label67.Text = "---"
            End If
            '
            ' Jouer accord
            ' ************
            If EnChargement = False And e.Button() = Windows.Forms.MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown Then
                If ComboMidiOut.Items.Count > 0 Then
                    If AccordAEtéJoué = False Then
                        Position = Det_Position_from_Grid3(j)
                        JouerAccord123(Position)
                    End If
                End If
            End If
            DerGridCliquée = GridCours.Grid3
            '
            ' Affichage notes accords sur clavier sans jouer l'accord
            ' *******************************************************
            If e.Button() = MouseButtons.Middle And Not (My.Computer.Keyboard.CtrlKeyDown) And Not (My.Computer.Keyboard.AltKeyDown) _
                                            And Not (My.Computer.Keyboard.ShiftKeyDown) Then
                a = Det_Position_from_Grid3(j)
                AfficherAccordRapport(Trim(a))
            End If
            '

            ' Détermination de la mesure
            ' **************************
            If Not (My.Computer.Keyboard.CtrlKeyDown) Then
                m = 1
                For i = Grid3.MouseCol To 0 Step -1
                    a = Grid3.Cell(1, i).Text
                    If Trim(a) <> "" Then
                        m = Val(Trim(a))
                        MesureCourante = Val(a) ' utilisé par JouerSource
                        Exit For
                    End If
                Next i
            End If
            '
            contretemps = 1 ' détermination des index t et ct
            For i = j To 0 Step -1
                a = Grid3.Cell(2, i).Text
                If Trim(a) <> "" Then
                    temps = Trim(a) ' t
                    'résultat = Trim(mesure) + "." + Trim(temps) + "." + Trim(Str(contretemps + 1))
                    Exit For
                End If
                contretemps = contretemps + 1 ' détermination du contretemps ct
            Next i

            ' Sélection de la ligne de Grid1 et de la colonne de Grid6 correspondant à la colonne de Grid3
            ' ********************************************************************************************
            '
            If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                Dim mesu As String = MesureCourante.ToString + "." + Trim(temps) + "." + contretemps.ToString
                i = Det_LigneMesureGrid1(Trim(mesu))
                Grid1.Range(i, 0, i, Grid1.Cols - 1).SelectCells()
                '
                j = Det_ColonneMesureGrid6(Trim(mesu))
                If j <> -1 Then
                    Grid6.Range(0, j, Grid6.Rows - 1, j).SelectCells()
                End If
            End If


            ' Mise à jour tonalité de l'accord cliqué et de l'Onglet Modulation
            ' *****************************************************************
            'Maj_TonalitéModulation(MesureCourante, Val(temps), contretemps)
            '
            ' Mise à jour des locators
            ' ************************
            If e.Button() = (MouseButtons.Left) And (My.Computer.Keyboard.AltKeyDown) Then
                a = Det_IndexDansGrid3(Grid3.MouseCol)
                tbl = Split(a, " ")
                i = Val(tbl(0)) ' récupération du N° de mesure
                If EnChargement = False Then
                    If i <= Terme.Value Then
                        Début.Value = i
                    End If
                End If
            End If
            '
            If (e.Button() = MouseButtons.Right) And (My.Computer.Keyboard.AltKeyDown) Then
                a = Det_IndexDansGrid3(Grid3.MouseCol)
                tbl = Split(a, " ")
                i = Val(tbl(0)) ' récupération du N° de mesure
                If EnChargement = False Then
                    If i >= Début.Value Then
                        Terme.Value = i
                    End If
                End If
            End If
        End If
    End Sub
    Function Det_LigneMesureGrid1(mesure As String) ' détermination de la ligne de Grid1 contenant la mesure "mesure"
        Dim i As Integer = -1

        Do
            i = i + 1
        Loop Until (Trim(Grid1.Cell(i, 1).Text) = Trim(mesure)) Or (Trim(Grid1.Cell(i, 1).Text) = "") Or (i = Grid1.Rows - 1)
        Return i
    End Function
    Function Det_ColonneMesureGrid6(mesure As String) ' détermination de la ligne de Grid1 contenant la mesure "mesure"
        Dim j As Integer = -1
        Dim ligne As Integer = 1
        Do
            j = j + 1
        Loop Until (Trim(Grid6.Cell(ligne, j).Text) = Trim(mesure)) Or (Trim(Grid6.Cell(ligne, j).Text) = "") Or (j = Grid6.cols - 1)
        Return j
    End Function
    Private Sub Grid3_MouseHover(Sender As Object, e As EventArgs) Handles Grid3.MouseHover
        QuiScroll = "Grid3"
    End Sub

    Private Sub Grid3_MouseUp(Sender As Object, e As MouseEventArgs) Handles Grid3.MouseUp
        Dim a As String
        Dim mesure As String = "0"
        Dim temps As String = "0"
        Dim résultat As String = ""
        Dim ColMesure As Integer
        '
        Dim contretemps As Integer = 0

        Dim i, j As Integer
        Dim Cel As FlexCell.Cell
        '
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim ligne As Integer = Grid3.MouseRow
        Dim col As Integer = Grid3.MouseCol

        ' Ecriture accord de MODES
        ' ************************
        If My.Computer.Keyboard.AltKeyDown Then ECR_MODES(TGridDest.Grid3)

        '
        If (Grid3.MouseCol <= (nbMesures * nbColonnesGrid3ParMesure) - 1) And
            (Grid3.Selection.LastCol <= (nbMesures * nbColonnesGrid3ParMesure) - 1) Then
            DerGridCliquée = GridCours.Grid3
            '
            ' Arrêter jeu Accord
            ' ******************
            If AccordAEtéJoué = True Then
                CouperJouerAccord()
                AccordAEtéJoué = False
            End If
            '
            Grid3.Refresh()
            'col = Grid3.ActiveCell.Col '  Grid3.MouseCol
            'ligne = Grid3.ActiveCell.Row ' Grid3.MouseRow
            '
            j = col 'Grid3.MouseCol
            SauveMouseColGrid3 = col 'j

            '
            RAZ_AffNoteAcc() ' effacer les notees affficher dans le clavier piano

            ' Préparation de la cellule à traiter
            ' ***********************************

            Cel = Grid3.Cell(ligne, col)
            '
            Grid3.Range(ligne, col, ligne, col).SelectCells() ' sélection de la cellule à traiter
            '
            ' Détermination des m, t et ct
            ' ****************************
            ' m : détermination de la valeur de la mesure
            ' -------------------------------------------
            For i = col To 0 Step -1
                a = Grid3.Cell(1, i).Text
                If Trim(a) <> "" Then
                    mesure = Trim(a) ' valeur du m
                    ColMesure = i
                    Exit For
                End If
            Next i
            '
            '
            ' t et ct : détermination des index t et ct
            ' -----------------------------------------
            contretemps = 1
            For i = j To 0 Step -1
                a = Grid3.Cell(2, i).Text
                If Trim(a) <> "" Then
                    temps = Trim(a) ' valeur du t
                    résultat = Trim(mesure) + "." + Trim(temps) + "." + Trim(Str(contretemps + 1))
                    Exit For
                End If
                contretemps = contretemps + 1 ' valeur du ct
            Next i
            '
            If Trim(mesure) <> "0" Then
                Grid2.Cell(1, 0).Text = Trim(résultat) ' la colonne 0 n'est utilisée dans grid3
            End If
            '
            ' affichage des cractéristiques de l'accord sélectionné dans les réglages à droite onglet son
            ' *******************************************************************************************
            '
            m = Val(mesure)
            t = Val(temps) '- 1
            ct = Val(contretemps) '- 1
            '
            Maj_InfoAccord(m, t, ct)
            '

            ' Lancement du menu contextuel des accords complexes
            ' **************************************************
            If e.Button() = MouseButtons.Right Then
                Transpo.Visible = False ' pas de transposition dans grid3

                DerGridCliquée = GridCours.Grid3
                Tonacours = TableEventH(m, t, ct).Tonalité

                If Trim(TableEventH(m, t, ct).Accord) <> "" Then
                    ContextMenu3Accord.Visible = True
                    MenuContextGrid2Grid3(m, t, ct) 'Calcul des sous menus du  menu flottant accord
                    ToolStripSeparator7.Visible = False
                    Transpo.Visible = False
                    ToolStripSeparator6.Visible = True
                    Flot_Couper.Enabled = True ' mise à jour du menu couper,copier,coller
                    Flot_Copier.Enabled = True
                    Flot_Coller.Enabled = True

                    ContextMenuStrip3.Show(CType(Sender, Object), e.Location)
                Else ' ici une cellule vide a été sélectionnée
                    ContextMenu3Accord.Visible = False
                    ToolStripSeparator7.Visible = False
                    Transpo.Visible = False
                    ToolStripSeparator6.Visible = False
                    Flot_Couper.Enabled = False
                    Flot_Copier.Enabled = False
                    Flot_Coller.Enabled = True
                    '
                    ContextMenuStrip3.Show(CType(Sender, Object), e.Location)
                End If
                If m = 1 Then Flot_Couper.Enabled = False
            End If
        End If
        '
    End Sub

    Private Sub Grid3_Scroll(Sender As Object, e As EventArgs) Handles Grid3.Scroll
        Dim i As Long
        Dim j As Long

        If QuiScroll = "Grid3" Then
            i = Grid3.LeftCol
            j = Fix(((i - 1) / nbColonnesGrid3ParMesure) + 1)
            Grid2.LeftCol = j
        End If
    End Sub
    Private Sub TabPage_Tonalité_Paint(sender As Object, e As PaintEventArgs)
        OngletCours = 1
    End Sub

    Private Sub TabPage_Cadences_Paint(sender As Object, e As PaintEventArgs)
        OngletCours = 0
    End Sub
    Private Sub TabPage1_Paint(sender As Object, e As PaintEventArgs) Handles TabPage1.Paint
        OngletCours = 1
    End Sub

    Private Sub TabPage2_Paint(sender As Object, e As PaintEventArgs) Handles TabPage2.Paint
        OngletCours = 0
    End Sub
    Private Sub TabPage7_Paint(sender As Object, e As PaintEventArgs) Handles TabPage7.Paint
        OngletCours = 7
    End Sub

    Private Sub TabPage3_Paint(sender As Object, e As PaintEventArgs) Handles TabPage3.Paint
        OngletCours = 2
    End Sub
    Private Sub TabPage16_Paint(sender As Object, e As PaintEventArgs) Handles TabPage16.Paint
        OngletCours = 16
    End Sub
    Private Sub TabPage21_Paint(sender As Object, e As PaintEventArgs) Handles TabPage21.Paint
        OngletCours = 21
    End Sub
    Private Sub Grid2_MouseDown(Sender As Object, e As MouseEventArgs) Handles Grid2.MouseDown
        Dim i As Integer
        Dim j As Integer
        Dim ii As Integer
        '
        Dim m As Integer
        '
        Dim a As String
        Dim b As String
        Dim tbl() As String


        ' paramètre permettant de gérer les CTRL V, C, X de la courbes expression des voicing symphoniques
        ' ************************************************************************************************
        OngletCours_Edition = N_PisteAcc
        '
        TGrille2 = TGrilleCours.Grid2 ' cette instruction doit rester au début de Grid2_MouseDown
        '
        Grid2.Refresh()
        i = Grid2.MouseRow
        j = Grid2.MouseCol
        '
        ' Mise a jour du tableau des modes Tabtons sur un clic dans Grid2 àtravers combobox1 et combobox2
        ' ************************************************************************************************
        a = Trim(TableEventH(j, 1, 1).Tonalité)
        If a <> "" Then
            tbl = a.Split
            If tbl(1) = "Maj" Then
                a = " " + tbl(0) + " Major"
                ii = ComboBox1.Items.IndexOf(a)
                ComboBox1.SelectedIndex = ii
            Else
                a = " " + tbl(0) + " Minor"
                ii = ComboBox2.Items.IndexOf(a)
                ComboBox1.SelectedIndex = ii
            End If
        End If
        '
        ' Ecrire les notes de l'accord dans la textbox en haut à droite dans barre outil de tabtons
        ' *****************************************************************************************
        Dim AA As String = Trim(Grid2.Cell(1, j).Text)
        If Trim(AA) <> "" Then
            Dim tbl2() As String = AA.Split("/") ' Trim(ComboBox1.Text).Split()
            Dim tbl1() As String = tbl2(0).Split()
            Dim bb As String


            If Len(tbl1(0)) > 1 Then
                bb = Mid(tbl1(0), 2, 1)
                If Trim(bb) = "b" Then
                    TextBox1.Text = Det_NotesAccord3(Trim(tbl2(0)), "b")
                Else
                    TextBox1.Text = Det_NotesAccord3(Trim(tbl2(0)), "#")
                End If
            Else
                TextBox1.Text = Det_NotesAccord3(Trim(tbl2(0)), "#")
            End If
        End If


        If i >= 0 And j >= 0 Then ' pour prévenir e bug où MouseRow ou MouseCol restitue -1 
            '
            If j <= nbMesures And Grid2.Selection.LastCol <= nbMesures Then
                ' 
                ' Affichage Accord(s) dans label 31 : Grande étiquette verte dans la partie droite
                ' ********************************************************************************
                If i = 1 And Trim(Trim(Grid2.Cell(i, j).Text) <> "") Then
                    Label35.Text = Trim(Grid2.Cell(i, j).Text)
                    Label31.Text = j.ToString   '
                End If

                MesureCourante = j ' utilisé par JouerSourcexxx

                ' Mise à jour tonalité courante de l'accord sur lequel on clique (utile entre autre pour Onglet Modulation)
                ' *********************************************************************************************************
                'Maj_TonalitéModulation(MesureCourante, 1, 1)

                ' Sélection de la ligne de Grid1 et de la colonne de Grid6 correspondant à la colonne de Grid2
                ' ********************************************************************************************
                '
                If Trim(TableEventH(MesureCourante, 1, 1).Accord) <> "" Then
                    Dim mesu As String = MesureCourante.ToString + "." + "1" + "." + "1"
                    i = Det_LigneMesureGrid1(Trim(mesu))
                    If i <> -1 Then
                        Grid1.Range(i, 0, i, Grid1.Cols - 1).SelectCells()
                    End If
                    j = Det_ColonneMesureGrid6(Trim(mesu))
                    If j <> -1 Then
                        Grid6.Range(0, j, Grid6.Rows - 1, j).SelectCells()
                    End If
                End If
                '
                ' déplacement grid3 selon le clic sur Grid2
                ' *****************************************
                Grid3.LeftCol = ((Grid2.LeftCol - 1) * nbColonnesGrid3ParMesure) + 1

                '
                ' Mise à jour Tables pour Onglet Substitution
                ' *******************************************
                m = MesureCourante
                If e.Button() = Windows.Forms.MouseButtons.Left And Trim(TableEventH(m, 1, 1).Accord) <> "" And
                         Not ((My.Computer.Keyboard.CtrlKeyDown) And (My.Computer.Keyboard.AltKeyDown)) Then ' TabControl4.SelectedIndex = 2 --> onglet Substitution

                    Dim TMaj, TMin As String

                    tbl = Split(Trim(TableEventH(m, 1, 1).Tonalité))
                    TMaj = Trim(tbl(0))
                    tbl = Det_RelativeMineure(Trim(TableEventH(m, 1, 1).Tonalité)).Split
                    TMin = tbl(0)
                    Maj_TableGlobalAccSubsti(TMaj, TMin, TMaj)
                    '
                    Maj_Substitutions(m, 1, 1)
                End If
                '
                ' Jouer l'accord
                ' **************
                m = j
                b = TableEventH(m, 1, 1).Tonalité
                tbl = Split(b)
                Clef = Det_Clef(tbl(0))
                '
                If e.Button() = Windows.Forms.MouseButtons.Left And My.Computer.Keyboard.CtrlKeyDown And Not (My.Computer.Keyboard.AltKeyDown) And i <> 0 Then 'And Trim(Grid2.Cell(i, j).Text <> ""
                    If ComboMidiOut.Items.Count > 0 Then
                        If EnChargement = False Then
                            If AccordAEtéJoué = False Then
                                a = Trim(Det_PosPremierAccordMesure(MesureCourante))
                                JouerAcc(a) 'JouerAccord123(Trim(a))
                            End If
                        End If
                    End If
                    '
                End If
                DerGridCliquée = GridCours.Grid2

                ' Affichage notes accords sur clavier sans jouer l'accord
                ' *******************************************************
                If e.Button() = MouseButtons.Middle And Not (My.Computer.Keyboard.CtrlKeyDown) And Not (My.Computer.Keyboard.AltKeyDown) _
                                                    And Not (My.Computer.Keyboard.ShiftKeyDown) Then
                    a = Det_PosPremierAccordMesure(j)
                    AfficherAccordRapport(Trim(a))
                End If

                '
                ' Mise à jour des locators
                ' ************************
                If e.Button() = (MouseButtons.Left) And (My.Computer.Keyboard.AltKeyDown) Then
                    ' 
                    i = Grid2.MouseCol
                    '
                    ' Mise à jour des locators
                    ' ************************
                    If e.Button() = (MouseButtons.Left) And (My.Computer.Keyboard.AltKeyDown) Then
                        ' 
                        i = Grid2.MouseCol
                        '
                        If EnChargement = False Then
                            'If i <= Terme.Value Then
                            Transport.Début.Value = i
                            If Transport.Début.Value > Transport.Terme.Value Then
                                Transport.Terme.Value = Transport.Début.Value
                            End If
                            'End If
                        End If
                        'End If
                    End If
                End If
                '
                If (e.Button() = MouseButtons.Right) And (My.Computer.Keyboard.AltKeyDown) Then
                    i = Grid2.MouseCol
                    '
                    If (e.Button() = MouseButtons.Right) And (My.Computer.Keyboard.AltKeyDown) Then
                        i = Grid2.MouseCol
                        '
                        If EnChargement = False Then
                            If i >= Début.Value Then
                                Transport.Terme.Value = i
                                If Transport.Début.Value > Transport.Terme.Value Then
                                    Transport.Terme.Value = Transport.Début.Value
                                End If
                            End If
                        End If
                    End If
                    '
                End If
                '
            End If
        End If
    End Sub
    Private Sub Maj_Substitutions(m, t, ct)
        Dim accord As String = Trim(TableEventH(m, t, ct).Accord)
        Dim degré As String = Det_DegréRomain2(TableEventH(m, t, ct).Degré)
        Dim gamme As String = TableEventH(m, t, ct).Gamme
        Dim mode As String = TableEventH(m, t, ct).Mode
        Dim tonalité As String = TableEventH(m, t, ct).Tonalité
        Dim position As String = TableEventH(m, t, ct).Position
        Dim TypAcc As Integer
        Dim a As String
        Dim deg As Integer = TableEventH(m, t, ct).Degré
        Dim tbl() As String
        Dim tbl1() As String
        Dim tbl2() As String
        Dim accords(0 To 3) As String
        Dim i As Integer

        ' effacer l'accord actuel
        ' **********************
        For i = 0 To 3
            LabSubsti.Item(i).Text = "---"
        Next
        Label73.Text = ""
        Label67.Text = accord
        '
        ' Vérifier que l'accord considéré est un accord de 3 notets oude 4 note avec 7e (sinon, la substitution n'est pas offerte)
        ' *************************************************************************************************************************

        If Verif_PresAcc(accord) Then

            a = "- " + "Position  " + position + Chr(13) _
            + "- " + "Tonalité  " + tonalité + " Mode : " + mode + Chr(13) _
            + "- " + "Accord   " + accord + " Degré : " + degré + Chr(13) _
            + "- " + "Gamme  " + gamme

            tbl = Det_NotesAccord(Trim(accord)).Split("-")
            TypAcc = tbl.Count ' nombre de notes dans l'accord (3 ou 4)

            ' Calcul Substitution par tonalité mineure
            ' ****************************************
            ' Principe : pour un accord de C Maj on va chercher le même dégré dans la tonalité de C Mineur naturel : par exemple E m dans C Maj peut être substituer par Eb dans C mineur naturel
            tbl = mode.Split()
            If tbl(1) = "Maj" Then
                tbl = Trim(tonalité).Split()
                a = Trim(tbl(0)) + " MinH"   ' Si La tonalité est C Maj, mais on cherche la relative majeur de C Min naturel pour la subtitution par tonalité mineure ceci afin afin de mettre à jour les caractérisitques de l'ccord dans TableEventh
                EventhSubsti(0).Tonalité = Det_RelativeMajeure(a)
                EventhSubsti(0).Mode = Trim(EventhSubsti(0).Tonalité)          ' comme les accords de C MinNaturel sont les mêmes que de Eb --> Mode Eb Maj pour simplifier
                '
                ' Changement du signe (si nécessaire) de la note en fonction de la nouvelle tonalité

                LabSubsti.Item(0).Text = Retab_Note_Tona(EventhSubsti(0).Tonalité, TableGlobalAccSubsti(TypAcc - 3, 3, deg))

                'tbl = EventhSubsti(0).Tonalité.Split()
                'Dim clf As String = Det_Clef(Trim(tbl(0)))                    ' calcul de la clef de la note de la tonalité
                'tbl3 = TableGlobalAccSubsti(TypAcc - 3, 3, deg).Split()       ' décomposition de l'accord note-chiffrage
                '
                'If clf = "#" Then
                'tbl3(0) = Trad_BemDies_Maj(tbl3(0))
                'Else
                'tbl3(0) = Trad_DiesBem_Maj(tbl3(0))
                'End If
                'LabSubsti.Item(0).Text = Join(tbl3, " ")
                '
                ' Ici --> deg du nouvel accord = deg d'ancien accord
                EventhSubsti(0).Gamme = Trim(gamme)
                EventhSubsti(0).Accord = Trim(LabSubsti.Item(0).Text)
                '
                EventhSubsti(0).Degré = TradDegré_MinNMaj(deg)

                ' Calcul Substitution diatonique
                ' ******************************
                ' 
                tbl1 = (Ind_SubstiDiat(TableEventH(m, t, ct).Degré)).Split() ' degré des accord de substitution
                tbl2 = Det_NotesAccord(Trim(accord)).Split("-")
                'Dim NbNotes As Integer = tbl2.Count ' nombre de notes dans l'accord
                Dim IndMode As Integer = Ind_Modes(Trim(TableEventH(m, t, ct).Mode))
                LabSubsti.Item(1).Text = TableGlobalAccSubsti(TypAcc - 3, IndMode, tbl1(0))
                LabSubsti.Item(2).Text = TableGlobalAccSubsti(TypAcc - 3, IndMode, tbl1(1))
                '
                EventhSubsti(1).Tonalité = Trim(tonalité)
                EventhSubsti(1).Mode = Trim(mode)
                EventhSubsti(1).Degré = tbl1(0) 'deg '
                EventhSubsti(1).Gamme = Trim(gamme)
                EventhSubsti(1).Accord = Trim(LabSubsti.Item(1).Text)
                '
                EventhSubsti(2).Tonalité = Trim(tonalité)
                EventhSubsti(2).Mode = Trim(mode)
                EventhSubsti(2).Degré = tbl1(1) 'deg '
                EventhSubsti(2).Gamme = Trim(gamme)
                EventhSubsti(2).Accord = Trim(LabSubsti.Item(2).Text)           '

                ' Calcul Substitution par Ve degré de tonique
                ' *******************************************
                ' Ici la tonique de l'accord sert de tonique au mode dont on va cherche le Ve degré, Par exemple accord est C, on va chercher le Ve degré de la tonatilé de C = G
                tbl = accord.Split()
                a = Retab_Mode(Trim(tbl(0)), "Maj") ' construction de la tonalité : la tonalité se construit ici à partir de la tonique de l'accord + "Maj"(tr'
                EventhSubsti(3).Tonalité = Trim(Trim(a) + " Maj")
                EventhSubsti(3).Mode = Trim(Trim(a) + " Maj")
                EventhSubsti(3).Degré = 4 ' on va chercher le 5e degré de la tonalité construite
                EventhSubsti(3).Gamme = Trim(gamme)
                '
                a = NoteInterval(Trim(a), "5")
                a = UCaseBémol(a)
                If TypAcc = 4 Then
                    a = a + " 7"
                End If
                LabSubsti.Item(3).Text = Trim(a)
                EventhSubsti(3).Accord = Trim(a)
            Else
                If LangueIHM = "fr" Then
                    Label73.Text = "L'accord à substituer doit appartenir à un mode Majeur."
                Else
                    Label73.Text = "The chord to be substituted must belong to a Major mode."
                End If
                LabSubsti.Item(0).Text = "N/A"
            End If
        Else
            If LangueIHM = "fr" Then
                Label73.Text = "Seuls les accords de 3 notes et 4 notes avec 7e sont pris en compte pour une substitution."
            Else
                Label73.Text = "Only 3-notes and 4-notes chords with 7ths are considered for substitution."
            End If
            For i = 0 To 3
                LabSubsti.Item(i).Text = "N/A"
            Next
        End If
    End Sub
    Function Retab_Note_Tona(Tona As String, Acc As String) As String
        Dim a As String
        Dim tbl1() As String
        Dim tbl2() As String

        tbl1 = Tona.Split()
        Dim clf As String = Det_Clef(Trim(tbl1(0)))

        tbl2 = Acc.Split()

        If clf = "#" Then
            tbl2(0) = Trad_BemDies_Maj(tbl2(0))
        Else
            tbl2(0) = Trad_DiesBem_Maj(tbl2(0))
        End If
        a = Join(tbl2, " ")
        Return a
    End Function
    Function Retab_Mode(NoteTonique As String, ChiffMode As String) As String
        Dim a As String = NoteTonique
        Select Case ChiffMode
            Case "Maj"
                Select Case NoteTonique
                    Case "Db"
                        a = "C#"
                    Case "Gb"
                        a = "F#"
                    Case "A#"
                        a = "Bb"
                    Case "D#"
                        a = "Eb"
                    Case "G#"
                        a = "Ab"

                End Select
            Case "MinH", "MinM", "MinN"
                Select Case NoteTonique
                    Case "Gb"
                        a = "F#"
                    Case "Ab"
                        a = "G#"
                    Case "Eb"
                        a = "D#"
                    Case "Bb"
                        a = "A#"
                End Select
        End Select
        Return a
    End Function
    Function TradDegré_MinNMaj(degMinN As Integer) ' exemple traduction d'un degré MIN en dgré de sa relative majeur (C m --> Eb)
        Dim degMaj As Integer = 0
        Select Case degMinN
            Case 0
                degMaj = 5
            Case 1
                degMaj = 6
            Case 2
                degMaj = 0
            Case 3
                degMaj = 1
            Case 4
                degMaj = 2
            Case 5
                degMaj = 3
            Case 6
                degMaj = 4
        End Select
        Return degMaj
    End Function
    Function Ind_SubstiDiat(degré As Integer) As String
        Select Case degré
            Case 0 ' I
                Return "5 2" ' C --> VI et III
            Case 1 ' II
                Return "6 3" ' D m --> VII et IV
            Case 2 ' III
                Return "0 4" ' E m --> I et V
            Case 3 ' IV
                Return "1 5" ' F --> II et VI
            Case 4 ' V
                Return "2 6" ' G --> II et VII
            Case 5 ' VI
                Return "3 0" ' A m --> IV et I
            Case 6 ' VII
                Return "4 1" ' Bmb5 --> V et II
            Case Else
                Return "5 2" ' C --> VI et III
        End Select
    End Function
    Function Ind_Modes(Mode As String) As Integer
        Dim tbl() As String = Mode.Split()

        Select Case tbl(1)
            Case "Maj"
                Return 0
            Case "MinH"
                Return 1
            Case "MinM"
                Return 2
            Case Else
                Return 0
        End Select

    End Function

    Private Function Verif_PresAcc(Acc As String) As Boolean
        Dim boo As Boolean = False
        ' TableGlobalAccSubsti(i,j,k)
        ' ***************************
        ' i=type d'accord 0 = 3note, 1=4notes avec 7e,2=4 notes avec 9e,3=4 notes avec 11e
        ' j=type de gamme à=Majeure, 1=Minh et 2 = MInM
        ' k = liste de 7 accords pour chaque couple (i,j)

        ' Maj
        ' ***
        For i = 0 To 1
            For j = 0 To 6
                If Trim(Acc) = Trim(TableGlobalAccSubsti(i, 0, j)) Then boo = True
            Next j
        Next i
        '
        ' MinH
        ' ****
        If Not boo Then
            For i = 0 To 1

                For j = 0 To 6
                    If Trim(Acc) = Trim(TableGlobalAccSubsti(i, 1, j)) Then boo = True
                Next j
            Next i
        End If
        '
        ' MinM
        ' ****
        If Not boo Then
            For i = 0 To 1
                For j = 0 To 6
                    If Trim(Acc) = Trim(TableGlobalAccSubsti(i, 2, j)) Then boo = True
                Next j
            Next i
        End If
        ' MinN
        ' ****
        If Not boo Then
            For i = 0 To 1
                For j = 0 To 6
                    If Trim(Acc) = Trim(TableGlobalAccSubsti(i, 3, j)) Then boo = True
                Next j
            Next i
        End If
        Return boo
    End Function
    Private Sub Grid2_MouseUp(Sender As Object, e As MouseEventArgs) Handles Grid2.MouseUp
        Dim i, j As Integer
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer
        Dim a As String

        i = Grid2.MouseRow 'Grid2.ActiveCell.Row
        j = Grid2.MouseCol 'Grid2.ActiveCell.Col

        ' Ecriture accord de MODES
        ' ************************
        If My.Computer.Keyboard.AltKeyDown Then ECR_MODES(TGridDest.Grid3)

        If Grid2.MouseCol <= nbMesures And Grid2.Selection.LastCol <= nbMesures And (i >= 0 And j >= 0) Then ' (i >= 0 And j >= 0) pour prévenir le cas où  Grid2.MouseRow=-1 ou  Grid2.MouseCol=-1
            If Grid2.Selection.LastCol <= nbMesures Then
                '
                ' Arrêter jeu Accord
                ' ******************
                If AccordAEtéJoué = True Then
                    CouperJouerAccord()
                    AccordAEtéJoué = False
                End If
                '
                RAZ_AffNoteAcc() ' RAZ des notes indiquée sur le clavier du piano
                '
                ' Préparation de la zone à traiter : une seule cellule ou une sélection de cellules
                ' *********************************************************************************
                'i = Grid2.MouseRow 'Grid2.ActiveCell.Row
                'j = Grid2.MouseCol 'Grid2.ActiveCell.Col
                '
                If Grid2.Selection.FirstCol = Grid2.Selection.LastCol Then
                    Grid2.Range(i, j, i, j).SelectCells()
                End If

                ' affichage des caractéristiques de l'accord sélectionné dans les réglages à droite dans 2e onglet (son)
                ' *****************************************************************************************************  
                m = Val(Grid2.ActiveCell.Col)
                t = 1
                ct = 1
                Maj_InfoAccord(m, t, ct)
                '
                ' Afficher le menu contextuel du réglage des chiffrages d'accords complexes
                ' *************************************************************************
                If (e.Button() = Windows.Forms.MouseButtons.Right) Then '
                    m = Grid2.ActiveCell.Col
                    SauveMouseColGrid2 = m
                    '
                    a = Det_AccordDsMesure(m) ' lecture de l'accord dans la 1ere mesure de la sélection
                    '
                    If j < Grid2.Selection.FirstCol Or j > Grid2.Selection.LastCol Then
                        Grid2.Range(i, j, i, j).SelectCells() ' permet la sélection de 1 cellule sur un clic droit
                    End If
                    '
                    If Grid2.Selection.FirstCol = Grid2.Selection.LastCol Then
                        If Trim(Grid2.Cell(1, m).Text) <> "" Then ' sélection de 1 seule cellule pleine : pour ajouter une liste d'accords complexes dans le menu contextuel
                            ContextMenu3Accord.Visible = True
                            MenuContextGrid2Grid3(m, t, ct)
                            ToolStripSeparator7.Visible = True
                            Transpo.Visible = True
                            ToolStripSeparator6.Visible = True
                            Flot_Couper.Enabled = True
                            Flot_Copier.Enabled = True
                            Flot_Coller.Enabled = True
                        Else
                            ContextMenu3Accord.Visible = False ' sélection de 1 seule cellule vide pour proposer  Coller dans le menu contextuel
                            ToolStripSeparator7.Visible = False
                            Transpo.Visible = False
                            ToolStripSeparator6.Visible = False
                            Flot_Couper.Enabled = False
                            Flot_Copier.Enabled = False
                            Flot_Coller.Enabled = True
                        End If
                    Else
                        Dim jj As Integer
                        Dim b As Boolean = False
                        For jj = Grid2.Selection.FirstCol To Grid2.Selection.LastCol ' recherche de au moins 1 cellule pleine dans la sélection
                            If Grid2.Cell(1, jj).Text <> "" Then
                                b = True
                                Exit For
                            End If
                        Next
                        If b Then
                            ContextMenu3Accord.Visible = False ' sélection de plusieurs cellules dont 1 au moins est pleine
                            ToolStripSeparator7.Visible = False
                            Transpo.Visible = True
                            ToolStripSeparator6.Visible = True
                            Flot_Couper.Enabled = True
                            Flot_Copier.Enabled = True
                            Flot_Coller.Enabled = True
                        Else
                            ContextMenu3Accord.Visible = False ' sélection de plusieurs cellules vides
                            ToolStripSeparator7.Visible = False
                            Transpo.Visible = False
                            ToolStripSeparator6.Visible = False
                            Flot_Couper.Enabled = False
                            Flot_Copier.Enabled = False
                            Flot_Coller.Enabled = True
                        End If
                    End If
                    '
                    Tonacours = TableEventH(m, t, ct).Tonalité
                    DerGridCliquée = GridCours.Grid2
                    ContextMenuStrip3.Show(CType(Sender, Object), e.Location)
                    If m = 1 Then Flot_Couper.Enabled = False
                End If
            End If
        End If


    End Sub
    Private Sub Maj_InfoAccord(m, t, ct)
        Dim accord As String = Trim(TableEventH(m, t, ct).Accord)
        Dim degré As String = Det_DegréRomain2(TableEventH(m, t, ct).Degré)
        Dim gamme As String = TableEventH(m, t, ct).Gamme
        Dim mode As String = TableEventH(m, t, ct).Mode
        Dim tonalité As String = TableEventH(m, t, ct).Tonalité
        Dim position As String = TableEventH(m, t, ct).Position
        '
        Dim a As String = "- " + "Position : " + position + Chr(13) _
        + "- " + "Tonalité : " + tonalité + " Mode : " + mode + Chr(13) _
        + "- " + "Accord  : " + accord + " Degré : " + degré + Chr(13) _
        + "- " + "Gamme : " + Trad_GammeEn_D_Maj(gamme) ' les gammes sont toujours exprimées en #

        RichTextBox1.Text = Trim(a)
    End Sub
    Private Sub Grid4_MouseDown(Sender As Object, e As MouseEventArgs) Handles Grid4.MouseDown
        Dim i As Integer '= Grid4.ActiveCell.Row 'Grid4.MouseRow
        Dim j As Integer '= Grid4.ActiveCell.Col 'Grid4.MouseCol
        '
        Dim a As String
        '
        ' paramètre permettant de gérer les CTRL V, C, X de la courbes expression des voicing symphoniques
        ' ************************************************************************************************
        SousCas_OngletCours_Edition = 0

        Grid4.Refresh()
        i = Grid4.MouseRow
        j = Grid4.MouseCol
        '
        a = Trim(Grid4.Cell(i, 1).Text)

        If e.Button() = MouseButtons.Left And (My.Computer.Keyboard.AltKeyDown) And (Trim(a) <> "") And i <> 0 Then
            Grid4.DoDragDrop(a, DragDropEffects.Copy Or DragDropEffects.Move)
            Grid1.AllowDrop = True
        End If
        '
        If My.Computer.Keyboard.CtrlKeyDown And Trim(Grid4.Cell(i, j).Text) <> "" And i <> 0 Then
            'JouerNoteG4(i, j)
            If GammeAEtéJouée = False Then
                If e.Button() = Windows.Forms.MouseButtons.Left Then
                    SENSGamme = "Monter"
                Else
                    SENSGamme = "Descendre"
                End If
                'Création_Schedule2(CréationFichierScheduleGamme("FichierGamme", Trim(Grid1.Cell(i, 3).Text), "", i))
                GammeAEtéJouée = True
                JouerGamme(Trim(a), Grid1.ActiveCell.Row)
            End If
        End If
    End Sub
    Private Sub Grid4_MouseClick(sender As Object, e As MouseEventArgs) Handles Grid4.MouseClick

    End Sub
    Private Sub JouerNoteG4(Ligne As Integer, Colonne As Integer)
        If Not (BGW.IsBusy) Then
            Dim NotesAJouer As String
            GammeAEtéJouée = True
            EnvAccord = False
            NotesAJouer = NoteRechercheG4(Ligne, Colonne)
            tbl_NotesOnG = Split(NotesAJouer)
            '
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            '
            tbl_NotesOffG(0) = 0
            '

            BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub
    Private Sub JouerNoteDétails(Ligne As Integer, Colonne As Integer)
        If Not (BGW.IsBusy) Then
            Dim NotesAJouer As String
            GammeAEtéJouée = True
            EnvAccord = False
            NotesAJouer = NoteRechercheDétails(Ligne, Colonne)
            tbl_NotesOnG = Split(NotesAJouer)
            '
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            '
            tbl_NotesOffG(0) = 0
            '
            BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub
    Private Sub Button20_Click_1(sender As Object, e As EventArgs) Handles Button20.Click

        ' affichage simple    : 2
        ' affichage réglages  : 1
        ' affichage extension : 0
        Dim h, w As Integer
        Dim s As New Size


        NomduSon.Visible = False
        FlagMode = 0 ' passer en mode extension
        Grid1.Size = New Size(Grid1Largeur, 477)
        '
        s.Height = Panel11.Height
        Panel11.Size = New Size(Grid1.Width - 175, s.Height) ' panneau du piano
        '
        Me.Width = 1417 ' 1595 ' 1400
        Me.Height = 715 ' 727
        SplitContainer2.SplitterDistance = 818 ' 780
        ' ****************************
        ' ****************************
        PanelBoutons.Visible = False
        '*****************************
        ' ****************************
        '
        w = LonBarresBleuRouge ' 739
        h = EpaisBarresBleuRouge
        Label32.Size = New Size(w, h)
        Label33.Size = Label32.Size
        '
        SplitContainer2.Panel2.Visible = True
        Panel10.Visible = False
        '
        ButtModes.Visible = True
        '
        Position_Transport()
    End Sub

    Sub Vue_Etendue()

        Dim s As New Size

        ' Lignes rouge et bleu (sélection dans Grid1)
        w = LonBarresBleuRouge - 365
        h = EpaisBarresBleuRouge
        Label32.Size = New Size(w, h)
        Label33.Size = Label32.Size
        ' Piano
        s.Height = Panel11.Height ' Panel11 : panneau du clavier
        Panel11.Size = New Size(Me.Width - Grid4.Width, s.Height) ' panneau du piano
        ' Largeur Grid1
        Grid1.Size = New Size(470, Grid1.Size.Width) ' 470
        ' Largeur Appli
        Me.Width = 1332 '  Me.Width = 1320
        'Splitcontainers
        SplitContainer1.SplitterDistance = 830
        SplitContainer2.SplitterDistance = 500
        ' Boutons pour vue Harmo
        PanelBoutons.Visible = False
        ButtModes.Visible = False
        '
        ' Barre de transport à podition initiale
        Position_Transport()
    End Sub
    Sub Vue_Réduite()
        '
        Dim s As New Size

        Panel10.Visible = True
        ButtModes.Visible = False
        '
        w = LonBarresBleuRouge - 365
        h = EpaisBarresBleuRouge
        Label32.Size = New Size(w, h)
        Label33.Size = Label32.Size
        '
        ' Largeur de Grid1
        Grid1.Size = New Size(470, Grid1.Size.Height)
        ' Largeur Appli
        Me.Width = 1320
        Grid1.Size = New Size(470, 430)
        SplitContainer2.IsSplitterFixed = False

        SplitContainer1.SplitterDistance = 560
        SplitContainer2.SplitterDistance = 470
        '
        '
        ' Boutons pour vue Harmo
        PanelBoutons.Visible = False
        ButtModes.Visible = False

        Dim p As New Point(0, 0)
        s.Height = Panel11.Height
        Panel11.Location = p
        Panel11.Size = New Size(Grid1.Width + TabControl3.Width + 10, s.Height) ' panneau du piano
        '
        ' Barre de transport à podition initiale
        Position_Transport()
    End Sub

    Sub Vue_Harmo()
        Dim s As New Size
        Dim p As New Point(0, 0)
        '
        ' Largeur grid1
        Grid1.Size = New Size(835, Grid1.Size.Height)
        ' Largeur Appli
        Me.Width = 1450
        ButtModes.Visible = True

        SplitContainer2.IsSplitterFixed = False
        '
        w = LonBarresBleuRouge
        h = EpaisBarresBleuRouge
        Label32.Size = New Size(w, h)
        Label33.Size = Label32.Size
        '
        SplitContainer1.SplitterDistance = 580
        SplitContainer2.SplitterDistance = 835
        '
        s.Height = Panel11.Height
        Panel11.Location = p
        Panel11.Size = New Size(Grid1.Width + TabControl3.Width + 10, s.Height) ' panneau du piano
        '
        ' Barre de transport à podition initiale
        Position_Transport()
    End Sub
    Private Sub Button23_Click_2(sender As Object, e As EventArgs) Handles Button23.Click
        Vue_Réduite()
    End Sub

    Private Sub Maj_FlagMode1() ' procédure permettant de charger l'application sans aucune extension non utilisée
        Dim s As New Size
        Dim h, w As Integer
        FlagMode = 2 ' à l'init on pass toujours en mode simple


        w = LonBarresBleuRouge
        h = EpaisBarresBleuRouge
        Label32.Size = New Size(w, h)
        Label33.Size = Label32.Size
        Grid1.Size = New Size(Grid1Largeur, 477)
        Me.Size = New Size(1010, hauteurApp)
        Panel10.Visible = False
        SplitContainer2.IsSplitterFixed = False
        SplitContainer2.SplitterDistance = 415 ' 402     SplitGrid2
        SplitContainer2.IsSplitterFixed = True
        '
        SplitContainer2.Panel2.Visible = False
        'SplitContainer2.IsSplitterFixed = True
        SplitContainer2.Panel2.Visible = True
        PanelBoutons.Visible = False
        '
        s.Height = Panel11.Height
        Panel11.Size = New Size(415, s.Height)
    End Sub
    Private Sub Maj_FlagMode(FlagM) ' procédure permettant de charger l'application avec l'extension utilisée dans la précédente session 

        ' affichage simple    : 2
        ' affichage réglages  : 1
        ' affichage extension : 0
        Dim h, w As Integer
        Dim s As New Size



        Select Case FlagM
            Case 0 ' extension

                Me.Width = 1417 '1370 ' 1595 ' 1400
                Me.Height = hauteurApp
                SplitContainer2.SplitterDistance = 818 '780 ' 780
                PanelBoutons.Visible = True

                s.Height = Panel11.Height
                Panel11.Size = New Size(820, s.Height) ' panneau du piano

                Grid1.Size = New Size(Grid1Largeur, 477) ' New Size(777, 477)
                '
                w = LonBarresBleuRouge ' 737
                h = EpaisBarresBleuRouge
                Label32.Size = New Size(w, h)
                Label33.Size = Label32.Size
                Panel10.Visible = False
                PanelBoutons.Visible = True
                SplitContainer2.Panel2.Visible = True
            Case 1 ' Réglages
                '
                FlagMode = 1 ' Passage mode réglage' 
                Me.Size = New Size(1320, hauteurApp)

                Panel10.Visible = True
                '
                w = LonBarresBleuRouge - 449
                h = EpaisBarresBleuRouge
                Label32.Size = New Size(w, h)
                Label33.Size = Label32.Size
                Panel10.Visible = True
                PanelBoutons.Visible = False
                SplitContainer2.Panel2.Visible = True
                '
                SplitContainer2.IsSplitterFixed = False
                SplitContainer2.SplitterDistance = 475
                '
                Grid1.Size = New Size(472, 477)
                '
                Dim p As New Point(0, 0)
                s.Height = Panel11.Height
                Panel11.Location = p
                Panel11.Size = New Size(Grid1.Width + TabControl3.Width + 15, s.Height) ' panneau du piano
                Panel11.HorizontalScroll.Value = 0
                '
                Button30.Visible = False
            Case 2, 3 ' simple
                Grid1.Size = New Size(Grid1Largeur, 477)
                Me.Size = New Size(1010, hauteurApp)
                Panel10.Visible = False
                PanelBoutons.Visible = False
                SplitContainer2.IsSplitterFixed = False
                SplitContainer2.SplitterDistance = 415 ' 402     SplitGrid2
                SplitContainer2.IsSplitterFixed = True
                '
                SplitContainer2.Panel2.Visible = False
                SplitContainer2.Panel2.Visible = True
                '
                Label32.Size = New Size(LonBarresBleuRouge, EpaisBarresBleuRouge)
                Label33.Size = Label32.Size
                '
                s.Height = Panel11.Height
                Panel11.Size = New Size(415, s.Height)

        End Select
    End Sub
    Private Sub Button7_Click_3(sender As Object, e As EventArgs) Handles Button7.Click
        If CheckMaj.Checked = True Or CheckMaj.Checked = True Or CheckMinM.Checked = True Or CheckMajH.Checked = True Or CheckPentaMin.Checked = True Or CheckBlues.Checked = True Then
            CheckMaj.Checked = False
            CheckMinH.Checked = False
            CheckMinM.Checked = False
            CheckMajH.Checked = False
            CheckPentaMin.Checked = False
            CheckBlues.Checked = False
        Else
            CheckMaj.Checked = True
            CheckMinH.Checked = True
            CheckMinM.Checked = True
            CheckMajH.Checked = True
            CheckPentaMin.Checked = True
            CheckBlues.Checked = True
        End If
    End Sub

    Private Sub Button25_Click(sender As Object, e As EventArgs)
        '
        ' Voici 
        ' Problème au 19/08/17 : on ne récupère jamais le chemin du fichier double cliqué

        ' 1ere méthode
        ' ************
        Dim tbl1 As String() = Environment.GetCommandLineArgs()
        If tbl1.Count > 0 Then
            MessageBox.Show("Méthode 1 index 0 : " + tbl1(0)) ' index = 0 --> affichage du chemin de l'application
        End If
        If tbl1.Count > 1 Then
            MessageBox.Show("Méthode 1 : index 1 " + tbl1(1)) ' index = 1 --> affichage Argument ligne de commande
        End If

        ' 2e méthode
        ' **********
        Dim tbl2 As String() = My.Application.CommandLineArgs.ToArray '
        If tbl2.Count > 0 Then
            MessageBox.Show("Méthode 2 : index 0 : " + tbl2(0)) ' index = 0 --> affichage Argument ligne de commande
        End If
        If tbl2.Count > 1 Then
            MessageBox.Show("Méthode 2 index 1 : " + tbl2(1)) ' non présent
        End If

        ' 3e méthode
        ' **********
        Dim tbl3() As String = Command().Split(" ")
        If tbl3.Count > 0 Then
            MessageBox.Show("Méthode 3 index 0 : " + tbl3(0)) ' index = 0 --> affichage Argument ligne de commande
        End If
        If tbl3.Count > 1 Then
            MessageBox.Show("Méthode 3 : index 1 " + tbl3(1)) ' non présent
        End If

        ' 4e Méthode
        ' **********  
        Dim commandLineArgs = New List(Of String)()
        commandLineArgs = Environment.GetCommandLineArgs().ToList()
        If commandLineArgs.Count > 0 Then
            MessageBox.Show("Méthode 4 : index 0 " + commandLineArgs.Item(0)) ' affichage du chemin de l'application
        End If
        If commandLineArgs.Count > 1 Then
            MessageBox.Show("Méthode 4 : index 1 " + commandLineArgs.Item(1)) ' affichage Argument ligne de commande
        End If

        ' 5e Méthode
        ' **********
        Dim aa As AppDomainSetup = AppDomain.CurrentDomain.SetupInformation
        If Not (aa.ActivationArguments Is Nothing) Then
            If (aa.ActivationArguments.ActivationData.Count > 1) Then
                MessageBox.Show("Méthode 5 : index 0 = " + aa.ActivationArguments.ActivationData(0)) ' non présent
                MessageBox.Show("Méthode 5 : index 1 = " + aa.ActivationArguments.ActivationData(1)) ' non présent
                Ouvrir2()
            End If
        End If

    End Sub



    Private Sub Button18_Click(sender As Object, e As EventArgs) Handles ButtAccords.Click
        Maj_Extension_Accord()
    End Sub
    Private Sub Maj_Extension_Accord()
        Dim ligne As Integer

        Grid1.AutoRedraw = False
        Etat_Extension = Ty_Extension.Accords
        '
        ligne = 1
        Maj_TabNotes("#") ' tous les calculs se font ici en #
        '
        Do
            Extension_Accord(ligne)
            ligne = ligne + 1
        Loop Until Trim(Grid1.Cell(ligne, 4).Text) = "" Or ligne = nbLignesGrid1 - 1

        Grid1.AutoRedraw = True
        Grid1.Refresh()
    End Sub
    Private Sub Extension_Accord(ligne As Integer)
        Dim Accord As String
        Dim SigneClef As String
        Dim tbl() As String
        Dim r As Integer

        If Trim(Grid1.Cell(ligne, 4).Text) <> "" Then
            SauvClef = Clef
            '
            EcritUneFois = True
            RAZ_DétailsEventH(ligne)

            tbl = Split(Grid1.Cell(ligne, 3).Text) ' on va chercher le signe de clef dans la tonalité

            SigneClef = Trim(Det_ClefEn2(tbl(0), tbl(1)))
            '
            ' Affichage des notes de l'accord dans compogrid
            ' **********************************************
            '
            Accord = Trim(Grid1.Cell(ligne, 4).Text)
            Accord = Trad_AccordEn_D(Accord)
            Clef = "#"
            tbl = Split(Det_NotesAccord(Trim(Accord)), "-")
            j = 11
            RAZ_DétailsEventH(ligne)
            Grid1.Cell(ligne, 10).Text = Trim(Grid1.Cell(ligne, 4).Text)
            Grid1.Cell(ligne, 10).BackColor = ButtAccords.BackColor
            Maj_Détails(ligne, "Accord")
            For i = 0 To UBound(tbl)
                Grid1.Cell(ligne, j).Text = LCase(Trim(tbl(i)))
                Grid1.Cell(ligne, j).BackColor = ButtAccords.BackColor
                If SigneClef = "b" Then
                    r = ListNd.IndexOf(tbl(i))
                    If r <> -1 Then ' si r =-1 c'est que la note n'a pas été trouvée et donc qu'elle est déjà en "b"
                        Grid1.Cell(ligne, j).Text = LCase(Trim(ListNb(r)))
                    End If
                End If
                j = j + 1
            Next i
            '
            'Grid1.Cell(ligne, nbColonnesGrid1 - 1).Text = "0"
            ''If CheckBoxTout.Checked Then
            'Grid1.Cell(ligne, nbColonnesGrid1 - 1).Text = "1"
            ''End If
            '
            Clef = SauvClef
        End If
    End Sub
    Private Sub Button19_Click_1(sender As Object, e As EventArgs) Handles ButtTonalités.Click
        Maj_Extension_Tonalité()
    End Sub
    Private Sub Maj_Extension_Tonalité()
        Dim ligne As Integer
        '
        Etat_Extension = Ty_Extension.Tonalités
        Grid1.AutoRedraw = False
        ligne = 1
        Maj_TabNotes("#") ' tous les calculs se font ici en #
        Do
            'a = Trim(Grid1.Cell(ligne, 3).Text)
            Extension_Tonalité(ligne)
            ligne = ligne + 1
        Loop Until Trim(Grid1.Cell(ligne, 3).Text) = "" Or ligne = nbLignesGrid1 - 1
        '
        EcritUneFois = True

        Grid1.AutoRedraw = True
        Grid1.Refresh()
    End Sub

    Private Sub Extension_Tonalité(ligne As Integer)
        Dim Tonalité As String
        Dim SigneClef As String
        Dim tbl() As String
        Dim r As Integer
        Dim i As Integer

        If Trim(Grid1.Cell(ligne, 3).Text) <> "" Then
            '
            SauvClef = Clef
            '
            EcritUneFois = True
            RAZ_DétailsEventH(ligne)
            '
            tbl = Split(Grid1.Cell(ligne, 3).Text) ' on va chercher le signe de clef dans la tonalité

            SigneClef = Trim(Det_ClefEn2(tbl(0), tbl(1)))

            ' RAZ_DétailsEventH(ligne)
            '
            ' Affichage des notes de la tonalité dans compogrid
            ' *************************************************
            Tonalité = Trim(Grid1.Cell(ligne, 3).Text)
            Tonalité = Trad_GammeEn_D(Tonalité)
            Clef = "#"
            tbl = Split(Det_NotesGammes(Trim(Tonalité)), " ")
            j = 11
            Grid1.Cell(ligne, 10).Text = Trim(Grid1.Cell(ligne, 3).Text)
            Grid1.Cell(ligne, 10).BackColor = ButtTonalités.BackColor
            Maj_Détails(ligne, "Tonalité")
            For i = 0 To UBound(tbl)
                Grid1.Cell(ligne, j).Text = LCase(Trim(tbl(i)))
                Grid1.Cell(ligne, j).BackColor = ButtTonalités.BackColor
                If SigneClef = "b" Then
                    r = ListNd.IndexOf(tbl(i))
                    If r <> -1 Then ' si r =-1 c'est que la note n'a pas été trouvée et donc qu'elle est déjà en "b"
                        Grid1.Cell(ligne, j).Text = LCase(Trim(ListNb(r)))
                    End If
                End If
                j = j + 1
            Next i
            '
            Clef = SauvClef
        End If
    End Sub
    Private Sub Maj_DétailsColler(ligne As Integer)
        Dim j As Integer
        'Grid1.Range(ligne, 8, ligne, nbColonnesGrid1 - 2).ClearText()
        'Grid1.Range(ligne, 8, ligne, nbColonnesGrid1 - 2).ClearBackColor()
        For j = 10 To Grid1.Cols - 1
            Grid1.Cell(ligne, j).Text = ""
            Grid1.Cell(ligne, j).BackColor = Color.White
        Next

        Select Case Etat_Extension
            Case Ty_Extension.Tonalités
                Extension_Tonalité(ligne)
            Case Ty_Extension.Accords
                Extension_Accord(ligne)
            Case Ty_Extension.Gammes
                Extension_Gamme(ligne)
            Case Ty_Extension.Modes
                Extension_Mode(ligne)
            Case Else
                ' ne rien faire
        End Select
    End Sub


    Private Sub Maj_DétailsGamme(ligne As Integer)
        Dim Gamme As String
        Dim SigneClef As String
        Dim tbl() As String
        Dim r As Integer
        Dim i, j As Integer
        Dim oo2 As New RechercheG_v2

        Maj_TabNotes("#") ' tous les calculs se font ici en #
        If Trim(Grid1.Cell(ligne, 5).Text) <> "" Then
            tbl = Split(Grid1.Cell(ligne, 5).Text) ' on va chercher le signe de clef dans la gamme

            SigneClef = Trim(Det_ClefEn2(tbl(0), tbl(1)))
            '
            RAZ_DétailsEventH(ligne)
            '
            ' Affichage des notes de la gamme dans compogrid
            ' **********************************************
            Gamme = Trim(Grid1.Cell(ligne, 5).Text)
            Gamme = Trad_GammeEn_D_Maj(Gamme)

            Clef = "#"
            tbl = Split(oo2.Det_NotesGammes3(Trim(Gamme)), "-")
            j = 11
            Grid1.Cell(ligne, 10).Text = Trim(Grid1.Cell(ligne, 5).Text)
            Grid1.Cell(ligne, 10).BackColor = ButtGammes.BackColor
            Maj_Détails(ligne, "Gamme")
            For i = 0 To UBound(tbl)
                Grid1.Cell(ligne, j).BackColor = ButtGammes.BackColor
                Grid1.Cell(ligne, j).Text = LCase(Trim(tbl(i)))
                If SigneClef = "b" Then
                    r = ListNd.IndexOf(tbl(i))
                    If r <> -1 Then ' si r =-1 c'est que la note n'a pas été trouvée et donc qu'elle est déjà en "b"
                        Grid1.Cell(ligne, j).Text = LCase(Trim(ListNb(r)))
                    End If
                    '
                End If
                j = j + 1
            Next i
            '
        End If
    End Sub
    Private Sub Button26_Click(sender As Object, e As EventArgs) Handles ButtModes.Click
        Maj_Extension_Mode()
    End Sub
    Sub Maj_Extension_Mode()
        Dim ligne As Integer

        Grid1.AutoRedraw = False
        '
        Etat_Extension = Ty_Extension.Modes
        ligne = 1
        Maj_TabNotes("#") ' tous les calculs se font ici en #
        '
        Do
            Extension_Mode(ligne)
            ligne = ligne + 1
        Loop Until Trim(Grid1.Cell(ligne, 5).Text) = "" Or ligne = nbLignesGrid1 - 1
        '
        EcritUneFois = True
        '
        Grid1.AutoRedraw = True
        Grid1.Refresh()
    End Sub
    Sub Extension_Mode(ligne As Integer)
        Dim Gamme As String
        Dim SigneClef As String
        Dim tbl() As String
        Dim r As Integer
        Dim i As Integer
        Dim TabPourMode(0 To 35) As String

        If Trim(Grid1.Cell(ligne, 6).Text) <> "" Then
            SauvClef = Clef
            '
            EcritUneFois = True
            RAZ_DétailsEventH(ligne)
            '
            tbl = Split(Grid1.Cell(ligne, 3).Text) ' on va chercher le signe de clef dans la tonalité

            SigneClef = Trim(Det_ClefEn2(tbl(0), tbl(1)))

            ' RAZ_DétailsEventH(ligne)
            '
            ' Affichage des notes de la tonalité dans compogrid
            ' *************************************************
            Accord = Trim(Grid1.Cell(ligne, 4).Text)
            tbl = Split(Accord, " ")
            Tonique = Trim(LCase((tbl(0))))
            Tonique = Trad_NoteEnDMin(Tonique)
            Gamme = Trim(Grid1.Cell(ligne, 3).Text) ' choix de la tonalité pour construire le mode
            tbl = Split(Det_NotesGammes(Trim(Gamme)), " ")
            '
            j = 0
            Do
                For i = 0 To UBound(tbl)
                    TabPourMode(j) = tbl(i)
                    j = j + 1
                    If j = 36 Then Exit For
                Next i
            Loop Until j >= 36
            '
            For i = 0 To 35
                If Tonique = TabPourMode(i) Then
                    Exit For
                End If
            Next i

            Degré = TradDegré_ChiffreLettre(i)
            '
            a = ""
            For j = i To UBound(tbl) + i
                a = a + TabPourMode(j) + " "
            Next
            '
            ' Affichage des notes de la gamme dans compogrid
            ' **********************************************
            tbl = Split(Trim(a), " ")
            j = 11
            tbl2 = Split(Grid1.Cell(ligne, 4).Text, " ")
            If Det_NomMode(Gamme, Degré) <> "" And Trim(Degré) <> "" Then
                Grid1.Cell(ligne, 10).Text = Trim(Trim(tbl2(0))) + " " + Det_NomMode(Gamme, Degré) ' écriture du nom du mode
                Grid1.Cell(ligne, 10).BackColor = ButtModes.BackColor
                Maj_Détails(ligne, "ModeG")
                For i = 0 To UBound(tbl)
                    Grid1.Cell(ligne, j).Text = LCase(Trim(tbl(i))) 'tbl(i)
                    Grid1.Cell(ligne, j).BackColor = ButtModes.BackColor
                    If SigneClef = "b" Then
                        r = ListNd.IndexOf(tbl(i))
                        If r <> -1 Then ' si r =-1 c'est que la note n'a pas été trouvée et donc qu'elle est déjà en "b"
                            Grid1.Cell(ligne, j).Text = ListNb(r)
                        End If
                        Grid1.Cell(ligne, j).Text = LCase(Trim(Grid1.Cell(ligne, j).Text))
                    End If
                    j = j + 1
                Next i
            End If
            '
            'Grid1.Cell(ligne, nbColonnesGrid1 - 1).Text = "0"
            If CheckBoxTout.Checked Then
                'Grid1.Cell(ligne, nbColonnesGrid1 - 1).Text = "1"
            End If
            '
            Clef = SauvClef
        End If
    End Sub

    Private Sub Button30_Click_1(sender As Object, e As EventArgs) Handles ButtGammes.Click
        Maj_Extension_Gamme()
    End Sub
    Sub Maj_Extension_Gamme()
        Dim ligne As Integer

        Grid1.AutoRedraw = False
        '
        Etat_Extension = Ty_Extension.Gammes
        ligne = 1
        Maj_TabNotes("#") ' tous les calculs se font ici en #
        '
        Do
            Extension_Gamme(ligne)
            ligne = ligne + 1
        Loop Until Trim(Grid1.Cell(ligne, 5).Text) = "" Or ligne = nbLignesGrid1 - 1
        '
        Grid1.AutoRedraw = True
        Grid1.Refresh()
    End Sub
    Sub Extension_Gamme(ligne As Integer)

        Dim Gamme As String
        Dim SigneClef As String
        Dim tbl() As String
        Dim r As Integer
        Dim i, j As Integer
        Dim oo2 As New RechercheG_v2

        If Trim(Grid1.Cell(ligne, 5).Text) <> "" Then
            SauvClef = Clef
            '
            EcritUneFois = True
            RAZ_DétailsEventH(ligne)

            tbl = Split(Grid1.Cell(ligne, 5).Text) ' on va chercher le signe de clef dans la gamme

            SigneClef = Trim(Det_ClefEn2(tbl(0), tbl(1)))
            '
            RAZ_DétailsEventH(ligne)
            '
            ' Affichage des notes de la gamme dans compogrid
            ' **********************************************
            '
            Gamme = Trim(Grid1.Cell(ligne, 5).Text)
            Gamme = Trad_GammeEn_D_Maj(Gamme)

            Clef = "#"
            tbl = Split(oo2.Det_NotesGammes3(Trim(Gamme)), "-")
            j = 11
            Grid1.Cell(ligne, 10).Text = Trim(Gamme)
            Grid1.Cell(ligne, 10).BackColor = ButtGammes.BackColor
            Maj_Détails(ligne, "Gamme")
            For i = 0 To UBound(tbl)
                Grid1.Cell(ligne, j).Text = LCase(Trim(tbl(i)))
                Grid1.Cell(ligne, j).BackColor = ButtGammes.BackColor
                If SigneClef = "b" Then
                    r = ListNd.IndexOf(tbl(i))
                    If r <> -1 Then ' si r =-1 c'est que la note n'a pas été trouvée et donc qu'elle est déjà en "b"
                        Grid1.Cell(ligne, j).Text = LCase(Trim(ListNb(r)))
                    End If
                End If
                j = j + 1
            Next i
            '
            'Grid1.Cell(ligne, nbColonnesGrid1 - 1).Text = "0"
            If CheckBoxTout.Checked Then
                'Grid1.Cell(ligne, nbColonnesGrid1 - 1).Text = "1"
            End If
            '
            Clef = SauvClef
        End If
    End Sub



    Private Sub Button19_Click_2(sender As Object, e As EventArgs)
        Dim i As Integer
        For i = 8 To 15
            'If i <> 2 Then
            Grid1.Column(i).Locked = True
            'End If
        Next i
        '
        Grid1.Range(1, 7, (Grid1.Rows - 1), 15).ClearText()
        '
        For i = 8 To 15
            'If i <> 2 Then
            Grid1.Column(i).Locked = True
            'End If
        Next i
        '
        ' Maj TableEventH
        ' ***************
        For i = 1 To Grid1.Rows - 1
            RAZ_Détails(i)
        Next i
    End Sub

    Private Sub ImprimerToolStripMenuItem_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub Restit_ModeEntendu()
        Dim i As Integer
        Dim l As Integer

        l = Det_NbLignesUtilisées()
        For i = 1 To nbColonnesGrid1 - 2
            Grid1.Column(i).Locked = False ' pour pouvoir faire le merge quand la procédure Consruction est appelée par Nouv
        Next i
        '
        Grid1.Column(7).Width = 5 ' colonne de séparation entre données utiles et données étendues
        Grid1.Column(8).Width = 120
        Grid1.Range(1, 1, (nbLignesGrid1 - 1), (nbColonnesGrid1 - 2)).Borders(FlexCell.EdgeEnum.InsideHorizontal) = FlexCell.LineStyleEnum.None
        Grid1.Range(1, 1, (nbLignesGrid1 - 1), (nbColonnesGrid1 - 2)).Borders(FlexCell.EdgeEnum.InsideVertical) = FlexCell.LineStyleEnum.None
        'Grid1.Range(0, 8, 0, 15).Alignment = AlignmentEnum.CenterCenter
        '
        Grid1.Range(l, 1, (nbLignesGrid1 - 1), 1).BackColor = Couleur_Positions 'Color.AliceBlue   ' Positions
        Grid1.Range(l, 2, (nbLignesGrid1 - 1), 2).BackColor = Couleur_Marqueurs 'Color.Beige       ' Marqueurs
        Grid1.Range(l, 3, (nbLignesGrid1 - 1), 3).BackColor = Couleur_Tonalités 'Color.PaleTurquoise     ' Tonalités
        Grid1.Range(l, 4, (nbLignesGrid1 - 1), 4).BackColor = Couleur_Accords 'Color.Khaki        ' Accords
        Grid1.Range(l, 5, (nbLignesGrid1 - 1), 5).BackColor = Couleur_Gammes 'Color.Lavender      ' Gammes
        Grid1.Range(l, 6, (nbLignesGrid1 - 1), 6).BackColor = Couleur_Degrés 'Color.Lavender      ' Gammes
        '
        Grid1.Range(0, 8, 0, nbColonnesGrid1 - 2).Alignment = AlignmentEnum.CenterCenter

        '
        Grid1.Range(0, 8, 0, nbColonnesGrid1 - 2).MergeCells = True
        If Module1.LangueIHM = "fr" Then
            Grid1.Cell(0, 8).Text = "Informations détaillées"
        Else
            Grid1.Cell(0, 8).Text = "Detailed informations"
        End If
        '
        Grid1.Range(0, 7, 0, nbColonnesGrid1 - 2).BackColor = Color.LightBlue ' ligne titre "Information détaillée"
        Grid1.Range(1, 7, (nbLignesGrid1 - 1), 7).BackColor = Color.LightBlue


        For i = 1 To nbColonnesGrid1 - 2
            Grid1.Column(i).Locked = False ' pour pouvoir faire le merge quand la procédure Consruction est appelée par Nouv
        Next i
        '
        Grid1.Column(2).Locked = False
        ' Recréation de la colonnes des check
        ' ***********************************
        Grid1.Cols = nbColonnesGrid1
        Grid1.Column(nbColonnesGrid1 - 1).Locked = False ' colonne des cases à cocher
        Grid1.Column(nbColonnesGrid1 - 1).CellType = FlexCell.CellTypeEnum.CheckBox
        'Grid1.Column(nbColonnesGrid1 - 1).Locked = False
        '
        LargeursColGrid1()

    End Sub

    Private Sub Button26_Click_1(sender As Object, e As EventArgs) Handles Button26.Click

    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        AssurerVisibilitéCelluleGrid2(Grid2.ActiveCell.Col)
        ZoomPlusGrid2()
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        AssurerVisibilitéCelluleGrid2(Grid2.ActiveCell.Col)
        ZoomMoinsGrid2()
    End Sub

    Private Sub Button30_Click_2(sender As Object, e As EventArgs) Handles Button30.Click
        Dim i, j As Integer

        Grid1.AutoRedraw = False

        For i = 8 To nbColonnesGrid1 - 2
            Grid1.Column(i).Locked = True
        Next i
        '
        For i = 1 To nbLignesGrid1 - 1
            'If Grid1.Cell(i, nbColonnesGrid1 - 1).Text = "1" Then
            'Grid1.Range(i, 8, i, nbColonnesGrid1 - 2).ClearText()
            'Grid1.Range(i, 8, i, nbColonnesGrid1 - 2).ClearBackColor()

            For j = 10 To Grid1.Cols - 1
                Grid1.Cell(i, j).Text = ""
                Grid1.Cell(i, j).BackColor = Color.White
            Next
            RAZ_Détails(i) ' Maj TableEventH
            'Grid1.Cell(i, nbColonnesGrid1 - 1).Text = "0"
            'End If
        Next
        '
        CheckBoxTout.Checked = False

        For i = 8 To nbColonnesGrid1 - 2
            Grid1.Column(i).Locked = True
        Next i
        '
        Grid1.AutoRedraw = True
        Grid1.Refresh()

    End Sub

    Private Sub CheckBoxTout_CheckedChanged(sender As Object, e As EventArgs)
        Dim i As Integer
        'l = Det_NbLignesUtilisées()

        If CheckBoxTout.Checked = True Then
            For i = 1 To nbLignesGrid1 - 1
                If Trim(Grid1.Cell(i, 8).Text) <> "" Then
                    Grid1.Cell(i, nbColonnesGrid1 - 1).Text = "1"
                End If
            Next i
        Else
            For i = 1 To nbLignesGrid1 - 1
                'If Trim(Grid1.Cell(i, 8).Text) <> "" Then
                Grid1.Cell(i, nbColonnesGrid1 - 1).Text = "0"
                'End If
            Next i
        End If
    End Sub


    Private Function ListeNuméroNoteAcc(Ligne As Integer) As String
        Dim Position As String
        Dim tbl() As String
        Dim tbl1() As String
        Dim a As String
        Dim m, t, ct As Integer
        Dim n As Integer

        ' Détermination des paramètres m,t,ct de l'EventH
        ' ************************************************
        Position = Trim(Grid1.Cell(Ligne, 1).Text)
        tbl = Split(Trim(Position), ".")
        m = Val(tbl(0))
        t = Val(tbl(1))
        ct = Val(tbl(2))
        '
        ' Détermination de la Clef (b ou #) de la tonalité de l'accord
        ' ************************************************************
        Maj_TabNotes("#")
        ' Calcul du Voicing de l'accord
        ' *****************************
        Calcul_AutoVoicingZ()
        ' Identification des notes de l'accord 
        ' ************************************
        a = TableNotesAccordsZ(m, t, ct) ' ici les notes sont toujours en # - Maj effectuée par Calcul_AutoVoicingZ()
        tbl = Split(a)
        tbl1 = Split(Det_NotesAccord(TableEventH(m, t, ct).Accord), "-")
        Tonique = Trim(tbl1(0))
        Aff_AccordExt(tbl, Tonique, m, t, ct)
        a = ""
        ' Détermination des N° de notes de l'accord
        ' ****************************************
        For i = 0 To UBound(tbl)
            n = ListNotesd.IndexOf(Trim(tbl(i))) '
            a = Trim(a + Str(n) + " ")
        Next i
        ListeNuméroNoteAcc = Trim(a)
    End Function
    Sub Aff_AccordExt(tbl() As String, tonique As String, m As Integer, t As Integer, ct As Integer)
        Dim n, n1 As String
        Dim i As Integer
        Dim Note As String
        Dim tbl2() As String


        Num_octave = -1
        For i = 0 To UBound(tbl)
            n = ListNotesd.IndexOf(Trim(tbl(i))) 'Det_NumNote(tbl(i))
            n1 = Val(Microsoft.VisualBasic.Right(tbl(i), 1))
            If n1 > Num_octave Then
                Num_octave = n1
            End If
            'SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, n, PlaybackVelocity.Value)
            AccordJouerPiano.Notes(i) = n
            AccordJouerPiano.OldBackColor(i) = LabelPiano.Item(n).BackColor
            LabelPiano.Item(n).BackColor = Color.Yellow
            '
            Note = Det_NoteSansOctave(Trim(tbl(i)))
            ''
            ' Calcul de la clef pour affichage des notes
            ' ******************************************
            a = TableEventH(m, t, ct).Tonalité
            tbl2 = Split(a)
            Clef = Trim(Det_Clef(Trim(tbl2(0))))
            '
            If Clef = "b" Then
                LabelPiano.Item(n).Text = ListNotesb(n)
            Else
                LabelPiano.Item(n).Text = ListNotesd(n)
            End If
            '
            If Note = tonique Then
                LabelPiano.Item(n).ForeColor = Color.Red
            Else
                LabelPiano.Item(n).ForeColor = Color.Blue
            End If
            '
        Next i
        AccordAEtéJoué_Ext = True
    End Sub
    Private Function ListeNuméroNoteAccG4(Ligne As Integer) As String
        Dim Position As String
        Dim tbl() As String
        Dim a As String
        Dim m, t, ct As Integer
        Dim n As Integer

        ' Détermination des paramètres m,t,ct de l'EventH
        ' ************************************************
        Position = LCaractLigne.Item(Ligne).Position       'Trim(Grid1.Cell(Ligne, 1).Text)
        tbl = Split(Trim(Position), ".")
        m = Val(tbl(0))
        t = Val(tbl(1))
        ct = Val(tbl(2))
        '
        ' Détermination de la Clef (b ou #) de la tonalité de l'accord
        ' ************************************************************
        Maj_TabNotes("#")
        ' Calcul du Voicing de l'accord
        ' *****************************
        Calcul_AutoVoicingZ()
        ' Identification des notes de l'accord 
        ' ************************************
        a = TableNotesAccordsZ(m, t, ct) ' ici les notes sont toujours en # - Maj effectuée par Calcul_AutoVoicingZ()
        tbl = Split(a)
        a = ""
        ' Détermination des N° de notes de l'accord
        ' ****************************************
        For i = 0 To UBound(tbl)
            n = ListNotesd.IndexOf(Trim(tbl(i))) '
            a = Trim(a + Str(n) + " ")
        Next i
        ListeNuméroNoteAccG4 = Trim(a)
    End Function
    Private Function ListeNuméroNoteGamme(Gamme As String, Ligne As Integer) As String
        Dim Position As String
        Dim tbl() As String
        Dim a, b As String
        Dim m, t, ct As Integer
        Dim n As Integer
        Dim i, indexC, DepassOct As Integer

        ListeNuméroNoteGamme = ""
        ' Détermination des paramètres m,t,ct de l'EventH
        ' ************************************************
        Position = Trim(Grid1.Cell(Ligne, 1).Text)
        tbl = Split(Trim(Position), ".")
        m = Val(tbl(0))
        t = Val(tbl(1))
        ct = Val(tbl(2))
        '
        ' Calcul du Voicing de l'accord
        ' *****************************
        Calcul_AutoVoicingZ()
        ' Identification des notes de l'accord 
        ' ************************************
        c = TableNotesAccordsZ(m, t, ct) ' ici les notes sont toujours en # - Maj - anglo saxon effectuée par Calcul_AutoVoicingZ()
        tbl = Split(c)
        c = tbl(UBound(tbl)) 'lecture de la dernières note de l'accord
        c = Microsoft.VisualBasic.Right(c, 1) ' lecture de l'octave de la dernière note de l'accord
        c = Str(Val(c) + 1) ' on démarre la gamme à l'octave supérieure de la dernière note de l'accord

        ' Détermination des N° de notes de la gamme
        ' ****************************************
        Maj_TabNotes("#") ' le travail en notation anglo-saxonne avec #
        'b = Det_NotesGammes(TableEventH(m, t, ct).Gamme)
        'Gamme = TradAcc_LatAngl(Gamme)
        tbl = Split(Gamme)
        tbl(0) = Trad_ListeNotesEnD(tbl(0), " ")
        Gamme = Trim(tbl(0) + " " + tbl(1))
        b = Det_NotesGammes(Gamme)
        tbl = Split(b, " ")
        '
        ' Placer les octaves
        ' ******************
        DepassOct = 11
        indexC = 0
        c = "3"
        For i = 0 To UBound(tbl)
            indexC = DetectOct(tbl(i), indexC)
            If indexC > DepassOct Then
                c = Str(Val(c) + 1)
                DepassOct = 23
            End If
            If Val(c) < 8 Then ' ' pour ne pas dépaser le nombre de notes max de 127:en fait l'octave 8 ne devrait jamais être utilisée
                tbl(i) = Trim(tbl(i) + Trim(c))
            End If
        Next
        a = ""
        If SENSGamme = "Monter" Then
            For i = 0 To UBound(tbl)
                n = ListNotesd.IndexOf(Trim(tbl(i))) '
                a = Trim(a + Str(n) + " ")
            Next i
        Else
            For i = UBound(tbl) To 0 Step -1
                n = ListNotesd.IndexOf(Trim(tbl(i))) '
                a = Trim(a + Str(n) + " ")
            Next i
        End If

        '
        ' Rajout de la tonique à l'octave en tant que dernière note
        ' *********************************************************
        tbl = a.Split()
        If SENSGamme = "Monter" Then
            i = Convert.ToInt16(tbl(0)) + 12
            If i <= 127 Then
                b = i.ToString
                a = a + " " + Trim(b)
            End If
        Else
            i = Convert.ToInt16(tbl(tbl.Count - 1)) + 12
            If i >= 1 Then
                b = i.ToString
                a = Trim(b) + " " + a
            End If
        End If
        ' Retour de la fonction
        ' *********************
        ListeNuméroNoteGamme = Trim(a)
    End Function
    Private Sub Maj_ListeLignes(PremLigne As Integer, Selection As Integer)
        Dim i, j, k As Integer
        i = PremLigne
        j = 0
        '
        LCaractLigne.Clear()
        '
        ' Sauvegarder les données de la sélection
        ' ***************************************
        k = 0
        Do
            LCaractLigne.Add(New StandLigne)
            LCaractLigne.Item(j).NLigne = i
            LCaractLigne.Item(j).Position = Trim(Grid1.Cell(i, 1).Text)
            LCaractLigne.Item(j).Marqueur = Trim(Grid1.Cell(i, 2).Text)
            LCaractLigne.Item(j).Tonalité = Trim(Grid1.Cell(i, 3).Text)
            LCaractLigne.Item(j).Accord = Trim(Grid1.Cell(i, 4).Text)
            LCaractLigne.Item(j).Gamme = Trim(Grid1.Cell(i, 5).Text)
            i = i + 1
            j = j + 1
        Loop Until j = Selection
        '
        ' Mettre à jour les accords dans la liste de L'écoute rapide
        ' **********************************************************
        ListBox1.Items.Clear()
        For i = 0 To LCaractLigne.Count - 1
            ListBox1.Items.Add(LCaractLigne.Item(i).Accord)
        Next i
        '
        ListBox1.SelectedIndex = 0

    End Sub
    Private Function DetectOct(note As String, indexCours As Integer) As Integer
        DetectOct = -1
        Dim i As Integer
        For i = indexCours To UBound(TabNotes)
            If note = TabNotes(i) Then
                DetectOct = i
                Exit For
            End If
        Next i
    End Function
    Private Sub ListBox1_SelectedIndexChanged(sender As Object, e As EventArgs)

    End Sub

    Private Sub SplitContainer4_SplitterMoved(sender As Object, e As SplitterEventArgs)
        'Label47.Text = Str(SplitContainer4.SplitterDistance)
    End Sub
    Public Sub LockageColonnes()
        Dim i As Integer
        For i = 0 To nbColonnesGrid1 - 1
            Grid1.Column(i).Locked = True
        Next i
        'Grid1.Range(0, 0, 0, nbColonnesGrid1 - 1).Locked = True
        'Grid1.Column(2).Locked = False   ' colonne des marqueurs
        Grid1.Column(nbColonnesGrid1 - 1).Locked = False ' colonne des cases à cocher

        For i = 0 To Grid4.Cols - 1
            Grid4.Column(i).Locked = True
        Next i
    End Sub

    Private Sub Button32_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub BGW_DoWork(sender As Object, e As DoWorkEventArgs) Handles BGW.DoWork
        If EnvAccord Then
            EnvoiAccord()
        End If
        EnvoiGamme()
        If EnvAccord Then
            EnvNotesOffAccord()
        End If
        GammeAEtéJouée = False

    End Sub
    Private Sub EnvoiGamme()
        Dim fin As Integer = UBound(tbl_NotesOnG)
        Dim i, j As Integer
        Dim k As Byte
        For i = 0 To fin
            ' Envoi note Off
            EnvNotesOffGamme()
            ' Envoi note On
            j = Val(tbl_NotesOnG(i))
            j = Val(j)
            k = CByte(j)
            JouerNote2(k, "Gamme")
            tbl_NotesOffG(i) = k ' demande envoi noteOff au prochain passage
            System.Threading.Thread.Sleep(LongueurCroche_ms)
        Next i
        EnvNotesOffGamme()
    End Sub
    Private Sub EnvoiAccord()
        Dim fin As Integer = UBound(tbl_NotesOnA)
        Dim i, j As Integer
        Dim k As Byte
        For i = 0 To fin
            j = Val(tbl_NotesOnA(i))
            j = Val(j)
            k = CByte(j)
            JouerNote2(k, "Accord")
            tbl_NotesOffA(i) = k ' demande envoi noteOff 
        Next i
        System.Threading.Thread.Sleep(LongueurCroche_ms)

    End Sub
    Private Sub EnvNotesOffGamme()
        Dim k As Integer
        For k = 0 To UBound(tbl_NotesOffG)
            If tbl_NotesOffG(k) <> 0 Then
                CouperNote2(tbl_NotesOffG(k))
                tbl_NotesOffG(k) = 0
            End If
        Next k
    End Sub
    Private Sub EnvNotesOffAccord()
        Dim k As Integer
        For k = 0 To UBound(tbl_NotesOffA)
            CouperNote2(tbl_NotesOffA(k))
            tbl_NotesOffA(k) = 0
        Next k
    End Sub

    Private Sub Button34_MouseDown(sender As Object, e As MouseEventArgs)
        If Not (BGW.IsBusy) Then
            BGW.RunWorkerAsync()
            'Envoi d'un accord
            ' ****************
            EnvAccord = True
            NotesAJouer = "60" + " " + "64" + " " + "67"
            tbl_NotesOnA = Split(NotesAJouer)
            ReDim Preserve tbl_NotesOffA(UBound(tbl_NotesOnA))
            For i = 0 To UBound(tbl_NotesOffA)
                tbl_NotesOffA(i) = 0
            Next i
            'BGW.WorkerSupportsCancellation = True
            'BGW.RunWorkerAsync()
            'Envoi d'une gamme
            ' ****************
            EnvGamme = True
            NotesAJouer = "60" + " " + "62" + " " + "64" + " " + "65" + " " + "67"
            tbl_NotesOnG = Split(NotesAJouer)
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            For i = 0 To UBound(tbl_NotesOffG)
                tbl_NotesOffG(i) = 0
            Next i
            BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub

    Sub CouperNote2(n As Byte)

        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        SortieMidi.Item(ChoixSortieMidi).SendNoteOff(CanalThru.Value - 1, n, 0)
        'SortieMidi.Item(ChoixSortieMidi).SilenceAllNotes()
    End Sub
    Private Sub JouerDétails(ligne As Integer)
        If Not (BGW.IsBusy) Then
            ' Envoi d'un accord
            ' *****************
            EnvAccord = False
            If GammePlusAccord.Checked Then
                EnvAccord = True
                NotesAJouer = ListeNuméroNoteAcc(ligne)
                tbl_NotesOnA = Split(NotesAJouer)
                ReDim Preserve tbl_NotesOffA(UBound(tbl_NotesOnA))
                For i = 0 To UBound(tbl_NotesOffA)
                    tbl_NotesOffA(i) = 0
                Next i
            End If
            '
            ' Envoi d'une gamme
            ' *****************
            EnvGamme = True
            NotesAJouer = ListeDétails(ligne)
            tbl_NotesOnG = Split(NotesAJouer)
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            For i = 0 To UBound(tbl_NotesOffG)
                tbl_NotesOffG(i) = 0
            Next i
            BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub
    Private Sub JouerRechercheG4(ligne As Integer)
        If Not (BGW.IsBusy) Then
            Dim i As Integer

            GammeAEtéJouée = True

            'Envoi d'un accord
            ' ****************
            EnvAccord = False
            If GammePlusAccord.Checked Then
                EnvAccord = True
                NotesAJouer = ListeNuméroNoteAccG4(ListBox1.SelectedIndex)
                tbl_NotesOnA = Split(NotesAJouer)
                ReDim Preserve tbl_NotesOffA(UBound(tbl_NotesOnA))
                For i = 0 To UBound(tbl_NotesOffA)
                    tbl_NotesOffA(i) = 0
                Next i
            End If
            '
            'Envoi d'une gamme
            ' ****************
            EnvGamme = True
            NotesAJouer = ListeRechercheG4(ligne)
            tbl_NotesOnG = Split(NotesAJouer)
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            For i = 0 To UBound(tbl_NotesOffG)
                tbl_NotesOffG(i) = 0
            Next i
            BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub
    Private Sub JouerGamme(Gamme As String, Ligne As Integer)
        If Not (BGW.IsBusy) Then
            'Envoi d'un accord
            ' ****************
            EnvAccord = False
            If GammePlusAccord.Checked Then
                EnvAccord = True
                NotesAJouer = ListeNuméroNoteAcc(Ligne)
                tbl_NotesOnA = Split(NotesAJouer)
                ReDim Preserve tbl_NotesOffA(UBound(tbl_NotesOnA))
                For i = 0 To UBound(tbl_NotesOffA)
                    tbl_NotesOffA(i) = 0
                Next i
            End If
            '
            'Envoi d'une gamme
            ' ****************
            EnvGamme = True
            NotesAJouer = ListeNuméroNoteGamme(Gamme, Ligne)
            tbl_NotesOnG = Split(NotesAJouer)
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            For i = 0 To UBound(tbl_NotesOffG)
                tbl_NotesOffG(i) = 0
            Next i
            BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub
    Private Sub JouerGamme2(Gamme As String, Ligne As Integer)
        If Not (BGW.IsBusy) Then
            '
            'Envoi d'une gamme
            ' ****************
            EnvGamme = True
            NotesAJouer = ListeNuméroNoteGamme(Gamme, Ligne)
            tbl_NotesOnG = Split(NotesAJouer)
            ReDim Preserve tbl_NotesOffG(UBound(tbl_NotesOnG))
            For i = 0 To UBound(tbl_NotesOffG)
                tbl_NotesOffG(i) = 0
            Next i
            'BGW.WorkerSupportsCancellation = True
            BGW.RunWorkerAsync()
        End If
    End Sub

    Private Sub EndMeasureNumber_ValueChanged(sender As Object, e As EventArgs) Handles EndMeasureNumber.ValueChanged

    End Sub

    Private Sub Grid4_MouseUp(Sender As Object, e As MouseEventArgs) Handles Grid4.MouseUp

        Dim a As String


        GammeAEtéJouée = False ' pour activé l'écoute d'une gamme

        a = Grid4.Cell(Grid4.ActiveCell.Row, 1).Text
        If Trim(a) <> "" And Grid4.ActiveCell.Row > 0 Then
            If Trim(a) <> "" And Grid4.ActiveCell.Row <> 0 Then
                Etat_Extension = Ty_Extension.Recherche
                Aff_Gamme(a, "")
            End If

            Dim tbl() As String
            Dim aa As String = Trim(Grid4.Cell(Grid4.ActiveCell.Row, 1).Text)
            Dim b As String
            Dim oo As New RechercheG_v2

            tbl = aa.Split()
            b = oo.Det_InfoGamme(tbl(1))

            b = b.Replace(";", " ")
            b = b.Replace("OK", "")
            b = b.Replace("Fin", "")
            b = b.Replace(" 1", "   " + FlècheDroite + "  1 ")

            'TagsGamme.Text = Trim(b) ' Trim(b) b n'est plus utilisé mais on garde l'info
        End If

        'a = Trim(Grid4.Cell(i, 1).Text)

    End Sub


    Private Sub ListBox1_SelectedIndexChanged_1(sender As Object, e As EventArgs)

    End Sub

    Private Sub ListBox1_MouseDown(sender As Object, e As MouseEventArgs)
        Dim a, b, Clef As String
        Dim tbl() As String
        Dim i, m, t, ct As Integer
        If ComboMidiOut.Items.Count > 0 Then
            If My.Computer.Keyboard.CtrlKeyDown And e.Button() = Windows.Forms.MouseButtons.Left Then 'jouer accord
                If EnChargement = False Then        ' jouer "Accord"
                    If AccordAEtéJoué = False Then
                        a = Trim(ListBox1.SelectedItem) 'Grid1.Cell(i, 1).Text
                        i = ListBox1.SelectedIndex
                        b = LCaractLigne.Item(i).Position
                        tbl = Split(b, ".")
                        m = Val(tbl(0))
                        t = Val(tbl(1))
                        ct = Val(tbl(2))
                        b = TableEventH(m, t, ct).Tonalité
                        tbl = Split(b)
                        Clef = Det_Clef(tbl(0))
                        '
                        JouerAccord123(Trim(LCaractLigne.Item(i).Position))
                    End If
                End If
                '
            End If
        End If
    End Sub

    Private Sub ListBox1_MouseUp(sender As Object, e As MouseEventArgs)
        ' Couper Jouer Accord
        ' *******************
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
    End Sub



    Private Sub ComboBox7_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox7.SelectedIndexChanged
        LongueurCroche_ms = ((60 / Val(ComboBox7.SelectedItem)) * 1000) / 2
    End Sub

    Private Sub TMarqueur_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TMarqueur.KeyPress

        Dim a As Char
        Dim b As String
        Dim c As String
        Dim tbl(), tbl1() As String
        Dim n_Mesure As Integer
        Dim ligne As Integer
        '
        Dim m As Integer
        Dim t As Integer
        Dim ct As Integer

        a = e.KeyChar
        '
        If a = vbCr And Grid1.ActiveCell.Col = 2 Then ' 13 : touche "entrée" - 2 : Colonne  marqueur : entrer un marqueur
            EcritUneFois = True
            ligne = Grid1.ActiveCell.Row
            b = TMarqueur.Text 'Grid1.ActiveCell.Text
            b = b.Replace("-", "") ' - est un séparateur
            c = Det_Index_De_Ligne(Grid1.ActiveCell.Row) ' c contient la position si elle existe
            tbl1 = Split(c, "-")
            n_Mesure = Val(tbl1(0))
            '
            If Trim(c) <> "" Then ' existence d'un évènement à la position cliquée ?
                tbl = Split(c, "-")
                m = Val(tbl(0))
                t = Val(tbl(1))
                ct = Val(tbl(2))
                '
                If Trim(b) <> "" Then ' marqueurs différent de "" ? (sinon effacement)
                    '

                    '
                    Grid2.AutoRedraw = False
                    Grid2.Cell(0, n_Mesure).Locked = False
                    Grid2.Cell(0, n_Mesure).BackColor = Color.Green
                    Grid2.Cell(0, n_Mesure).ForeColor = Color.Yellow
                    Grid2.Cell(0, n_Mesure).Locked = True
                    'Grid2.Cell(0, n_Mesure).SetFocus()
                    Grid2.Refresh()
                    Grid2.AutoRedraw = True
                    '
                    '
                    Grid1.ActiveCell.BackColor = Color.Green
                    Grid1.ActiveCell.ForeColor = Color.Yellow
                    TableEventH(m, t, ct).Marqueur = Trim(b)
                    Grid1.Cell(ligne, 2).Text = Trim(b)
                Else
                    Grid1.ActiveCell.BackColor = Couleur_Marqueurs
                    Grid1.ActiveCell.ForeColor = Color.Black
                    '
                    TableEventH(m, t, ct).Marqueur = ""
                    Grid1.Cell(ligne, 2).Text = ""
                    '
                    ' Gestion de Grid2
                    ' ****************
                    '
                    If Not (Det_MarqueurDsMesure(m)) Then ' il peut y avoir un autre marqueur dans la mesure (plusieurs accords dans la mesure)
                        Grid2.Cell(0, n_Mesure).Locked = False
                        Grid2.Cell(0, n_Mesure).BackColor = Color.Beige
                        Grid2.Cell(0, n_Mesure).ForeColor = Color.Black
                        Grid2.Cell(0, n_Mesure).Locked = True
                        Grid2.Cell(0, n_Mesure).SetFocus()
                        '
                        If TContext1.AutoVoiceValid = True Then
                            Grid2.AutoRedraw = False
                            '
                            For i = TContext1.ColDeb To TContext1.Colfin
                                If Grid2.Cell(0, i).BackColor <> Color.Green Then
                                    Grid2.Cell(0, i).BackColor = Color.Gainsboro
                                End If
                            Next i
                            '
                            Grid2.Refresh()
                            Grid2.AutoRedraw = True
                        End If
                        '
                        '
                    End If
                End If
            Else
                If LangueIHM = "fr" Then
                    MsgBox("La ligne doit contenir des évènements musicaux avant de lui affecter un marqueur")
                Else
                    MsgBox("The line must contain musical events before a marker can be assigned to it.")
                End If
            End If
            '
            TMarqueur.Visible = False
            '
            'Maj_VueNotes()
            Maj_PianoRoll()
            Maj_DrumEdit()
            Maj_VueNotes()
        End If

    End Sub
    Private Sub ListGS_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListGS.SelectedIndexChanged
        ListGS.Refresh()
        Maj_PrgGM(Trim(ListGS.Text))

    End Sub
    Sub Maj_PrgGM(PRG As String)
        Dim tbl() As String
        'SortieMidi.Item(ChoixSortieMidi).SendNoteOn(CanalThru.Value - 1, msg.Pitch, msg.Velocity)

        If EnChargement = False Then
            If Trim(PRG) <> "GS/GM off" Then
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    SortieMidi.Item(ChoixSortieMidi).Open()
                End If
                tbl = Split(Trim(PRG))
                SortieMidi.Item(ChoixSortieMidi).SendProgramChange(0, Val(tbl(0)) - 1)
            End If
        End If

    End Sub

    Private Sub Reinit_Click(sender As Object, e As EventArgs)
        'SortieMidi.Item(ChoixSortieMidi).SendProgramChange(CanalThru.Value - 1, ListGS.SelectedIndex - 1)
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 7, 0)
    End Sub

    Private Sub Button35_Click(sender As Object, e As EventArgs)
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 91, 127) ' Modulation Wheel à 0
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 93, 127) ' Volume à 127 (max)
        'SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 10, 64) ' Panoramique à 64 : valeur centrale
        'SortieMidi.Item(ChoixSortieMidi).SendPitchBend(CanalThru.Value - 1, 8192) ' pitch bend = 64 --> valeur centrale
    End Sub
    Sub Init_CTRLMIDI()
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 1, 0) ' Modulation Wheel à 0
        'If Mix.AutorisVol.Checked Then
        'SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 7, 100) ' Volume à 127 (max) 
        'End If
        SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 10, 64) ' Panoramique à 64 : valeur centrale
        SortieMidi.Item(ChoixSortieMidi).SendPitchBend(CanalThru.Value - 1, 8192) ' pitch bend = 64 --> valeur centrale
    End Sub
    Sub Init_CTRLMIDI2()
        Dim i As Integer
        If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
            SortieMidi.Item(ChoixSortieMidi).Open()
        End If
        For i = 0 To nb_TotalPistes - 2 ' on réinitialise les ctrl sur toutes les pistes sauf drum  (même si certain CTRL ne sont jamais utilisés ex pédale sur piste 1 accords)
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(i, 1, 0) ' Modulation Wheel à 0
            'If Mix.AutorisVol.Checked Thenaines p
            'SortieMidi.Item(ChoixSortieMidi).SendControlChange(1, 7, 100) ' Volume à 100 (max) 
            'End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(i, 64, 0) ' Ctrl Pedale = 0
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(i, 11, 100) ' Expression à 100 (max) 
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(i, 10, 64) ' Panoramique à 64 : valeur centrale
            SortieMidi.Item(ChoixSortieMidi).SendPitchBend(i, 8192) ' pitch bend = 64 --> valeur centrale
        Next
    End Sub
    Private Sub Vol_ValueChanged(sender As Object, e As EventArgs) Handles Vol.ValueChanged
        Maj_VolGM()
    End Sub
    Private Sub Vol_MouseWheel(sender As Object, e As MouseEventArgs) Handles Vol.MouseWheel
        Maj_VolGM()
    End Sub
    Sub Maj_VolGM()
        If EnChargement = False And Mix.AutorisVol.Checked = True Then
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 7, Vol.Value)
        End If
    End Sub
    Private Sub Reverb_ValueChanged(sender As Object, e As EventArgs) Handles Reverb.ValueChanged
        Maj_ReverbGM()
    End Sub
    Private Sub Reverb_MouseWheel(sender As Object, e As MouseEventArgs) Handles Reverb.MouseWheel
        Maj_ReverbGM()
    End Sub
    Sub Maj_ReverbGM()
        If EnChargement = False Then
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 91, Reverb.Value)
        End If
    End Sub
    Private Sub Chorus_ValueChanged(sender As Object, e As EventArgs) Handles Chorus.ValueChanged
        Maj_ChorusGM()
    End Sub
    Private Sub Chorus_MouseWheel(sender As Object, e As MouseEventArgs) Handles Chorus.MouseWheel
        Maj_ChorusGM()
    End Sub
    Sub Maj_ChorusGM()
        If EnChargement = False Then
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(CanalThru.Value - 1, 93, Chorus.Value)
        End If
    End Sub
    Private Sub EnvoyerTout()
        'If OnGM.Checked = True Then --> supprimé
        'Maj_PrgGM(Trim(ListGS.Text))
        'Maj_VolGM()
        'Maj_ReverbGM()
        'Maj_ChorusGM()
        'End If
        Me.Focus()
    End Sub

    Private Sub CanalThru_ValueChanged(sender As Object, e As EventArgs) Handles CanalThru.ValueChanged
        Canal = CanalThru.Value ' Canal est un byte mais ne dépasse jamais 16
        If CanalThru.Value = 10 Then
            CanalThru.ForeColor = Color.White
            CanalThru.BackColor = Color.Silver
        Else
            CanalThru.ForeColor = Color.Black
            CanalThru.BackColor = Color.White
        End If
    End Sub

    'Private Sub OnGM_CheckedChanged(sender As Object, e As EventArgs) ' OnGM
    'If OnGM.Checked = False Then
    '       ListGS.Enabled = False
    '      'Vol.Enabled = False
    '       Reverb.Enabled = False
    '       Chorus.Enabled = False
    '       ButtonSend.Enabled = False
    'Else
    '       ListGS.Enabled = True
    '      Reverb.Enabled = True
    '     Chorus.Enabled = True
    '    ButtonSend.Enabled = True
    '   '
    '  EnvoyerTout()
    'End If
    'End Sub



    'Private Sub ButtonSend_Click(sender As Object, e As EventArgs) Handles ButtonSend.Click
    'EnvoyerTout()
    'End Sub
    Private Sub Button36_Click(sender As Object, e As EventArgs) Handles Button36.Click
        ExportHTML()
    End Sub
    Private Sub Form1_KeyPress(sender As Object, e As KeyPressEventArgs) Handles Me.KeyPress
        ' Remarque importante : pour ça fonctionne ici, il faut que la propriété de form1 KeyPreview =  true

        'If e.KeyChar.ToString() = " " Then
        'If PlayMidi.Enabled = True Then
        'PlayMidi.Focus()
        'Else
        'StopMidi.Focus()
        'End If
        'End If
        '
        'If PlayMidi.Enabled = True And e.KeyChar.ToString() = " " Then
        'PlayAccords()
        'Else
        'If PlayMidi.Enabled = False And e.KeyChar.ToString() = " " Then
        'StopPlay()
        'End If
        'End If

    End Sub

    Function Init_P() As Point
        Dim p As New Point
        Init_P.X = 5 '
        Init_P.Y = 9 '
    End Function
    Function Init_PP() As Point
        Dim p As New Point
        Init_PP.X = 5 '
        Init_PP.Y = 15 '
    End Function
    Private Sub CheckBoxTout_CheckedChanged_1(sender As Object, e As EventArgs) Handles CheckBoxTout.CheckedChanged
        Dim i As Integer
        'l = Det_NbLignesUtilisées()

        If CheckBoxTout.Checked = True Then
            For i = 1 To nbLignesGrid1 - 1
                If Trim(Grid1.Cell(i, 8).Text) <> "" Then
                    Grid1.Cell(i, nbColonnesGrid1 - 1).Text = "1"
                End If
            Next i
        Else
            For i = 1 To nbLignesGrid1 - 1
                'If Trim(Grid1.Cell(i, 8).Text) <> "" Then
                Grid1.Cell(i, nbColonnesGrid1 - 1).Text = "0"
                'End If
            Next i
        End If
    End Sub
    Private Sub Button37_Click(sender As Object, e As EventArgs)
        'ConfigXPS.ShowDialog()
    End Sub

    Private Sub XPS_CheckedChanged(sender As Object, e As EventArgs)
        'Chargement_onglet()
    End Sub

    Private Sub PDF_CheckedChanged(sender As Object, e As EventArgs)
        'Chargement_onglet()
    End Sub

    Private Sub HTML_CheckedChanged(sender As Object, e As EventArgs)
        'Chargement_onglet()
    End Sub
    Sub Position_Clavier(N_Octave As Integer)
        Dim P As Point
        P.Y = Panel11.AutoScrollPosition.Y

        Select Case N_Octave
            Case 2
                P.X = 650
            Case 3
                P.X = 870
            Case 4
                P.X = 1090
            Case 5
                P.X = 1210
        End Select
        '
        Panel11.AutoScrollPosition = P
    End Sub

    Private Sub Button38_Click(sender As Object, e As EventArgs) Handles Button38.Click
        Position_Clavier(Num_octave)
    End Sub
    Private Sub Grid4_KeyDown(Sender As Object, e As KeyEventArgs) Handles Grid4.KeyDown
        Dim a, b As String
        Dim i, j, ligne, ligneG4, ligneG1, SélectionLignes As Integer
        Dim Position As String
        Dim m, t, ct As Integer
        Dim tbl() As String

        '
        a = e.KeyData
        If a = "13" Then ' touche 'Entrée"
            '
            ligneG4 = Grid4.ActiveCell.Row
            b = Grid4.Cell(ligneG4, 1).Text ' lecture de la gamme choisie
            '
            '
            If ValidationEcr() Then
                SélectionLignes = (Grid1.Selection.LastRow - Grid1.Selection.FirstRow) + 1
                '
                ' **********************************************
                ' on met à jour TZAnnulation mais pour le moment l'annulation de l'écriture des gammes n'est pas assurée (dans Menu/Annuler)
                TZAnnulationGrid1.Grille = TamponInfoGrid1.TGrilleCours.Grid4
                TZAnnulationGrid1.Sélection = SélectionLignes
                TZAnnulationGrid1.LigneCours = Grid1.ActiveCell.Row
                ' *********************************************
                'a = Grid4.Cell(ligneG4, 1).Text
                If Trim(Grid4.Cell(ligneG4, 1).Text) <> "" Then
                    i = -1
                    ligneG1 = Grid1.ActiveCell.Row

                    Do
                        i = i + 1
                        ' Mise à jour Gamme dans Grid1
                        ' ****************************
                        TZAnnulationGrid1.Gammes(i) = Grid1.Cell(ligneG1, 5).Text
                        Grid1.Cell(ligneG1, 5).Text = Trim(b)
                        '
                        ' Effacer les notes de la gamme (ou Accord, ou Mode) dans Grid1
                        ' *************************************************************
                        For j = 9 To nbColonnesGrid1 - 2 ' on met -2 pour ne pas toucher à ola colonne des cherckbox
                            Grid1.Cell(ligneG1, j).Text = ""
                        Next j
                        ' Mise à jour Gamme dans TableEventh et compogrid Grid1
                        ' *****************************************************
                        Position = Grid1.Cell(ligneG1, 1).Text
                        tbl = Split(Position, ".")
                        m = Val(tbl(0))
                        t = Val(tbl(1))
                        ct = Val(tbl(2))
                        TableEventH(m, t, ct).Gamme = Trim(b)
                        Maj_DétailsGamme(ligneG1) ' mise à jour dans compogrid Grid1
                        '
                        ' gestion couleur des gammes
                        ' **************************
                        Maj_CouleurTona_Cell(ligneG1, Trim(Grid1.Cell(ligneG1, ColTonalité).Text)) ' mise à jour globale des couleurs
                        If ligneG1 <> 1 Then
                            If Trim(Grid1.Cell(ligneG1, ColGamme).Text) <> Trim(Grid1.Cell(ligneG1, ColTonalité).Text) Then
                                Grid1.Cell(ligneG1, ColGamme).BackColor = Color.White
                                Grid1.Cell(ligneG1, ColGamme).ForeColor = Color.Black
                            End If
                        End If
                        '
                        ligne = ligneG1
                        ligneG1 = ligneG1 + 1
                        '
                    Loop Until i = SélectionLignes - 1 Or ligneG1 > Grid1.Rows - 1 Or Trim(Grid1.Cell(ligneG1, 1).Text) = ""

                    Aff_Gamme(Trim(b), "") ' affichage gamme dans le pîano
                    EcritUneFois = True
                    '
                    Maj_PianoRoll()
                    Maj_VueNotes()
                    Maj_MODES(ligne)
                End If
            End If
        End If
    End Sub

    Private Sub Button32_Click_1(sender As Object, e As EventArgs) Handles Button32.Click
        'Dim a As String
        'Select Case Module1.LangueIHM
        'Case "fr"
        'a = "http://guy.rochette.pagesperso-orange.fr/FR_Hypervoicing_Manuel.pdf"
        'Case Else
        'a = "http://guy.rochette.pagesperso-orange.fr/EN_Hypervoicing_Manual.pdf"
        'End Select
        ''
        Dim a As String = "https://compomusic.fr/guide-rapide/"
        '
        Process.Start(Trim(a))
    End Sub
    Private Function Det_ClefTona(ligne As Integer) As String
        Dim tbl() As String

        tbl = Split(Grid1.Cell(ligne, 3).Text) ' on va chercher le signe de clef dans la tonalité

        Det_ClefTona = Trim(Det_ClefEn2(tbl(0), tbl(1)))
    End Function
    Private Sub Extension_Transition(Ty_Mode As String)
        Dim i, j, k, l, m As Integer
        Dim a, aa, b As String
        Dim Accord As String
        Dim Tona As String
        Dim NotesAccord As String
        Dim NotesTona As String
        Dim SetAccord As New HashSet(Of String)
        Dim SetTona As New HashSet(Of String)
        Dim SetTonaBis As New HashSet(Of String)
        Dim SetTona2 As New HashSet(Of String)
        Dim SetTona3 As New HashSet(Of String)
        Dim hs1 As New HashSet(Of String)
        Dim hs2 As New HashSet(Of String)
        Dim tbl() As String
        Dim ListeT = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"}
        '
        i = 0
        '
        Do
            ' 
            a = ""
            b = ""
            '
            For k = 0 To 11
                ' Détermination de l'accord en cours et de la tonalité en cour (pour une ligne i donnée)
                ' *************************************************************************************
                Accord = Trim(Grid1.Cell(i + 1, 4).Text) ' la fonction TradAcc_LatAngl ne fait rien si l'accord est déjà en notation anglo-saxonne
                Tona = Trim(Grid1.Cell(i + 1, 3).Text)
                '
                NotesAccord = Det_NotesAccord(Accord)
                NotesAccord = Trad_ListeNotesEnD(NotesAccord, "-")
                NotesTona = Det_NotesGammes(Tona)
                NotesTona = Trad_ListeNotesEnD(NotesTona, " ")
                '
                tbl = Split(NotesAccord, "-")
                For j = 0 To UBound(tbl)
                    SetAccord.Add(Trim(tbl(j)))
                Next j
                '
                tbl = Split(NotesTona, "-")
                For j = 0 To UBound(tbl)
                    SetTona.Add(Trim(tbl(j)))    ' tonalité présente sur la ligne en cours
                    SetTonaBis.Add(Trim(tbl(j))) ' clonage de SetTona
                Next j
                '
                ' Calcul des tonalités majeures (12 tonalités)
                ' *******************************************
                aa = ListeT(k) + " " + Trim(Ty_Mode)
                a = aa ' sauvegarde du mode à l'origine de la transition
                aa = Det_NotesGammes(a)
                aa = Trad_ListeNotesEnD(aa, " ")

                '
                tbl = Split(aa, "-")
                For l = 0 To UBound(tbl)
                    SetTona2.Add(tbl(l))
                    SetTona3.Add(tbl(l)) ' clonage de SetTona2
                Next l
                ' test si accord appartient à la tonalité et détermination des notes de transition
                b = ""
                If SetTona2.IsSupersetOf(SetAccord) = True Then ' est-ce que l'ensemble SetAccord est inclu dan l'ensemble sSetTona2
                    SetTona2.SymmetricExceptWith(SetTona)
                    If SetTona2.Count <> 0 Then
                        SetTona2.ExceptWith(SetTonaBis)
                        For m = 0 To SetTona2.Count - 1
                            b = b + SetTona2.ElementAt(m) + " " ' il peut y avoir plusieurs notes de transition dans un même Mode
                        Next m
                    End If

                End If
                '
                ' Mise à jour dans la liste Transitions des données collectées 
                ' ************************************************************
                If Trim(b) <> "" Then
                    Transitions.Item(i).Mode.Add(Trim(a)) ' écriture du mode
                    tbl = Split(Trim(b))
                    For n = 0 To UBound(tbl)
                        Transitions.Item(i).Notes_T.Add(Trim(tbl(n)))
                    Next n
                    Transitions.Item(i).Notes_T.Add(";") ' séparateur permettant de retrouver le Mode Origine d'une de plusieurs notes de transition
                End If
                '
                SetTona2.Clear()
                SetTona3.Clear()
                SetAccord.Clear()
                SetTona.Clear()
                SetTonaBis.Clear()
            Next k
            i += 1
        Loop Until Trim(Grid1.Cell(i + 1, 4).Text) = "" Or i >= nbColonnesGrid1 - 1
    End Sub
    Public Sub Send_AllVolumes() ' ne pas supprimer : utilisé par la nouvelle table de misage
        ' contenu mis en commentaire lors de l'insertions des Pianoroll,drumedit et mix
        'If EnChargement = False Then
        'Dim pst As Integer
        'Dim volume As Byte
        'Dim canal As Byte
        ''
        'If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
        'SortieMidi.Item(ChoixSortieMidi).Open()
        'End If
        '
        'For pst = 0 To NombrePistes - 1 ' 
        'volume = CByte(Mix.PisteVolume.Item(pst).Value)
        'Canal = CByte(LesPistes.Item(pst).Canal)
        'SortieMidi.Item(ChoixSortieMidi).SendControlChange(canal, 7, volume)
        'Next
        'End If

    End Sub
    Public Function Det_NumDerAccord() As Integer ' contenu mis en commentaire lors de l'insertions des Pianoroll,drumedit et mix
        Dim i As Integer = nbMesures
        Det_NumDerAccord = -1 ' cas où pas d'accord trouvé
        While Trim(Grid2.Cell(1, i).Text) = "" And i >= 1
            i = i - 1
        End While
        If i >= 1 Then Det_NumDerAccord = i

    End Function
    Public Function TradD(note As String) As String ' traduction d'une note bémol en dièse
        Dim a As String = note
        Dim b As String = note


        If InStr(a, "b") <> 0 Then ' détection d'un bémol dans la note
            Select Case a
                Case "Db"
                    b = "C#"
                Case "Eb"
                    b = "D#"
                Case "Gb"
                    b = "F#"
                Case "Ab"
                    b = "G#"
                Case "Bb"
                    b = "A#"

            End Select
        End If
        Return Trim(b)
    End Function

    Sub PIANOROLL_Création2()
        Dim i As Integer
        Dim CoulBarout As Color

        For i = 0 To nb_PianoRoll - 1
            Select Case i + 1
                Case N_PistePianoR1
                    CoulBarout = CoulPRoll1
                Case N_PistePianoR2
                    CoulBarout = CoulPRoll2
                Case N_PistePianoR3
                    CoulBarout = CoulPRoll3
                Case N_PistePianoR4
                    CoulBarout = CoulPRoll4
                Case N_PistePianoR5
                    CoulBarout = CoulPRoll5
                Case N_PistePianoR6
                    CoulBarout = CoulPRoll6

            End Select
            '
            Dim a As New PianoRoll(i + 1, CoulBarout)
            listPIANOROLL.Add(a)
            '
            listPIANOROLL.Item(i).PCanal = (i + 1).ToString
            listPIANOROLL.Item(i).F1.Visible = False
            listPIANOROLL.Item(i).F1.Tag = i + 1
            '
            ' Maj des propriétés de Pianoroll
            listPIANOROLL.Item(i).PLangue = Module1.LangueIHM
            listPIANOROLL.Item(i).PNbMesures = nbMesures ' Arrangement1.nbMesures
            listPIANOROLL.Item(i).PMétrique = Métrique.Text
            listPIANOROLL.Item(i).PnbRépétitionMax = nbRépétitionMax
            listPIANOROLL.Item(i).PN_Can1erPianoR = 2

            ' partie à rajouter pour intégration pianoroll : définir Det_ListAcc, Det_ListGam, Det_ListMarq
            ' *********************************************************************************************
            '
            ' Appel de la construction
            listPIANOROLL(i).Construction_F1()
            ' Maj Paramètres de gestion
            PIANOROLLChargé.Add(True)
            '
            listPIANOROLL.Item(i).F1.Visible = False
            listPIANOROLL.Item(i).F1.FormBorderStyle = FormBorderStyle.None
            listPIANOROLL.Item(i).F1.TopLevel = False  '
            listPIANOROLL.Item(i).F1.TopMost = False   ' un seul des 2 suffit ?
            listPIANOROLL(i).F1.Dock = DockStyle.Fill
            '
            TabControl4.TabPages.Item(i + 1).Visible = False
            TabControl4.TabPages.Item(i + 1).Controls.Add(listPIANOROLL(i).F1) ' ajout de F1 dans l'onglet

            listPIANOROLL.Item(i).F1.Show()
            listPIANOROLL.Item(i).F1.Visible = True
            '
            TabControl4.TabPages.Item(i).Tag = i + 1

            listPIANOROLL.Item(i).F1.Refresh()
            listPIANOROLL.Item(i).Maj_CalquesMIDI()
            '
            listPIANOROLL.Item(i).ZoomInit()
        Next
    End Sub
    Sub MIXAGE_Création()
        ' L'objet drums est créé en public dans les variables globales de form1
        Mix.F3.Visible = False
        'Mix.F3.Tag = nb_DrumEdit      'nb_PianoRoll + 2
        '
        ' Maj des propriétés de DrumEdit
        ' ******************************
        Mix.PLangue = Module1.LangueIHM

        ' Appel de la construction
        ' ************************
        Mix.Construction_Formulaire()
        Mix.F3.FormBorderStyle = FormBorderStyle.None
        Mix.F3.TopLevel = False  '
        Mix.F3.TopMost = False   ' un seul des 2 suffit ?
        Mix.F3.Dock = DockStyle.Fill
        TabControl4.TabPages.Item(nb_PianoRoll + 2).Controls.Add(Mix.F3)

        Mix.F3.Show()
        'Mix.F3.BackColor = Color.Beige
        Mix.F3.Visible = True
    End Sub
    Sub DRUMS_Création()
        ' L'objet drums est créé en public dans les variables globales de form1
        Drums.F2.Visible = False
        'Drums.F2.Tag = nb_PianoRoll + 1
        Drums.F2.Tag = nb_PianoRoll + 1 ' la batterie est toujours en position 4 dans les onglets (sauf si on redescend à moins de 3 pistes).
        '
        ' Maj des propriétés de DrumEdit
        ' ******************************
        Drums.PLangue = Module1.LangueIHM
        Drums.PNbMesures = nbMesures '
        Drums.PMétrique = Métrique.Text
        Drums.PnbRépétitionMax = nbRépétitionMax
        Drums.PListAcc = Det_ListAcc()
        Drums.PListMarq = Det_ListMarq()
        ' Appel de la construction
        ' ************************
        Drums.Construction_F2()
        Drums.F2.FormBorderStyle = FormBorderStyle.None
        Drums.F2.TopLevel = False  '
        Drums.F2.TopMost = False   ' un seul des 2 suffit ?
        Drums.F2.Dock = DockStyle.Fill
        TabControl4.TabPages.Item(Convert.ToByte(Drums.F2.Tag)).Controls.Add(Drums.F2)

        Drums.F2.Visible = True
    End Sub
    Private Function Det_ListAcc() As String ' pour insertion pianoroll,drumedit et mix / à revoir
        Dim i As Integer
        Dim a As String = " "
        Dim liste1 As New List(Of String)
        '
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                a = a + Trim(Grid1.Cell(i, 1).Text) + "-" + Trim(Grid1.Cell(i, 4).Text) + ";" ' liste : 1.1.1-D;2.1.1-Am etc..
            End If
        Next
        a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        Return Trim(a)
        'Det_ListAcc = "C"
    End Function
    Public Function Det_ListTon_old() As String ' pour insertion pianoroll,drumedit et mix / à revoir
        Dim i As Integer
        Dim a As String = " "
        Dim liste1 As New List(Of String)
        '
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                a = a + Trim(Grid1.Cell(i, 1).Text) + "-" + Trim(Grid1.Cell(i, 3).Text) + ";" ' liste : 1.1.1-D 2.1.1-Am etc..
            End If
        Next
        a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        Return Trim(a)
    End Function
    Public Function Det_ListTon() As String ' pour insertion pianoroll,drumedit et mix / à revoir
        Dim i As Integer
        Dim a As String = " "
        Dim liste1 As New List(Of String)
        Dim m, t, ct As Integer
        Dim m1, t1, ct1, d1 As String

        ' TableEventH(m, t, ct).Tonalité
        '
        For m = 0 To nbMesures - 1
            For t = 0 To 5
                For ct = 0 To 4
                    If Trim(TableNotesAccordsZ(m, t, ct)) <> "" Then
                        m1 = Convert.ToString(m)
                        t1 = Convert.ToString(t)
                        ct1 = Convert.ToString(ct)
                        d1 = m1 + "." + t1 + "." + ct1
                        a = a + Trim(d1) + "-" + Trim(TableEventH(m, t, ct).Mode) + ";"
                    End If
                Next ct
            Next t
        Next m
        i = a.Length
        a = Trim(Microsoft.VisualBasic.Left(a, i - 1))
        Return a
    End Function

    Public Function Det_ListGam() As String ' pour insertion pianoroll,drumedit et mix / à revoir
        Dim i As Integer
        Dim a As String = " "
        Dim liste1 As New List(Of String)
        '
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 1).Text) <> "" Then
                a = a + Trim(Grid1.Cell(i, 1).Text) + "-" + Trim(Grid1.Cell(i, 5).Text) + ";" ' liste : 1.1.1-D 2.1.1-Am etc..
            End If
        Next
        a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        Return Trim(a)
    End Function
    Public Function Det_ListMarq() As String ' pour insertion pianoroll,drumedit et mix / à revoir
        Dim i As Integer
        Dim a As String = " "
        Dim liste1 As New List(Of String)
        '
        For i = 1 To Grid1.Rows - 1
            If Trim(Grid1.Cell(i, 2).Text) <> "" Then
                a = a + Trim(Grid1.Cell(i, 1).Text) + "-" + Trim(Grid1.Cell(i, 2).Text) + ";" ' liste : 1.1.1-D;2.1.1-Am etc..
            End If
        Next
        '
        a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        Return Trim(a)
    End Function

    Public Sub Maj_PianoRoll()
        Dim i As Integer
        Dim a, b, c, d As String
        a = Trim(Det_ListAcc())
        b = Trim(Det_ListGam())
        c = Trim(Det_ListMarq())
        d = Trim(Det_ListTon())
        For i = 0 To nb_PianoRoll - 1
            listPIANOROLL(i).PListAcc = a 'Det_ListAcc()
            listPIANOROLL(i).PListGam = b 'Det_ListGam()
            listPIANOROLL(i).PListMarq = c 'Det_ListMarq()
            listPIANOROLL(i).PListTon = d 'Det_ListMarq()
            'listPIANOROLL(i).F1_Refresh()
            listPIANOROLL(i).Maj_CalquesMIDI()
            'listPIANOROLL(i).Clear_AllLayers()
            'listPIANOROLL(i).F1_Refresh()
            '


        Next
    End Sub
    Sub Maj_DrumEdit()
        Drums.PListAcc = Det_ListAcc()
        Drums.PListMarq = Det_ListMarq()
        Drums.F2_Refresh()
    End Sub

    Public Sub GestSolo(solocour2 As Boolean)
        Dim i As Integer
        If SoloCours2 = False Then
            'For i = 0 To Module1.nb_BlocPistes - 1
            'SoloBout.Item(i).Enabled = False
            'Next
            For i = 0 To nb_PianoRoll - 1
                listPIANOROLL.Item(i).SoloBoutPR.Enabled = False
            Next
            Drums.SoloBoutDRM.Enabled = False
        Else
            'For i = 0 To Module1.nb_BlocPistes - 1
            'SoloBout.Item(i).Enabled = True
            'Next
            For i = 0 To nb_PianoRoll - 1
                listPIANOROLL.Item(i).SoloBoutPR.Enabled = True
            Next
            Drums.SoloBoutDRM.Enabled = True
        End If

    End Sub
    Public Sub NomduSon_TextChanged(sender As Object, e As EventArgs) Handles NomduSon.TextChanged 'Handles NomduSon.TextChanged  ' <-- concerne  les noms des bloc - il faudra créer un nom pour la piste accord seulement
        Dim a As String
        Dim b As String = Trim(NomduSon.Text)
        Dim j1, j2, k As Integer
        Dim ind As Integer
        ind = 0

        If Not EnChargement Then
            ' retrait des séparateurs interdits
            j1 = InStr(b, "&")
            j2 = InStr(b, ",")
            If j1 <> 0 Or j2 <> 0 Then
                k = NomduSon.SelectionStart
                RemoveHandler NomduSon.TextChanged, AddressOf NomduSon_TextChanged
                a = NomduSon.Text.Replace("&", "")
                NomduSon.Text = Trim(a)
                a = NomduSon.Text.Replace(",", "")
                NomduSon.Text = Trim(a)
                NomduSon.SelectionStart = k - 1 'Len(a)
                AddHandler NomduSon.TextChanged, AddressOf NomduSon_TextChanged
            End If
            ' Mise à jour du Nomduson dans la table de mixage
            RemoveHandler Me.Mix.NomduSon.Item(ind).TextChanged, AddressOf Me.Mix.NomduSon_TextChanged
            Me.Mix.NomduSon.Item(ind).Text = Trim(NomduSon.Text)
            AddHandler Me.Mix.NomduSon.Item(ind).TextChanged, AddressOf Me.Mix.NomduSon_TextChanged
        End If
    End Sub
    Public Sub TraitementSoloHypA(CanMidi As Integer) ' <- traitement du bouton solo dans form1
        'Dim i, j, k As Integer
        'If (SoloCours2 = True And CanMidiCours = CanMidi) Or SoloCours2 = False Then
        'Mix.Gestion_Solo2(CanMidi) ' gestion du solo dans la table de mixage
        '' gestion des couleurs
        'j = 0
        'i = CanMidi
        ''
        'GestSolo(SoloCours2)
        '' activation du mode solo
        'Do
        'If SoloCours2 = False Then
        'k = CanMidi
        'SoloBout.Item(i).BackColor = Color.OrangeRed
        'SoloBout.Item(i).ForeColor = Color.Yellow
        'SoloBout.Item(i).Enabled = True
        'Else
        'k = -1
        '
        'SoloBout.Item(i).BackColor = Color.Beige
        'SoloBout.Item(i).ForeColor = Color.Black
        'End If
        'i += 6
        'j += 1
        'Loop Until j >= Module1.nb_Variations
        ''

        'PisteSolo = k
        ''
        'If SoloCours2 = False Then
        'CanMidiCours = CanMidi
        'SoloCours2 = True
        'Else
        'CanMidiCours = -1
        'SoloCours2 = False
        'End If
        'End If
    End Sub
    Public Function CalcDyn(Dyn As Byte, Accent As Integer, Position As Integer) As Byte '<-- calcul des accents / sans doute à retirer
        Dim Multiple As Byte = 16
        If Me.Accent1_3 Then Multiple = 8

        CalcDyn = Dyn
        If Module1.IsMultiple(Position, Multiple) Then
            CalcDyn = Dyn + Accent
            If CalcDyn > 127 Then CalcDyn = 127
        End If
    End Function

    Private Sub TabControl4_Selected(sender As Object, e As TabControlEventArgs) Handles TabControl4.Selected
        OngletCours_Edition = e.TabPageIndex
        SousCas_OngletCours_Edition = 0
        '
        '
        ' désactiver le rétablissement pour tout ce qui n'et pas PianoRoll

        If e.TabPageIndex = 0 Or e.TabPageIndex = N_PisteDrums Then
            Retablir.Enabled = False
        Else
            Retablir.Enabled = True
        End If
    End Sub
    ' **********************************************************************
    ' Récup_Volume : récupération des volumes des pistes                   *
    ' Les informations sont prévelées dans l'IHM                           *
    ' **********************************************************************
    Public ReadOnly Property Récup_Mute(PisteMidi As Integer) As Boolean
        Get
            Return Me.Mix.soloVolume.Item(PisteMidi).Checked
        End Get
    End Property


    ' **********************************************************************
    ' Récup_Volume : récupération des volumes des pistes                   *
    ' Les informations sont prévelées dans l'IHM                           *
    ' **********************************************************************
    Public ReadOnly Property Récup_Volume(PisteMidi As Integer) As String
        Get
            Return Convert.ToString(Me.Mix.PisteVolume.Item(PisteMidi).Value)
        End Get
    End Property
    ' ***********************************************************************
    ' Récup_VolumeActif : récupération de l'état actif (enabled) des pistes *
    '                     sert aus système de Mute de la table de mixage    *
    ' Les informations sont prévelées dans l'IHM                            *
    ' ***********************************************************************
    Public ReadOnly Property Récup_VolumeActif(PisteMidi As Integer) As Boolean
        Get
            Return Convert.ToString(Me.Mix.soloVolume.Item(PisteMidi).Checked)
        End Get
    End Property
    Private Sub TransportToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles TransportMenuItem.Click
        ' Lancement de la barre de transport
        ' **********************************
        If Not Module1.IsLoaded(Transport) Then
            Transport.TopLevel = True
            Transport.TopMost = True
            Transport.StartPosition = FormStartPosition.CenterScreen
            Transport.Show()
        Else
            '
            Dim x = Me.Location.X + (Me.Size.Width - Transport.Width) \ 2 'r.Left + (r.Width - Transport.Width) \ 2
            Dim y = Me.Location.Y 'r.Top + (r.Height - Transport.Height) \ 2
            Transport.TopLevel = True
            Transport.TopMost = True
            Transport.Location = New Point(x, y)
        End If

    End Sub

    Private Sub NomduSon_TextChanged_1(sender As Object, e As EventArgs)
        Dim a As String
        Dim j1, j2, k As Integer
        Dim ind As Integer = 0

        ' retrait des séparateurs interdits
        j1 = InStr(Trim(NomduSon.Text), "&")
        j2 = InStr(Trim(NomduSon.Text), ",")
        If j1 <> 0 Or j2 <> 0 Then
            k = NomduSon.SelectionStart
            RemoveHandler NomduSon.TextChanged, AddressOf NomduSon_TextChanged
            a = NomduSon.Text.Replace("&", "")
            NomduSon.Text = Trim(a)
            a = NomduSon.Text.Replace(",", "")
            NomduSon.Text = Trim(a)
            NomduSon.SelectionStart = k - 1 'Len(a)
            AddHandler NomduSon.TextChanged, AddressOf NomduSon_TextChanged
        End If
        ' Mise à jour du Nomduson dans la table de mixage
        RemoveHandler Me.Mix.NomduSon.Item(ind).TextChanged, AddressOf Me.Mix.NomduSon_TextChanged
        Me.Mix.NomduSon.Item(ind).Text = Trim(NomduSon.Text)
        'AddHandler Me.Mix.NomduSon.Item(ind).TextChanged, AddressOf Me.Mix.NomduSon_TextChanged
    End Sub
    Public Function Det_DerEventH2() As Integer
        Dim i, j As Integer
        Det_DerEventH2 = Module1.nbMesuresUtiles
        j = Module1.nbMesuresUtiles
        For i = j To 1 Step -1
            If Trim(Grid2.Cell(1, i).Text) <> "" Then
                Det_DerEventH2 = i
                Exit For
            End If
        Next i
    End Function
    Sub PlayArp()
        Dim tbl2() As String
        Dim Evénement As String = "Note"
        Dim i, j As Integer
        Dim k As Integer = 0
        Dim Position, Durée As Single
        Dim aa As String
        'Dim PisteLectAcc As Integer = Det_PremPisteActive()


        Horloge1.Reset()
        Horloge1.BeatsPerMinute = Transport.Tempo.Value

        NumMesList22()  ' call back pour affichage des mesures
        For i = 0 To nb_TotalPistes - 1 'Arrangement1.Nb_PistesMidi
            If LesPistes.Item(i).part.Count > 0 Then
                For j = 0 To LesPistes.Item(i).part.Count - 1
                    tbl2 = Split(LesPistes.Item(i).part(j))
                    Select Case tbl2(0)
                        Case "Acc"
                            'tbl2(0)="Acc"
                            'tbl2(1)=Chiffrage
                            'tbl2(2)=Numéro Piste
                            'tbl2(3)=Numéro d'accord
                            'tbl2(4)=Position
                            Position = ((Val(tbl2(4)) / 4) + 1)
                            Horloge1.Schedule(New CallbackMessage(AddressOf EVT_Acc, Position))
                            k = k + 1
                        Case "Note"
                            'tbl2(0)="Note"
                            'tbl2(1)=Numéro Piste
                            'tbl2(2)=Numéro de canal
                            'tbl2(3)=Numéro de Note
                            'tbl2(4)=Position
                            'tbl2(5)=Duration
                            'tbl2(6)=Dyn
                            '
                            ' Remarque sur le calcul de Position net de Durée
                            ' 1 - La dll midi dotnet impose une expression en beat avec virgule flottante (noire) des Positions et Durées
                            ' 2 - HyperArp compte la Position et la Durée en double croche (16 divisions)
                            ' 3 - Donc, pour exprimer les Positions et Durées en noire, il faut les diviser par 4
                            ' 4 - Remarque : si HyperArp décide de compter en triple croches(32 divisions), il faudra faire une division par 8.
                            '
                            ' NoteOnOffMessage(DeviceBase device,Channel channel,Pitch pitch,int velocity,float time,Clock clock, float duration
                            Position = ((Val(tbl2(4)) / 4) + 1)
                            Durée = ((Val(tbl2(5)) / 4) - 0.0625)
                            '                                                                        Canal MIDI            N° Note             Dyn                 Position  Horlorge  Durée
                            Horloge1.Schedule(New NoteOnOffMessage(SortieMidi.Item(ChoixSortieMidi), CByte(Val(tbl2(2))), CByte(Val(tbl2(3))), CByte(Val(tbl2(6))), Position, Horloge1, Durée))
                        Case "PRG"
                            'tbl2(0)="PRG"
                            'tbl2(1)=Numéro Piste
                            'tbl2(2)=Numéro de canal
                            'tbl2(3)=Position
                            'tbl2(4)=numPRG
                            Position = ((Val(tbl2(3)) / 4) + 1)
                            Horloge1.Schedule(New Midi.ProgramChangeMessage(SortieMidi.Item(ChoixSortieMidi), CByte(Val(tbl2(2))), CByte(Val(tbl2(4))), Position))
                        Case "CTRL"
                            'tbl(0)="CTRL"
                            'tbl(1)=Numéro Piste
                            'tbl(2)=Numéro de canal
                            'tbl(3)=Position (en nombre de double corche (16)
                            'tbl(4)=Numéro de controleur
                            'tbl(5)=Val CTRL
                            aa = tbl2(4)
                            Position = ((Val(tbl2(3)) / 4) + 1)
                            Horloge1.Schedule(New Midi.ControlChangeMessage(SortieMidi.Item(ChoixSortieMidi), CByte(Val(tbl2(2))), CByte(Val(tbl2(4))), CInt(Val(tbl2(5))), Position))
                        Case "FIN"
                            'tbl(0)="FIN"
                            'tbl(1)=Numéro Piste
                            'tbl(2)=Position
                            If tbl2(1) = 0 Then ' dans HyperVoicing la piste Acccord de N°=0 est toujours présente
                                Position = ((Val(tbl2(2)) / 4) + 1)
                                Horloge1.Schedule(New CallbackMessage(AddressOf EVT_FIN, Position + 1))
                            End If
                        Case Else
                    End Select
                Next j
            End If
        Next i
        ' 
        ' timer d'affichage des eventh
        ' ****************************
        NumAcc = 0
        Arrangement1.NumAccords.PointeurLect = 0 ' pour affichage des n° d'accords
        PointAffAccord = 0 ' 
        IndexListMesures = 0
        If Not Répéter.Checked Then _boucle = 0
        AffNumMes = 0 ' pointeur de lecteur de la liste ListNumMes contenu les Mesures à afficher
        Tempo_Aff_EventH.Enabled = False
        Tempo_Aff_EventH.Interval = 100

        ArrêterTimer = False
        Label6.Text = "---"

        ' Démarrage Play Back MIDI
        ' ************************
        'Fermer_MIDI()
        'Dim b As Boolean = EntréeMidi.Item(ChoixSortieMidi).IsOpen
        Try
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            If Horloge1.IsRunning Then
                Horloge1.Stop()
                Horloge1.Reset()
            End If
            PlayMidi.Enabled = False
            If Transport.Remote.Checked Then Send_CTRL54_Remote()
            Horloge1.Start()
            Tempo_Aff_EventH.Start()

            '
            ' Désactivation de l'application pendant le jeu
            'Me.Enabled = False
            '
        Catch ex As Exception
            Dim a As String = SortieMidi.Item(ChoixSortieMidi).Name
            If LangueIHM = "fr" Then
                MessageHV.PTitre = "Avertissement"
                MessageHV.PContenuMess = "Alarme : procédure 'PlayArp' : l'interface MIDI pourrait être occupée par une autre application." _
+ vbCrLf + "- choisissez une autre sortie MIDI " + "(" + a + ")" _
+ vbCrLf + "- ou une autre application MIDI pourrait être présente : libérez cette application ou mettez la en tâche de fond," _
+ vbCrLf + "- ou redémarrez votre PC." _
+ vbCrLf + ex.Message
                MessageHV.PTypBouton = "OK"
            Else
                MessageHV.PTitre = "Warning"
                MessageHV.PContenuMess = "Alarme : procédure 'PlayArp :  MIDI interface could be occupied by another application." _
+ vbCrLf + "- choose another MIDI output," + "(" + a + ")" _
+ vbCrLf + "- or another MIDI application might be present: release this application or put it in the background," _
+ vbCrLf + "- or reboot your PC." _
+ vbCrLf + ex.Message
                MessageHV.PTypBouton = "OK"
            End If
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try
    End Sub
    Sub EVT_Acc()
        CallB_Aff_Acc = True
    End Sub
    Sub EVT_NumMesures()
        CallB_Aff_Mesure = True
    End Sub


    '
    ''' <summary>
    ''' NumMesList22 : création d'une liste permettant d'afficher
    ''' les N0 de mesures lors de l'exécution d'un morceau.
    ''' </summary>
    Sub NumMesList22()
        Dim ListNumes As New List(Of String) ' pour le test
        Dim i, j, k As Integer

        Dim NumMesure As Integer
        Dim position, position2 As Integer
        Dim RepDerAcc As Integer = 0

        Dim DerAcc As Integer = TermeFin 'Terme.Value 'Det_NumDerAccord()

        Dim _boucle As Integer = Transport.LoopNumber.Value - 1
        'If Not Répéter.Checked Then _boucle = 0

        Dim Début2 As Integer = Transport.Début.Value - 1

        i = 0
        j = 0
        ListNumMesures.Clear()
        ListNumAcc.Clear()

        For k = 0 To _boucle
            NumMesure = Transport.Début.Value 'Début2
            Do
                ListNumMesures.Add(Convert.ToString(NumMesure)) ' pour lecture par le tempo de Call back
                ListNumAcc.Add(EventHDsMesure("Accord", NumMesure))
                position = j
                position2 = (position / 4) + 1 ' position pour schedule
                Horloge1.Schedule(New CallbackMessage(AddressOf EVT_NumMesures, position2))
                NumMesure = NumMesure + 1
                j = j + 16
            Loop Until NumMesure = TermeFin + 1 'Terme.Value + 1 '  i >= ((DerAcc - Début2) + RepDerAcc) * 16
        Next k

    End Sub
    Private ListNotesAcc As String = ""
    'Public ReadOnly Property PListNotesAcc() As String
    'Get
    'Me.ListNotesAcc = Contruction_ListeNotesAcc() ' Répéter, Boucle, Form1_Début, Form1_Fin, NumDerAcc
    'Return Me.ListNotesAcc
    'End Get
    'End Property
    Public Function Contruction_ListeNotesAcc(TermeFin As Integer, Midifi As Boolean) As String
        Dim mdeb As Integer
        Dim tdeb As Integer
        Dim ctdeb As Integer
        Dim mfin As Integer
        Dim tfin As Integer
        Dim ctfin As Integer
        Dim i, ii, n As Integer
        Dim m, t, ct As Integer
        Dim a, b, notes As String
        Dim ligne1 As String = ""
        Dim tbl() As String
        Dim Boucle As Integer = Convert.ToInt16(Transport.LoopNumber.Value)
        If Not Répéter.Checked Then Boucle = 1
        Dim nMCycle As Integer = -1
        Dim DébutdeNote, DuréedeNote As String
        Dim NPiste As String = Module1.N_PisteAcc.ToString
        Dim NCanal As String = Module1.N_PisteAcc.ToString ' N) de canal = N° de piste
        Dim nM As Integer = 0
        Dim Vélocité, Vélocité_Stack As String
        Dim nte, nte_stack As String
        Dim Sortir As Boolean = False

        ' Initialisation des variables

        'If Transport.Répéter.Checked = True Then Boucle = Transport.LoopNumber.Value
        '
        Boucle = Transport.LoopNumber.Value
        If Midifi Then Boucle = 1

        'Dim Ecart As Integer = (Terme.Value - Début.Value) + 1
        Dim Ecart As Integer = (TermeFin - Transport.Début.Value) + 1
        '
        mdeb = Transport.Début.Value
        tdeb = 0
        ctdeb = 0
        'mfin = Terme.Value 'nbMesuresUtiles '- 1
        mfin = TermeFin
        tfin = 5
        ctfin = 4

        ' Init diverses
        LongueurFinDerMesure = EndMeasureNumber.Value
        ValeurRépétition = -1
        '
        ' Ecriture du volume
        a = ""
        If Mix.AutorisVol.Checked = True Then
            Volume = Convert.ToString(Me.Récup_Volume(n))
            If Me.Récup_VolumeActif(n) = False Then Volume = "0" ' gestion du système de Mute de la table de mixage
            a = "CTRL" + " " + Trim(n) + " " + Trim(n) + " " + "0" + " " + Convert.ToString(CVolume) + " " + Volume + "-"
        End If
        '
        ' Gestion du stacking (empilement)
        ' ********************************
        If MixActivationSM.Checked Then
            For i = 0 To 4
                '                      N° Piste           N° Canal                     Position            N° CTRL           Valeur CTRL
                a = a + "CTRL" + " " + n.ToString + " " + Convert.ToString(10 + i) + " " + "0" + " " + CPAN.ToString + " " + PAN.Item(i).Value.ToString + "-"
                a = a + "CTRL" + " " + n.ToString + " " + Convert.ToString(10 + i) + " " + "0" + " " + CVolume.ToString + " " + VOLSTACK.Item(i).Value.ToString + "-"
                If PRG.Item(i).SelectedIndex - 1 > -1 Then
                    a = a + "PRG" + " " + n.ToString + " " + Convert.ToString(10 + i) + " " + "0" + " " + Convert.ToString(PRG.Item(i).SelectedIndex - 1) + "-"
                End If
            Next i
        End If



        ' Ecriture du changement de programme (program change)
        Dim PRG_ As Integer = ListGS.SelectedIndex - 1
        If PRG_ <> -1 Then
            a = a + "PRG" + " " + Trim(n) + " " + Trim(n) + " " + "0" + " " + Convert.ToString(PRG_) + "-"
        End If
        '
        m = mdeb
        ' Ecriture des notes
        For ii = 0 To Boucle - 1
            Sortir = False
            ValeurRépétition = ValeurRépétition + 1
            nMCycle = nMCycle + 1

            ligne1 = "Note" + " "
            For m = mdeb To mfin
                For t = tdeb To tfin '- 1
                    For ct = ctdeb To ctfin
                        If TableEventH(m, t, ct).Ligne <> -1 Then
                            nM = (nMCycle * Ecart) + m
                            Position = Trim(Str(nM)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            PositionDansCycle = Trim(m) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            '
                            Clef = "#" ' les notes dans TableNotesAccordsZ sont toujours en #
                            notes = Trim(TableNotesAccordsZ(m, t, ct))
                            tbl = Split(notes)
                            '
                            ' Note Piste Canal N°Note Position Durée Vélocité
                            ' 
                            ' Réunion des paramètres Début et durée des notes de l'accord
                            Vélocité = Trim(TableEventH(m, t, ct).Vel)
                            DébutdeNote = Trim(DébutEVT2(Position))
                            DuréedeNote = Trim(DuréeNote3(TableEventH(m, t, ct).Ligne))
                            DernièreNoteCycle = Det_DerNoteCycle3()
                            If PositionDansCycle = DernièreNoteCycle Then
                                Sortir = True ' sortir de la boucle pour cause de dernier accord
                                'If ii = Boucle-1 Then DuréedeNote = Trim(Det_DuréeFIN2(Trim(Position), Val(DuréedeNote), True)) ' rallongement du dernier accord
                                If ii = Boucle - 1 Then
                                    DuréedeNote = DuréedeNote + (16 * Transport.LFinal.Value) ' rallonge de l'accord de fin
                                End If

                            End If

                            ' Mise en forme pour chaque note de l'accord : Note Piste Canal N°Note Position Durée Vélocité
                            ' NOTE
                            ligne1 = ""
                            For i = 0 To UBound(tbl) ' i est le N° de la voie de l'accord
                                nte = Det_NumNote(tbl(i))
                                If StackMode.Checked Then
                                    If InitialVoicing.Checked Then ' correspond à "Ajouter accords standards" sur le canal 1 ("0")
                                        ligne1 = ligne1 + "Note" + " " + NPiste + " " + "0" + " " + nte + " " + DébutdeNote + " " + DuréedeNote + " " + Vélocité + "-" ' N
                                        'a = a + ligne1
                                    End If
                                    'NCanal = Det_Canal(i, NCanal) ' détermination du canal de la voie i en cours pour prendre en compte le stacking (empilement si nécessaire).
                                    NCanal = CANAUX.Item(4 - i).Value - 1 ' lecture du canal midi de la voie i en cours pour prendre en compte le stacking 
                                    nte_stack = nte 'TranspNote(nte, i)
                                    Vélocité_Stack = VEL.Item(4 - i).Value.ToString
                                    If Not (MUTEVOICE.Item(4 - i).Checked) Then
                                        ligne1 = ligne1 + "Note" + " " + NPiste + " " + NCanal + " " + nte_stack + " " + DébutdeNote + " " + DuréedeNote + " " + Vélocité_Stack + "-" ' N
                                    End If
                                Else
                                    ligne1 = ligne1 + "Note" + " " + NPiste + " " + NCanal + " " + nte + " " + DébutdeNote + " " + DuréedeNote + " " + Vélocité + "-" ' 
                                End If
                            Next i
                            '
                            ' MARQUEUR (si existe)
                            b = Trim(EventHDsMesure("Marqueur", m))
                            If b <> "" Then ligne1 = ligne1 + "MRQ" + " " + b + " " + DébutdeNote + "-"
                            '
                            a = a + ligne1

                            ' Courbe expression sur la colonne courante
                            ' *****************************************
                            If ActExp.Checked And ActExp.Enabled Then
                                finexp = Convert.ToInt16(DuréedeNote) '+ (16 * Transport.LFinal.Value) ' si dernière note traité alors on prolonge la maj du contrôleur
                                If m <> 0 And t <> 0 And ct <> 0 Then
                                    colonne = Tad_Pos_Col(m, t, ct)
                                    For k = 0 To finexp - 1
                                        b = CTRL_exp_Symph(colonne, NCanal, ii)
                                        If Trim(b) <> "-1" Then a = a + Trim(b)
                                        colonne = colonne + 1
                                    Next
                                End If
                            End If
                        End If
                        If Sortir Then Exit For
                    Next ct
                    If Sortir Then Exit For
                Next t
            Next m
        Next ii
        If Trim(a) <> "" Then
            a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        End If
        Return a
    End Function

    Function Tad_Pos_Col(m As Integer, t As Integer, ct As Integer) As Integer
        ' formule 16m-16 + 2t - 2 ct -1
        ' résolution de la formule : 16m + 2t + ct -18
        Dim i As Integer
        '
        'i = ((16 * m) + (2 * t) + ct) - 18
        i = (m - 1) * 16 + (t - 1) * 2 + ct - 1
        Return i
    End Function




    Function CTRL_exp_Symph(j As Integer, canal As Byte, k As Integer) As String ' j est la colonne en cours, k est le nombre de répétition
        Dim DebPart As Integer
        Dim FinPart As Integer
        Dim TValPréded As String = "0"
        Dim ValeurCtrl As String
        Dim Form1_Début As Integer = Transport.Début.Value
        Dim Form1_Fin As Integer = Transport.Terme.Value
        Dim _boucle As Integer = 1
        Dim Boucle As Integer = Convert.ToInt16(Transport.LoopNumber.Value)
        Dim Répéter As Boolean = Transport.Répéter.Checked
        Dim nbColonnesMes As Integer = Det_DivisionMes()
        Dim DebutNote As Integer
        Dim CTRL As String = 1 'Det_CTRL(0).ToString
        Dim Ligne As String = "-1"
        Dim n As String
        Dim P As Integer = 0 ' P est le N° de CTRL dans l'ordre des onglets ici il est toujours = 0

        ' Détermination du DEPART et de la FIN en N° de mesures de la séquence à jouer : sert à calculer LongueurPart 
        DebPart = Form1_Début   ' DEPART en N° de mesures
        FinPart = Form1_Fin     ' FIN en N° de mesures
        Dim LongueurPart As Integer = ((FinPart - DebPart) + 1) * nbColonnesMes ' Longueur de la séquence à jouer en nombre de colonnes
        '
        n = Convert.ToString(canal)

        '
        If Répéter Then _boucle = Boucle ' répéter doit être à False quand on exporte un MIDI File /_boucle sera alors à 1 (voir le dim de _boucle)
        nbColonnesMes = Det_DivisionMes()
        ' Rétablissement de Form1_Fin en fonction du nombre de prolongation de l'acccord qu'il pointe <-- voir pour supprimer aussi dans pianoroll
        'a = Grid2.Cell(1, Form1_Fin).Text
        'i = Val(Grid2.Cell(1, Form1_Fin).Text) - 1
        'If Form1_Fin = Det_NumDerAccord() Then
        'Form1_Fin = Form1_Fin + Val(Grid2.Cell(1, Form1_Fin).Text) - 1 ' cacul du N° de mesure du ernier accord à jouer
        'End If
        ' Détermination du DEPART et de la FIN en N° de colonnes de la séquence à jouer(sert à la boucle exécuter plus loins)
        Départ = ((nbColonnesMes) * (Form1_Début - 1)) + 1 ' DEPART en N° de colonnes
        'nbColonnes = (nbColonnesMes) * Form1_Fin           ' FIN en N° de colonnes

        ' analyse des courbes de controleurs
        ' **********************************
        j = j + 1
        ValeurCtrl = VAL_Ctrl_exp(j) ' j= colonnes en cours
        If (ValeurCtrl <> TValPréded And Trim(ValeurCtrl) <> "-1") Or (j = Départ) Then '' ValeurCtrl= -1 ignifie pas de valeur
            ' on n'écrit l'expression que si le check du CTRL est true
            If j = Départ And j > 1 Then ' on va rechercher une valeur de CTRL située au départ ou avant la valeur de départ. Si le départ est en colonne 1 alors on prendre la valeur de la colonne car il n'y a pas de valeur avant la colonne 1
                ValeurCtrl = DetCTRLAvant(P, j)
                If ValeurCtrl = "-1" And P <> 0 Then ValeurCtrl = "0" ' P=0 est le CTRL d'expression et on peut pas le mettre à Zéro si aucune valeur n'est présente car cela coupe le son du canal
            End If
            If Trim(ValeurCtrl) <> "-1" Then ' cas du controleur d'expression sans valeur avant
                NumPiste = "0"
                canal = Trim(n)
                DebutNote = (j - 1) - ((Form1_Début - 1) * nbColonnesMes)
                DebutNote = Convert.ToString(DebutNote + (k * LongueurPart))
                Ligne = "CTRL" + " " + Trim(NumPiste) + " " + Trim(canal) + " " + Trim(DebutNote) + " " + Trim(CTRL) + " " + Trim(ValeurCtrl) + "-"
                TValPréded = ValeurCtrl
            End If
        End If

        Return Ligne
    End Function
    ''' <summary>
    ''' ValCtrl : retourne la valeur du CTRL dans la courbe N_ Courbe pour la colonne 'colonne'. (valeur= 0 à 127)
    ''' </summary>
    ''' <param name="colonne"></param> Colonne de la grille des courbes : colonne = postion de l'évènement en double croches à partir du début
    ''' <returns></returns>
    Private Function VAL_Ctrl_exp(colonne As Integer) As String
        Dim ligne As Integer
        Dim j As Integer = colonne
        Dim k As Integer = 0
        For ligne = 4 To Courbexp.Rows - 1
            If ligne = Courbexp.Rows - 1 Then ' courbes.Rows=dernière ligne donc 0 pour le ctrl
                k = 0 ' remise à 0 du CTRl si pas de valeur
            Else
                If Courbexp.Cell(ligne, j).BackColor <> Color.White Then
                    k = ((Courbexp.Rows - 1 - ligne) * 2) - 1
                    Exit For
                End If
            End If
        Next
        k = k - 1
        Return k.ToString
    End Function
    Function Det_CTRL(n_Courbe As Integer) As Byte
        Dim k As Integer = 0
        Select Case n_Courbe
            Case 0 ' Expression
                k = 11
            Case 1 ' Modulation
                k = 0
            Case 2 ' PAN
                k = 7
            Case 3 ' Libre 1
                k = 50
            Case 4 ' Libre 2
                k = 51
            Case 5 ' Libre 2
                k = 53
            Case 6 ' Libre 2
                k = 53
        End Select
        Return k
    End Function
    Private Function DetCTRLAvant(Ctrl As Integer, coldeb As Integer)
        Dim i As Integer
        Dim a As String = -1
        For i = coldeb To 1 Step -1
            a = VAL_Ctrl_exp(i)
            If a <> "-1" Then Exit For
        Next i
        Return a
    End Function
    Function Det_DivisionMes() As Integer
        Select Case Me.Dénominateur
            Case 4
                Det_DivisionMes = Me.Numérateur * 4
            Case 8
                Det_DivisionMes = Me.Numérateur * 2
            Case Else
                Det_DivisionMes = 16
        End Select
    End Function

    Public Function Contruction_ListeNotesAcc_old(TermeFin As Integer) As String
        Dim mdeb As Integer
        Dim tdeb As Integer
        Dim ctdeb As Integer
        Dim mfin As Integer
        Dim tfin As Integer
        Dim ctfin As Integer
        Dim i, ii, n As Integer
        Dim m, t, ct As Integer
        Dim a, b, notes As String
        Dim ligne1 As String = ""
        Dim tbl() As String
        Dim Boucle As Integer = Convert.ToInt16(Transport.LoopNumber.Value)
        If Not Répéter.Checked Then Boucle = 1
        Dim nMCycle As Integer = -1
        Dim DébutdeNote, DuréedeNote As String
        Dim NPiste As String = Module1.N_PisteAcc.ToString
        Dim NCanal As String = Module1.N_PisteAcc.ToString ' N) de canal = N° de piste
        Dim nM As Integer = 0
        Dim Vélocité As String
        Dim nte As String
        Dim Sortir As Boolean = False

        ' Initialisation des variables
        Boucle = 1
        'If Transport.Répéter.Checked = True Then Boucle = Transport.LoopNumber.Value
        '
        Boucle = Transport.LoopNumber.Value
        '
        'Dim Ecart As Integer = (Terme.Value - Début.Value) + 1
        Dim Ecart As Integer = (TermeFin - Transport.Début.Value) + 1
        '
        mdeb = Transport.Début.Value
        tdeb = 0
        ctdeb = 0
        'mfin = Terme.Value 'nbMesuresUtiles '- 1
        mfin = TermeFin
        tfin = 5
        ctfin = 4
        '
        ' Init diverses
        LongueurFinDerMesure = EndMeasureNumber.Value
        ValeurRépétition = -1
        '
        ' Ecriture du volume
        a = ""
        If Mix.AutorisVol.Checked = True Then
            Volume = Convert.ToString(Me.Récup_Volume(n))
            If Me.Récup_VolumeActif(n) = False Then Volume = "0" ' gestion du système de Mute de la table de mixage
            a = "CTRL" + " " + Trim(n) + " " + Trim(n) + " " + "0" + " " + Convert.ToString(CVolume) + " " + Volume + "-"
        End If
        '
        ' Ecriture du changement de programme (program change)
        Dim PRG_ As Integer = ListGS.SelectedIndex - 1
        If PRG_ <> -1 Then
            a = a + "PRG" + " " + Trim(n) + " " + Trim(n) + " " + "0" + " " + Convert.ToString(PRG_) + "-"
        End If
        '
        m = mdeb
        ' Ecriture des notes
        For ii = 0 To Boucle - 1
            Sortir = False
            ValeurRépétition = ValeurRépétition + 1
            nMCycle = nMCycle + 1

            ligne1 = "Note" + " "
            For m = mdeb To mfin
                For t = tdeb To tfin '- 1
                    For ct = ctdeb To ctfin
                        If TableEventH(m, t, ct).Ligne <> -1 Then
                            nM = (nMCycle * Ecart) + m
                            Position = Trim(Str(nM)) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            PositionDansCycle = Trim(m) + "." + Trim(Str(t)) + "." + Trim(Str(ct))
                            '
                            Clef = "#" ' les notes dans TableNotesAccordsZ sont toujours en #
                            notes = Trim(TableNotesAccordsZ(m, t, ct))
                            tbl = Split(notes)
                            '
                            ' Note Piste Canal N°Note Position Durée Vélocité
                            ' 
                            ' Réunion des paramètres Début et durée des notes de l'accord
                            Vélocité = Trim(TableEventH(m, t, ct).Vel)
                            DébutdeNote = Trim(DébutEVT2(Position))
                            DuréedeNote = Trim(DuréeNote3(TableEventH(m, t, ct).Ligne))
                            DernièreNoteCycle = Det_DerNoteCycle3()
                            If PositionDansCycle = DernièreNoteCycle Then
                                Sortir = True ' sortir de la boucle pour cause de dernier accord
                                'If ii = Boucle-1 Then DuréedeNote = Trim(Det_DuréeFIN2(Trim(Position), Val(DuréedeNote), True)) ' rallongement du dernier accord
                                If ii = Boucle - 1 Then
                                    DuréedeNote = DuréedeNote + (16 * Transport.LFinal.Value) ' rallonge de l'accord de fin
                                End If

                            End If

                            ' Mise en forme pour chaque note de l'accord : Note Piste Canal N°Note Position Durée Vélocité
                            ' NOTE
                            ligne1 = ""
                            For i = 0 To UBound(tbl) ' i est le N° de la voie de l'accord
                                nte = Det_NumNote(tbl(i))

                                ligne1 = ligne1 + "Note" + " " + NPiste + " " + NCanal + " " + nte + " " + DébutdeNote + " " + DuréedeNote + " " + Vélocité + "-" ' 
                            Next i
                            '
                            ' MARQUEUR (si existe)
                            b = Trim(EventHDsMesure("Marqueur", m))
                            If b <> "" Then ligne1 = ligne1 + "MRQ" + " " + b + " " + DébutdeNote + "-"
                            '
                            a = a + ligne1
                        End If
                        If Sortir Then Exit For
                    Next ct
                    If Sortir Then Exit For
                Next t
            Next m
        Next ii
        If Trim(a) <> "" Then
            a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        End If
        Return a
    End Function
    Private Function TranspNote(note As String, index As Integer) As String
        Dim note_ As Decimal = Convert.ToDecimal(note)
        Dim valTransp As Decimal = OCT.Item(index).Value

        note_ = note + valTransp
        If note_ <= 127 And note_ >= 0 Then
            Return note_.ToString
        Else
            Return Trim(note)
        End If

    End Function
    Private Function EventHDsMesure(Eventh As String, Mesure As Integer) As String
        Dim t As Integer
        Dim a, b As String

        a = ""
        b = ""
        '
        For t = 0 To 5
            For ct = 0 To 4 '
                Select Case Eventh
                    Case "Accord"
                        b = TableEventH(Mesure, t, ct).Accord
                    Case "Gamme"
                        b = TableEventH(Mesure, t, ct).Gamme
                    Case "Marqueur"
                        b = TableEventH(Mesure, t, ct).Marqueur
                    Case Else
                        b = "CellVide"
                End Select
                If Trim(b) <> "" Then
                    a = a + b + "/"
                End If
            Next ct
        Next t
        If Trim(a) <> "" Then
            a = Microsoft.VisualBasic.Left(a, Len(a) - 1)
        End If
        Return a
    End Function

    Private Sub MenuExportsMIDI_Click(sender As Object, e As EventArgs) Handles MenuExportsMIDI.Click
        Dim sauvBoucle As Boolean = Transport.Répéter.Checked

        Me.Cursor = Cursors.WaitCursor

        ' Mise à jour préalable de Terme pour le module MoteurMIDI
        ' ********************************************************
        Me.Terme.BackColor = Color.White
        TermeFin = Transport.Terme.Value
        Dim i As Integer = Me.Det_DerEventH2()
        If Me.Début.Value <= i Then
            If i < Transport.Terme.Value Then
                TermeFin = i
                Me.Terme.BackColor = Color.Orange
            End If
        End If
        ' Annulation de la boucle (répétition) si elle existe
        ' ***************************************************
        Transport.Répéter.Checked = False

        ' Lancement de l'export MIDI
        ' **************************
        MessageHV.PTypBouton = "OuiNon"
        If LangueIHM = "fr" Then
            MessageHV.PTitre = "Export CTRL"
            MessageHV.PContenuMess = "Souhaitez-vous exporter les contrôleurs MIDI (Volume, Pan, PRG) dans le fichier MIDI ?" +
                 Constants.vbCrLf + Constants.vbCrLf + "Remarque importante : le fichier MIDI est créé entre le délimiteur de début " + Transport.Début.Text + " et le délimiteur de fin " + Transport.Terme.Text + "."
        Else
            MessageHV.PTitre = "CTRL Export"
            MessageHV.PContenuMess = "Do you wish to export MIDI controlers (Volume, Pan, PRG) into the MIDI file  ?" +
                 Constants.vbCrLf + Constants.vbCrLf + "Important note: the MIDI file is created between the start locator " + Transport.Début.Text + " and the end locator " + Transport.Terme.Text + "."
        End If
        'Cacher_FormTransparents()
        MessageHV.ShowDialog()
        If MessageHV.PSortie = "Oui" Then
            ExporterCTRL = True
        Else
            ExporterCTRL = False
        End If
        Calcul_AutoVoicingZ()
        ExportMIDI()
        System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default
        '
        ' Restitution de l'état de la case Boucle dans la barre de transport
        ' ******************************************************************
        Transport.Répéter.Checked = sauvBoucle

        Me.Cursor = Cursors.Default
    End Sub
    Sub ExportMIDI()
        Dim a As String
        '
        Try
            If Det_NomFichMIDI() Then
                System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor
                a = Création_CTemp() + "\" + "djgbv58147.mid" '  
                INIT_LesPistes()
                CalculMusique(True)
                If My.Computer.FileSystem.FileExists(FichierMIDI) Then ' FichierMIDI est une variable globale mise à jour dans Det_NomFichMIDI
                    My.Computer.FileSystem.DeleteFile(FichierMIDI)
                End If
                '
                My.Computer.FileSystem.CopyFile(a, FichierMIDI)
            End If
            Cursor.Current = System.Windows.Forms.Cursors.Default
        Catch ex As Exception

            If LangueIHM = "fr" Then
                MessageHV.PTitre = "Avertissement"
                MessageHV.PContenuMess = "Erreur interne : procédure ExportMIDI : " + ex.Message
                MessageHV.PTypBouton = "OK"
            Else
                MessageHV.PTitre = "Warning"
                MessageHV.PContenuMess = "Internal Error : procédure ExportMIDI : " + ex.Message
                MessageHV.PTypBouton = "OK"
            End If
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
            End
        End Try
    End Sub




    Private Sub Terme_ValueChanged_1(sender As Object, e As EventArgs) Handles Terme.ValueChanged
        If EnChargement = False Then
            If Terme.Value < Début.Value Then
                Terme.Value = Terme.Value + 1
            End If
        End If
    End Sub
    Private Sub Début_ValueChanged_2(sender As Object, e As EventArgs) Handles Début.ValueChanged
        If EnChargement = False Then
            If Début.Value >= Terme.Value Then
                If Terme.Value <> 0 Then
                    Début.Value = Terme.Value '- 1
                End If
            End If
        End If
    End Sub
    Private Sub Form1_Move(sender As Object, e As EventArgs) Handles Me.Move
        Position_Transport()
    End Sub
    Sub Position_Transport()
        '
        Transport.TopLevel = True
        Transport.TopMost = True
        Dim p As New Point
        p.X = Me.Location.X
        p.Y = Me.Location.Y - 45
        Transport.Location = p ' Me.Location
        'Transport.AuDessus.Checked = True

    End Sub
    Private Sub Form1_Closing(sender As Object, e As CancelEventArgs) Handles Me.Closing
        Dim i As Integer

        Position_Transport()

        If Not FermetureParQuitter Then
            i = NouveauConfirm() ' la question est : voulez-vous enregistrez votre projet actuel ?
            Select Case i
                Case DialogResult.Yes
                    Enregistrer()
                    FermerMidi() ' pas de close car le système en produit un quand on clique sur la croix
                    e.Cancel = False '  validation de la sortie --> e.Cancel = False
                Case DialogResult.No
                    FermerMidi()
                    e.Cancel = False '  validation de la sortie --> e.Cancel = False
                Case DialogResult.Cancel ' on ne fait rien, on reste dans l'appli, annulation de la sortie --> e.Cancel = True
                    e.Cancel = True
            End Select
        End If
    End Sub

    Private Sub Form1_Activated(sender As Object, e As EventArgs) Handles Me.Activated
        Clipboard.Clear()
    End Sub




    Sub Init_Dicpiano()
        DicPiano("S") = False
        DicPiano("E") = False
        DicPiano("D") = False
        DicPiano("R") = False
        DicPiano("F") = False
        DicPiano("G") = False
        DicPiano("Y") = False
        DicPiano("H") = False
        DicPiano("U") = False
        DicPiano("J") = False
        DicPiano("I") = False
        DicPiano("K") = False
        DicPiano("L") = False
    End Sub
    Sub StoperNote2(ValeurNote As Byte, canal As Byte, Dyn As Byte)

        Try
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            SortieMidi.Item(ChoixSortieMidi).SendNoteOff(canal - 1, ValeurNote, Dyn)
            NoteCourante = ValeurNote
            NoteAEtéJouée = True

        Catch ex As Exception
            MessageHV.PTitre = "Problème de ressource MIDI"
            MessageHV.PContenuMess = messa + Constants.vbCrLf + "Détection d'une erreur dans procédure : " + "JouerNote" + "." + Constants.vbCrLf +
            "Message  : " + ex.Message
            MessageHV.PTypBouton = "OK"
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try
    End Sub
    Sub JouerNote21(ValeurNote As Byte, canal As Byte, Dyn As Byte)

        Try
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            '
            SortieMidi.Item(ChoixSortieMidi).SendNoteOn(canal - 1, ValeurNote, Dyn)
            NoteCourante = ValeurNote
            NoteAEtéJouée = True

        Catch ex As Exception
            MessageHV.TypBouton = "OK"
            If Module1.LangueIHM = "fr" Then
                MessageHV.PTitre = "Problème de ressource MIDI"
                MessageHV.PContenuMess = "Warning : détection d'une erreur dans procédure " + "JouerNote2" +
                Constants.vbCrLf + "- " + "Message  : " + ex.Message +
                Constants.vbCrLf + "- " + "Votre sortie MIDI pourrait être occupé par une autre application" +
                Constants.vbCrLf + "- " + "Essayer de choisir une autre sortie MIDI"
            Else
                MessageHV.PTitre = "MIDI Resource Problem"
                MessageHV.PContenuMess = "- " + "Warning : procedure error detection  : " + "JouerNote2" +
                    Constants.vbCrLf + "- " + "Message  : " + ex.Message +
                    Constants.vbCrLf + "- " + "Your MIDI output may be occupied by another application." +
                    Constants.vbCrLf + "- " + "Try to choose another MIDI output"
            End If
            Init_Dicpiano()
            If Clavier.Visible Then Clavier.RAZ_CouleurNotes()
            NoteCourante = ValeurNote
            NoteAEtéJouée = True
            Cacher_FormTransparents()
            MessageHV.ShowDialog()
        End Try
    End Sub

    Private Sub ClavierMenuItem_Click(sender As Object, e As EventArgs) Handles ClavierMenuItem.Click
        Clavier.TopMost = True
        Clavier.CheckBox1.Checked = True
        Clavier.Show()
    End Sub

    Private Sub Grid1_MouseClick(sender As Object, e As MouseEventArgs) Handles Grid1.MouseClick
        ' Ecriture des marqueurs
        ' *********************
        Dim aa As Integer = Grid1.ActiveCell.Row
        If e.Button() = MouseButtons.Left And Grid1.MouseCol = 2 And Grid1.MouseRow >= 1 Then
            Dim taille As New Size
            Dim H As Integer
            Grid1.Refresh()
            Dim LigneVisible As Integer = Grid1.TopRow
            Dim Pa As New Point

            Dim ii As Integer = Grid1.MouseRow


            TMarqueur.Visible = True
            taille.Width = Grid1.Column(2).Width
            taille.Height = Grid1.Row(ii).Height - 2
            '
            TMarqueur.Size = taille
            '
            H = Grid1.Row(ii).Height
            Pa.Y = (H * (ii - (LigneVisible - 1)) + 1) + Label83.Size.Height '((ii * H) - (H * (SélectionLignes + LigneVisible)))
            'Pa.Y = H * (ii) + 1
            Pa.X = Grid1.Column(0).Width + Grid1.Column(1).Width + 1
            '
            TMarqueur.Text = Trim(Grid1.Cell(ii, 2).Text)
            '
            TMarqueur.Location = Pa
            TMarqueur.Refresh()
            If TMarqueur.CanFocus Then
                TMarqueur.Focus() ' avoir le focus
            End If
            TMarqueur.BringToFront()
        Else
            TMarqueur.Visible = False
        End If


        DerGridCliquée = GridCours.Grid1
    End Sub

    Private Sub Grid1_Scroll(Sender As Object, e As EventArgs) Handles Grid1.Scroll
        TMarqueur.Visible = False
    End Sub
    Private Sub Construction_Stacking()
        Dim i, s As Integer
        Dim oX As Integer
        Dim oY As Integer
        Dim X1, X2 As Integer

        s = 25 ' valeur de disposition verticale 
        ' Nom de l'onglet
        ' ***************
        For i = 0 To 4 '

            ' MUTEVOICE
            ' *********
            oX = 95
            oY = 40
            MUTEVOICE.Add(New System.Windows.Forms.CheckBox)
            PanelMIX.Controls.Add(MUTEVOICE.Item(i))
            '
            MUTEVOICE.Item(i).Size = New Size(20, 22)
            '
            MUTEVOICE.Item(i).Location = New Point(oX, oY + ((s) * i))
            MUTEVOICE.Item(i).Checked = False
            MUTEVOICE.Item(i).Enabled = True
            MUTEVOICE.Item(i).Tag = i
            MUTEVOICE.Item(i).Visible = True

            ' CANAUX
            ' ******
            oX = 35
            oY = 40
            CANAUX.Add(New System.Windows.Forms.NumericUpDown)
            PanelMIX.Controls.Add(CANAUX.Item(i))
            CANAUX.Item(i).Font = New Font("Verdana", 8)
            CANAUX.Item(i).Size = New Size(43, 22)
            CANAUX.Item(i).Location = New Point(oX, oY + ((s) * i))
            CANAUX.Item(i).Enabled = True
            CANAUX.Item(i).Minimum = 11
            CANAUX.Item(i).Maximum = 15
            CANAUX.Item(i).Value = 15 - i '((4 - i) + 11)
            CANAUX.Item(i).Tag = i
            CANAUX.Item(i).BringToFront()
            '
            ' 1/2 T
            ' *****
            oX = 160
            oY = 40
            OCT.Add(New System.Windows.Forms.NumericUpDown)
            PanelMIX.Controls.Add(OCT.Item(i))
            OCT.Item(i).Font = New Font("Verdana", 8)
            OCT.Item(i).Size = New Size(43, 22)
            OCT.Item(i).Location = New Point(oX, oY + ((s) * i))
            OCT.Item(i).Enabled = True
            OCT.Item(i).Minimum = -24
            OCT.Item(i).Maximum = +24
            OCT.Item(i).Value = 0
            OCT.Item(i).Tag = i
            OCT.Item(i).Visible = False

            ' NOMDUSON
            ' ********
            oX = 125
            oY = 40
            NOMSON.Add(New System.Windows.Forms.TextBox)
            PanelMIX.Controls.Add(NOMSON.Item(i))
            NOMSON.Item(i).Font = New Font("Verdana", 8)
            NOMSON.Item(i).Size = New Size(80, 22)
            NOMSON.Item(i).Location = New Point(oX, oY + ((s) * i))
            NOMSON.Item(i).BorderStyle = BorderStyle.FixedSingle
            NOMSON.Item(i).Enabled = True
            NOMSON.Item(i).Text = ""
            NOMSON.Item(i).Tag = i
            NOMSON.Item(i).Visible = True

            '
            ' VEL
            ' *** 
            oX = 214
            oY = 40
            VEL.Add(New System.Windows.Forms.NumericUpDown)
            PanelMIX.Controls.Add(VEL.Item(i))
            VEL.Item(i).Font = New Font("Verdana", 8)
            VEL.Item(i).Size = New Size(43, 22)
            VEL.Item(i).Location = New Point(oX, oY + ((s) * i))
            VEL.Item(i).Enabled = True
            VEL.Item(i).Minimum = 0
            VEL.Item(i).Maximum = 127
            VEL.Item(i).Value = 100
            VEL.Item(i).Tag = i
            '
            ' VOLSTACK
            ' ********
            oX = 270
            oY = 40
            VOLSTACK.Add(New System.Windows.Forms.NumericUpDown)
            PanelMIX.Controls.Add(VOLSTACK.Item(i))

            VOLSTACK.Item(i).Size = New Size(43, 22)
            VOLSTACK.Item(i).Font = New Font("Verdana", 8)

            VOLSTACK.Item(i).Location = New Point(oX, oY + ((s) * i))
            VOLSTACK.Item(i).Minimum = 0
            VOLSTACK.Item(i).Maximum = 127
            VOLSTACK.Item(i).Value = 100
            VOLSTACK.Item(i).Enabled = True
            VOLSTACK.Item(i).Tag = i ' 
            '
            ' PAN
            ' ***
            oX = 320
            oY = 40
            PAN.Add(New System.Windows.Forms.NumericUpDown)
            PanelMIX.Controls.Add(PAN.Item(i))
            '
            PAN.Item(i).Size = New Size(43, 22)
            PAN.Item(i).Font = New Font("Verdana", 8)

            PAN.Item(i).Location = New Point(oX, oY + ((s) * i))
            PAN.Item(i).Minimum = 0
            PAN.Item(i).Maximum = 127
            PAN.Item(i).Value = 64
            PAN.Item(i).Enabled = True
            PAN.Item(i).Tag = i '
            '
            ' PRG
            ' ***
            oX = 370
            oY = 40
            PRG.Add(New System.Windows.Forms.ComboBox)
            PanelMIX.Controls.Add(PRG.Item(i))
            '
            PRG.Item(i).Size = New Size(170, 22)
            PRG.Item(i).Location = New Point(oX, oY + ((s) * i))
            PRG.Item(i).Font = New Font("Verdana", 8)
            '
            MAJ_PRGSTACK(i)
            '
            PRG.Item(i).Enabled = True
            PRG.Item(i).Tag = i ' 
            '
            AddHandler VOLSTACK.Item(i).ValueChanged, AddressOf VOLSTACK_ValueChanged
            AddHandler PAN.Item(i).ValueChanged, AddressOf PAN_ValueChanged
            AddHandler PRG.Item(i).SelectedIndexChanged, AddressOf PRG_SelectedIndexChanged

            ' étiquettes
            X1 = 8
            X2 = 78
            Select Case i
                Case 0
                    LabVoie1.Location = New Point(X1, oY + ((s) * i))
                    LabCan1.Location = New Point(X2, oY + ((s) * i))
                Case 1
                    LabVoie2.Location = New Point(X1, oY + ((s) * i))
                    LabCan2.Location = New Point(X2, oY + ((s) * i))
                Case 2
                    LabVoie3.Location = New Point(X1, oY + ((s) * i))
                    LabCan3.Location = New Point(X2, oY + ((s) * i))
                Case 3
                    LabVoie4.Location = New Point(X1, oY + ((s) * i))
                    LabCan4.Location = New Point(X2, oY + ((s) * i))
                Case 4
                    LabVoie5.Location = New Point(X1, oY + ((s) * i))
                    LabCan5.Location = New Point(X2, oY + ((s) * i))
            End Select
            '
        Next i
        '
        InitialVoicing.Enabled = False
        LangueStacking()
        For i = 0 To 4
            PAN.Item(i).Enabled = False
            VOLSTACK.Item(i).Enabled = False
            PRG.Item(i).Enabled = False
            MUTEVOICE.Item(i).Enabled = False
            OCT.Item(i).Enabled = False
            VEL.Item(i).Enabled = False
            LabOct.Enabled = False
            LabVol.Enabled = False
            LabPan.Enabled = False
            LabPRG.Enabled = False
        Next
        LabCanal.Enabled = False
        LabMute.Enabled = False

        LabVoie1.Enabled = False
        LabVoie2.Enabled = False
        LabVoie3.Enabled = False
        LabVoie4.Enabled = False
        LabVoie5.Enabled = False
        '
        LabCan1.Enabled = False
        LabCan2.Enabled = False
        LabCan3.Enabled = False
        LabCan4.Enabled = False
        LabCan5.Enabled = False

        MixActivationSM.Enabled = True
        '
        MixActivationSM.BackColor = Color.LightBlue
        MixActivationSM.ForeColor = Color.Black
        '
        MixActivationSM.Enabled = False
        PanelMIX.BackColor = ColorTranslator.FromHtml("#fff799")

        Init_StackMode()
        '
        Construction_Courbexp()

    End Sub
    Sub Construction_Courbexp()
        Dim i, j, k, m As Integer
        Dim LargCol As Integer = 10
        Dim fontExp = New Font("calibri", 10, FontStyle.Regular)
        Dim fontExp1 = New Font("calibri", 7, FontStyle.Bold)

        TabPage20.Dock = DockStyle.Fill
        TabPage20.BorderStyle = BorderStyle.Fixed3D
        Courbexp.TabStop = False
        Courbexp.Dock = DockStyle.Fill
        Courbexp.SelectionMode = FlexCell.SelectionModeEnum.ByColumn
        Courbexp.SelectionBorderColor = Color.White
        '
        Courbexp.ScrollBars = ScrollBarsEnum.Horizontal
        Courbexp.FixedRows = 3
        Courbexp.FixedCols = 1
        Courbexp.DefaultFont = fontExp

        Courbexp.Cols = 16 * nbMesures + 1
        Courbexp.Rows = 69

        Courbexp.BorderStyle = BorderStyleEnum.FixedSingle
        Courbexp.CellBorderColor = Color.Black
        '
        Courbexp.BackColorSel = Color.Transparent
        Courbexp.Cursor = Cursors.Arrow
        '
        Courbexp.Row(1).Height = 23
        Courbexp.Row(2).Height = 23

        For i = 3 To (Courbexp.Rows - 1)
            Courbexp.AutoRedraw = False
            '
            Courbexp.Row(i).Height = 2
            '
            Courbexp.AutoRedraw = True
            Courbexp.Refresh()
        Next
        '
        Courbexp.Row(Courbexp.Rows - 1).Height = 7

        For j = 0 To Courbexp.Cols - 1
            Courbexp.Column(j).Width = LargCol
        Next

        Courbexp.BackColorFixed = ColorTranslator.FromHtml("#7cc576") 'Color.Khaki '  CoulExp
        Courbexp.BackColorFixedSel = ColorTranslator.FromHtml("#a3d39c") 'Color.Khaki
        '
        ' Grid1.Range(2, i, 2, i + (Me.DivisionMes - 1)).Merge() ' Merges pour Accords
        k = 1
        m = 1
        For j = 1 To Courbexp.Cols - 1
            If k = 1 Then
                Courbexp.Cell(1, j).Font = fontExp1
                Courbexp.Cell(1, j).Orientation = TextOrientationEnum.Vertical
                Courbexp.Cell(1, j).Alignment = AlignmentEnum.CenterGeneral
                Courbexp.Cell(1, j).Text = m.ToString
                Courbexp.Range(2, j, 2, j + 15).Merge()
                Courbexp.Cell(2, j).Text = Grid2.Cell(1, m).Text
                m = m + 1
            End If
            k = k + 1
            If k = 17 Then k = 1
        Next

    End Sub
    'Private Sub Courbexp_MouseDown(Sender As Object, e As MouseEventArgs)
    '    'Dim com As FlexCell.Grid = Sender
    '    'Dim ind As Integer = com.Tag

    ' RUSTINE 1 : à chaque fois que l'on clique sur une courbe, la cellule active du piano roll devient la cellule (0,0).
    ' Ceci pour éviter le problème suivant : quand le PianoRoll est détaché et qu'une courbe est sélectionné, l'appui sur 
    ' la touche Suppr provoque non seulement la supression de la courbe sélectionné mais aussi la suppression d'une note 
    ' sélectionnée dans le piano roll. Le Bug ne se reproduit pas si le PianoRoll est attaché.

    '       Grid1.Cell(0, 0).SetFocus() ' <-- RUSTINE 1
    '
    '       DerGridCliquée = GridCours.Autre ' pour éviter que la touche suppr active le raccourcis suppr du menu principal
    '       'Orig_PianoR.Orig1 = OrigPianoCourbe.Courbe
    '       'Orig_PianoR.N_Courbe = ind
    '
    '       Tracé_Courbexp()
    '
    '  End Sub
    Sub Tracé_Courbexp()
        '
        Dim i As Integer = Courbexp.MouseRow
        Dim j As Integer = Courbexp.MouseCol
        '
        Courbexp.AutoRedraw = False
        '
        If i <> -1 And j <> -1 And i > 2 Then
            Courbexp.AutoRedraw = False
            If My.Computer.Keyboard.CtrlKeyDown Then ' vérouillage est mis à jour dans l'évènement CTRL + V : il empêche d'écrire dans la courbe quand on fait un "coller" avec CTRL+V
                Courbexp.Range(3, j, Courbexp.Rows - 1, j).ClearBackColor()
                '
                If i <> Courbexp.Rows - 1 Then ' ce test permet d'obtenir la RAZ de la dernière cellule du bas par Ctrl + clic
                    Courbexp.Range(Courbexp.Rows - 1, j, i, j).BackColor = Color.DarkOliveGreen 'Det_CouleurCTRL(ind)
                End If
                Courbexp.Refresh()
                Courbexp.AutoRedraw = True
                Courbexp.Refresh()
            End If
        End If
        '
        Courbexp.AutoRedraw = True
        Courbexp.Refresh()
    End Sub

    Sub Refresh_Courbexp()
        Dim j, colonne As Integer

        Courbexp.AutoRedraw = False
        '
        For j = 1 To Grid2.Cols - 1
            If Trim(Grid2.Cell(1, j).Text) <> "" Then
                colonne = ((j - 1) * 16) + 1
                Courbexp.Cell(2, colonne).Text = Grid2.Cell(1, j).Text
            End If
        Next
        '
        Courbexp.AutoRedraw = True
        Courbexp.Refresh()
    End Sub
    Private Function Det_Canal(N_voie As Integer, N_Canal As String) As String
        If StackMode.Checked Then
            Select Case N_voie
                Case 0
                    Return "10"
                Case 1
                    Return "11"
                Case 2
                    Return "12"
                Case 3
                    Return "13"
                Case 4
                    Return "14"
                Case Else
                    Return "10"
            End Select
        Else
            Return Trim(N_Canal)
        End If
    End Function
    Sub LangueStacking()
        If Module1.LangueIHM = "fr" Then
            LabCanal.Text = "Canal"
            LabPan.Text = "Pan"
            LabVol.Text = "Vol"
            LabPRG.Text = "PRG"
            '
            LabVoie1.Text = "V5"
            LabVoie2.Text = "V4"
            LabVoie3.Text = "V3"
            LabVoie4.Text = "V2"
            LabVoie5.Text = "V1"

            InitialVoicing.Text = "Avec Accords sur canal 1"
            StackMode.Text = "On"



        Else
            LabCanal.Text = "Channel"
            LabPan.Text = "Pan"
            LabVol.Text = "Vol"
            LabPRG.Text = "PRG"
            '
            LabVoie1.Text = "V5"
            LabVoie2.Text = "V4"
            LabVoie3.Text = "V3"
            LabVoie4.Text = "V2"
            LabVoie5.Text = "V1"
            '
            InitialVoicing.Text = "With chords on channel 1"
            StackMode.Text = "On"

        End If

    End Sub

    Sub Init_StackMode()
        Dim i As Integer
        '
        For i = 0 To 4
            OCT.Item(i).Value = 0
            PAN.Item(i).Value = 64
            VEL.Item(i).Value = 100
            VOLSTACK.Item(i).Value = 100
            PRG.Item(i).SelectedIndex = 0
            NOMSON.Item(i).Text = ""
            MUTEVOICE.Item(i).Checked = False
            CANAUX.Item(i).Value = 15 - i
            CANAUX.Item(i).Enabled = False
        Next i
        '
        MUTEVOICE.Item(0).Checked = True
        MUTEVOICE.Item(1).Checked = True
        '
        StackMode.Checked = False
        InitialVoicing.Checked = False
        MixActivationSM.Checked = False
        '
    End Sub

    Sub ColoriserStack(i As Integer)
        Select Case i
            Case 0
                PRG.Item(i).BackColor = Color.Brown
                PRG.Item(i).ForeColor = Color.Yellow
                VOLSTACK.Item(i).BackColor = Color.Brown
                VOLSTACK.Item(i).ForeColor = Color.Yellow
                PAN.Item(i).BackColor = Color.Brown
                PAN.Item(i).ForeColor = Color.Yellow
            Case 1
                PRG.Item(i).BackColor = Color.DarkOrange
                PRG.Item(i).ForeColor = Color.Black
                VOLSTACK.Item(i).BackColor = Color.DarkOrange
                VOLSTACK.Item(i).ForeColor = Color.Black
                PAN.Item(i).BackColor = Color.DarkOrange
                PAN.Item(i).ForeColor = Color.Black
            Case 2
                PRG.Item(i).BackColor = Color.LightSteelBlue
                PRG.Item(i).ForeColor = Color.Black
                VOLSTACK.Item(i).BackColor = Color.LightSteelBlue
                VOLSTACK.Item(i).ForeColor = Color.Black
                PAN.Item(i).BackColor = Color.LightSteelBlue
                PAN.Item(i).ForeColor = Color.Black
            Case 3
                PRG.Item(i).BackColor = Color.DarkCyan
                PRG.Item(i).ForeColor = Color.Yellow
                VOLSTACK.Item(i).BackColor = Color.DarkCyan
                VOLSTACK.Item(i).ForeColor = Color.Yellow
                PAN.Item(i).BackColor = Color.DarkCyan
                PAN.Item(i).ForeColor = Color.Yellow
            Case 4
                PRG.Item(i).BackColor = Color.Thistle
                PRG.Item(i).ForeColor = Color.Black
                VOLSTACK.Item(i).BackColor = Color.Thistle
                VOLSTACK.Item(i).ForeColor = Color.Black
                PAN.Item(i).BackColor = Color.Thistle
                PAN.Item(i).ForeColor = Color.Black
        End Select
    End Sub
    Private Sub MAJ_PRGSTACK(i As Integer)
        PRG(i).Items.Clear()
        If Module1.LangueIHM = "fr" Then
            PRG(i).Items.Add("GS/GM off")
            PRG(i).Items.Add("01 Piano acoustique 1")
            PRG(i).Items.Add("02 Piano acoustique 2")
            PRG(i).Items.Add("03 Grand piano électrique")
            PRG(i).Items.Add("04 Piano honkytonk")
            PRG(i).Items.Add("05 Piano électrique 1")
            PRG(i).Items.Add("06 Piano électrique 2")
            PRG(i).Items.Add("07 Clavecin")
            PRG(i).Items.Add("08 Clavicorde")
            PRG(i).Items.Add("09 Célesta")
            PRG(i).Items.Add("10 Carillon")
            PRG(i).Items.Add("11 Boîte à musique")
            PRG(i).Items.Add("12 Vibraphone")
            PRG(i).Items.Add("13 Marimba")
            PRG(i).Items.Add("14 Xylophone")
            PRG(i).Items.Add("15 Cloches tubulaires")
            PRG(i).Items.Add("16 Tympanon")
            PRG(i).Items.Add("17 Orgue à tubes")
            PRG(i).Items.Add("18 Orgue percussif")
            PRG(i).Items.Add("19 Orgue rock")
            PRG(i).Items.Add("20 Orgue d'église")
            PRG(i).Items.Add("21 Orgue vibrato")
            PRG(i).Items.Add("22 Accordéon")
            PRG(i).Items.Add("23 Harmonica")
            PRG(i).Items.Add("24 Bandonéon")
            PRG(i).Items.Add("25 Guitare acous. classique")
            PRG(i).Items.Add("26 Guitare acous. folk")
            PRG(i).Items.Add("27 Guitare acous. jazz")
            PRG(i).Items.Add("28 Guitare élec. pure")
            PRG(i).Items.Add("29 Guitare élec. mute")
            PRG(i).Items.Add("30 Guitare élec. saturée")
            PRG(i).Items.Add("31 Guitare élec. distorsion")
            PRG(i).Items.Add("32 Guitare élec. harmonique")
            PRG(i).Items.Add("33 Basse acoustique")
            PRG(i).Items.Add("34 Basse élec. 1")
            PRG(i).Items.Add("35 Basse élec. 2")
            PRG(i).Items.Add("36 Basse élec. 3")
            PRG(i).Items.Add("37 Basse slap 1")
            PRG(i).Items.Add("38 Basse slap 2")
            PRG(i).Items.Add("39 Basse synth.  1")
            PRG(i).Items.Add("40 Basse synth.  2")
            PRG(i).Items.Add("41 Violon")
            PRG(i).Items.Add("42 Viole")
            PRG(i).Items.Add("43 Violoncelle")
            PRG(i).Items.Add("44 Contrebasse")
            PRG(i).Items.Add("45 Cordes trémolo")
            PRG(i).Items.Add("46 Cordes pizzicato")
            PRG(i).Items.Add("47 Harpe")
            PRG(i).Items.Add("48 Timbales")
            PRG(i).Items.Add("49 Quartet cordes 1")
            PRG(i).Items.Add("50 Quartet cordes 2")
            PRG(i).Items.Add("51 Cordes synthétiseur 1")
            PRG(i).Items.Add("52 Cordes synthétiseur 2")
            PRG(i).Items.Add("53 Chœurs Aahs")
            PRG(i).Items.Add("54 Voix Oohs")
            PRG(i).Items.Add("55 Voix synthétiseur")
            PRG(i).Items.Add("56 Coup d'orchestre")
            PRG(i).Items.Add("57 Trompette")
            PRG(i).Items.Add("58 Trombone")
            PRG(i).Items.Add("59 Tuba")
            PRG(i).Items.Add("60 Trompette bouchée")
            PRG(i).Items.Add("61 Cors")
            PRG(i).Items.Add("62 Ensemble de cuivres")
            PRG(i).Items.Add("63 Cuivres synthétiseur")
            PRG(i).Items.Add("64 Cuivres synthétiseur")
            PRG(i).Items.Add("65 Saxophone soprano")
            PRG(i).Items.Add("66 Saxophone alto")
            PRG(i).Items.Add("67 Saxophone ténor")
            PRG(i).Items.Add("68 Saxophone baryton")
            PRG(i).Items.Add("69 Hautbois")
            PRG(i).Items.Add("70 Cors anglais")
            PRG(i).Items.Add("71 Basson")
            PRG(i).Items.Add("72 Clarinette")
            PRG(i).Items.Add("73 Flûte piccolo")
            PRG(i).Items.Add("74 Flûte")
            PRG(i).Items.Add("75 Flûte à bec")
            PRG(i).Items.Add("76 Flûte de pan")
            PRG(i).Items.Add("77 Bouteille sifflée")
            PRG(i).Items.Add("78 Shakuhachi")
            PRG(i).Items.Add("79 Sifflet")
            PRG(i).Items.Add("80 Ocarina")
            PRG(i).Items.Add("81 Lead carré")
            PRG(i).Items.Add("82 Lead dents de scie")
            PRG(i).Items.Add("83 Lead orgue")
            PRG(i).Items.Add("84 Lead chiff")
            PRG(i).Items.Add("85 Lead charang")
            PRG(i).Items.Add("86 Lead voix")
            PRG(i).Items.Add("87 Lead quinte)")
            PRG(i).Items.Add("88 Lead basse")
            PRG(i).Items.Add("89 Pad new Age")
            PRG(i).Items.Add("90 Pad warm")
            PRG(i).Items.Add("91 Pad poly")
            PRG(i).Items.Add("92 Pad chœurs")
            PRG(i).Items.Add("93 Pad archet")
            PRG(i).Items.Add("94 Pad métal")
            PRG(i).Items.Add("95 Pad halo")
            PRG(i).Items.Add("96 Pad glissement")
        Else
            PRG(i).Items.Add("GS/GM off")
            PRG(i).Items.Add("01 Acoustic Grand Piano")
            PRG(i).Items.Add("02 Bright Acoustic Piano")
            PRG(i).Items.Add("03 Electric Grand Piano")
            PRG(i).Items.Add("04 Honky-tonk Piano")
            PRG(i).Items.Add("05 Electric Piano 1")
            PRG(i).Items.Add("06 Electric Piano 2")
            PRG(i).Items.Add("07 07 Harpsichord")
            PRG(i).Items.Add("08 Clavinet")
            PRG(i).Items.Add("09 Celesta")
            PRG(i).Items.Add("10 Glockenspiel")
            PRG(i).Items.Add("11 Music Box")
            PRG(i).Items.Add("12 Vibraphone")
            PRG(i).Items.Add("13 Marimba")
            PRG(i).Items.Add("14 Xylophone")
            PRG(i).Items.Add("15 Tubular Bells")
            PRG(i).Items.Add("16 Dulcimer")
            PRG(i).Items.Add("17 Drawbar Organ")
            PRG(i).Items.Add("18 Percussive Organ")
            PRG(i).Items.Add("19 Rock Organ")
            PRG(i).Items.Add("20 Church Organ")
            PRG(i).Items.Add("21 Reed Organ")
            PRG(i).Items.Add("22 Accordion")
            PRG(i).Items.Add("23 Harmonica")
            PRG(i).Items.Add("24 Tango Accordion")
            PRG(i).Items.Add("25 Acoustic Guitar nylon")
            PRG(i).Items.Add("26 Acoustic Guitar steel")
            PRG(i).Items.Add("27 Electric Guitar jazz")
            PRG(i).Items.Add("28 Electric Guitar clean")
            PRG(i).Items.Add("29 Electric Guitar muted")
            PRG(i).Items.Add("30 Overdriven Guitar")
            PRG(i).Items.Add("31 Distortion Guitar")
            PRG(i).Items.Add("32 Guitar Harmonics")
            PRG(i).Items.Add("33 Acoustic Bass")
            PRG(i).Items.Add("34 Electric Bass finger")
            PRG(i).Items.Add("35 Electric Bass pick")
            PRG(i).Items.Add("36 Fretless Bass")
            PRG(i).Items.Add("37 Slap Bass 1")
            PRG(i).Items.Add("38 Slap Bass 2")
            PRG(i).Items.Add("39 Synth Bass 1")
            PRG(i).Items.Add("40 Synth Bass 2")
            PRG(i).Items.Add("41 Violon")
            PRG(i).Items.Add("42 Viola")
            PRG(i).Items.Add("43 Cello")
            PRG(i).Items.Add("44 Contrabass")
            PRG(i).Items.Add("45 Tremolo Strings")
            PRG(i).Items.Add("46 Pizzicato Strings")
            PRG(i).Items.Add("47 Orchestral Harp")
            PRG(i).Items.Add("48 Timpani")
            PRG(i).Items.Add("49 String Ensemble 1")
            PRG(i).Items.Add("50 String Ensemble 2")
            PRG(i).Items.Add("51 Synth Strings 1")
            PRG(i).Items.Add("52 Synth Strings 2")
            PRG(i).Items.Add("53 Choir Aahs")
            PRG(i).Items.Add("54 Voice Oohs")
            PRG(i).Items.Add("55 Synth Choir")
            PRG(i).Items.Add("56 Orchestra Hit")
            PRG(i).Items.Add("57 Trumpet")
            PRG(i).Items.Add("58 Trombone")
            PRG(i).Items.Add("59 Tuba")
            PRG(i).Items.Add("60 Muted Trumpet")
            PRG(i).Items.Add("61 French Horn")
            PRG(i).Items.Add("62 Brass Section")
            PRG(i).Items.Add("63 Synth Brass 1")
            PRG(i).Items.Add("64 Synth Brass 2")
            PRG(i).Items.Add("65 Soprano Sax")
            PRG(i).Items.Add("66 Alto Sax")
            PRG(i).Items.Add("67 Tenor Sax")
            PRG(i).Items.Add("68 Baritone Sax")
            PRG(i).Items.Add("69 Oboe")
            PRG(i).Items.Add("70 English Horn")
            PRG(i).Items.Add("71 Bassoon")
            PRG(i).Items.Add("72 Clarinet")
            PRG(i).Items.Add("73 Piccolo")
            PRG(i).Items.Add("74 Flute")
            PRG(i).Items.Add("75 Recorder")
            PRG(i).Items.Add("76 Pan Flute")
            PRG(i).Items.Add("77 Blown bottle")
            PRG(i).Items.Add("78 Shakuhachi")
            PRG(i).Items.Add("79 Whistle")
            PRG(i).Items.Add("80 Ocarina")
            PRG(i).Items.Add("81 Lead 1 square")
            PRG(i).Items.Add("82 Lead 2 sawtooth")
            PRG(i).Items.Add("83 Lead 3 calliope")
            PRG(i).Items.Add("84 Lead chiff")
            PRG(i).Items.Add("85 Lead charang")
            PRG(i).Items.Add("86 Lead voice")
            PRG(i).Items.Add("87 Lead 7 fifths")
            PRG(i).Items.Add("88 Lead 8 bass + lead")
            PRG(i).Items.Add("89 Pad new Age")
            PRG(i).Items.Add("90 Pad warm")
            PRG(i).Items.Add("91 Pad 3 polysynth")
            PRG(i).Items.Add("92 Pad 4 choir")
            PRG(i).Items.Add("93 Pad 5 bowed")
            PRG(i).Items.Add("94 Pad 6 metallic")
            PRG(i).Items.Add("95 Pad 7 halo")
            PRG(i).Items.Add("96 Pad 8 sweep")
        End If
        PRG(i).SelectedIndex = 0
    End Sub
    Private Sub VOLSTACK_ValueChanged(sender As Object, e As EventArgs)
        Dim com As NumericUpDown = sender
        Dim i As Integer

        i = Val(com.Tag)
        If EnChargement = False Then
            Dim volume As Byte = CByte(VOLSTACK.Item(i).Value)
            Dim canal As Byte = 10 + i
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(canal, CVolume, volume)
        End If

    End Sub
    Private Sub PAN_ValueChanged(sender As Object, e As EventArgs)
        Dim com As NumericUpDown = sender
        Dim i As Integer

        i = Val(com.Tag)
        If EnChargement = False Then
            Dim Pano As Byte = CByte(PAN.Item(i).Value)
            Dim canal As Byte = 10 + i
            If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                SortieMidi.Item(ChoixSortieMidi).Open()
            End If
            SortieMidi.Item(ChoixSortieMidi).SendControlChange(canal, CPAN, Pano)
        End If

    End Sub
    Private Sub PRG_SelectedIndexChanged(sender As Object, e As EventArgs)
        Dim com As System.Windows.Forms.ComboBox = sender
        Dim i As Integer = Val(com.Tag)
        Dim tbl() As String
        '
        Dim PROG As String = Trim(PRG.Item(i).Text)
        If EnChargement = False Then
            If Trim(PROG) <> "GS/GM off" Then
                Dim canal As Byte = 10 + i
                If Not (SortieMidi.Item(ChoixSortieMidi).IsOpen) Then
                    SortieMidi.Item(ChoixSortieMidi).Open()
                End If
                tbl = Split(Trim(PROG))
                SortieMidi.Item(ChoixSortieMidi).SendProgramChange(canal, Val(tbl(0)) - 1)
            End If
        End If

    End Sub
    Private Sub MixActivationSM_CheckedChanged(sender As Object, e As EventArgs) Handles MixActivationSM.CheckedChanged

        If MixActivationSM.Checked Then
            MixActivationSM.BackColor = Color.Linen
            MixActivationSM.ForeColor = Color.Black
            For i = 0 To 4
                PAN.Item(i).Enabled = True
                VOLSTACK.Item(i).Enabled = True
                PRG.Item(i).Enabled = True
                LabVol.Enabled = True
                LabPan.Enabled = True
                LabPRG.Enabled = True
            Next
        Else
            MixActivationSM.BackColor = Color.LightBlue
            MixActivationSM.ForeColor = Color.Black
            For i = 0 To 4
                PAN.Item(i).Enabled = False
                VOLSTACK.Item(i).Enabled = False
                PRG.Item(i).Enabled = False
                LabVol.Enabled = False
                LabPan.Enabled = False
                LabPRG.Enabled = False
            Next
        End If
    End Sub

    Private Sub StackMode_CheckedChanged(sender As Object, e As EventArgs) Handles StackMode.CheckedChanged
        If Not (CheckBox1.Checked) Then
            If StackMode.Checked Then

                ActExp.Enabled = False ' en mode multi canal, la courbe d'expression est déactivéee

                MixActivationSM.Enabled = True
                InitialVoicing.Enabled = True

                For i = 0 To 4
                    MUTEVOICE.Item(i).Enabled = True
                    OCT.Item(i).Enabled = True
                    VEL.Item(i).Enabled = True
                Next
                '
                LabCanal.Enabled = True
                LabMute.Enabled = True
                LabOct.Enabled = True


                LabVoie1.Enabled = True
                LabVoie2.Enabled = True
                LabVoie3.Enabled = True
                LabVoie4.Enabled = True
                LabVoie5.Enabled = True
                '
                LabCan1.Enabled = True
                LabCan2.Enabled = True
                LabCan3.Enabled = True
                LabCan4.Enabled = True
                LabCan5.Enabled = True
            Else

                ActExp.Enabled = True ' en mode non multi canal, la courbe d'expression est utilisable

                MixActivationSM.Enabled = False
                InitialVoicing.Enabled = False
                '
                MixActivationSM.Checked = False
                '
                InitialVoicing.Checked = False
                '
                For i = 0 To 4
                    MUTEVOICE.Item(i).Enabled = False
                    OCT.Item(i).Enabled = False
                    VEL.Item(i).Enabled = False
                Next
                '
                LabCanal.Enabled = False
                LabMute.Enabled = False
                LabOct.Enabled = False

                LabVoie1.Enabled = False
                LabVoie2.Enabled = False
                LabVoie3.Enabled = False
                LabVoie4.Enabled = False
                LabVoie5.Enabled = False
                '
                LabCan1.Enabled = False
                LabCan2.Enabled = False
                LabCan3.Enabled = False
                LabCan4.Enabled = False
                LabCan5.Enabled = False
            End If
        Else
            RemoveHandler StackMode.CheckedChanged, AddressOf StackMode_CheckedChanged
            StackMode.Checked = False
            AddHandler StackMode.CheckedChanged, AddressOf StackMode_CheckedChanged
            '
            If LangueIHM = "fr" Then
                MessageHV.PContenuMess = "Impossible d'activer cette fonction : désactiver avant la fonction Canal Midi / Couleur Note"
            Else
                MessageHV.PContenuMess = "Impossible to activate this function: deactivate before the Midi Channel/ Color  Note function"
            End If
            MessageHV.PTypBouton = "OK"
            MessageHV.ShowDialog()
        End If
    End Sub
    Private Sub TabControl4_DrawItem(sender As Object, e As DrawItemEventArgs) Handles TabControl4.DrawItem
        ' Couleur ForeColor des titres des onglets -->
        ' SystemBrushes.MenuText donne le ForeColor de l'onglet = noir
        ' SystemBrushes.HighLight donne le ForeColor de l'onglet = blanc
        ' Condition nécessaire : TabControl4.DrawMode = TabDrawMode.OwnerDrawFixed --> présent dans form_load
        '
        Dim paddedBounds As Rectangle = e.Bounds
        paddedBounds.Inflate(0, -2)
        '
        Dim CoulOnglet As New Color
        Dim fnt1 As New Font("Verdana", 8)
        Select Case e.Index
            Case 0 ' hyperarp
                CoulOnglet = Color.Beige
            Case N_PistePianoR1
                CoulOnglet = CoulPRoll1
            Case N_PistePianoR2
                CoulOnglet = CoulPRoll2
            Case N_PistePianoR3
                CoulOnglet = CoulPRoll3
            Case N_PistePianoR4
                CoulOnglet = CoulPRoll4
            Case N_PistePianoR5
                CoulOnglet = CoulPRoll5
            Case N_PistePianoR6
                CoulOnglet = CoulPRoll6
            Case N_PisteDrums
                CoulOnglet = CoulDrumEd
        End Select
        '
        e.Graphics.FillRectangle(New SolidBrush(CoulOnglet), e.Bounds)
        e.Graphics.DrawString(TabControl4.TabPages(e.Index).Text, fnt1, SystemBrushes.MenuText, paddedBounds)
        '
    End Sub

    Private Sub TabControl2_DrawItem(sender As Object, e As DrawItemEventArgs) Handles TabControl2.DrawItem
        ' Couleur ForeColor des titres des onglets -->
        ' SystemBrushes.MenuText donne le ForeColor de l'onglet = noir
        ' SystemBrushes.HighLight donne le ForeColor de l'onglet = blanc
        ' Condition nécessaire : TabControl4.DrawMode = TabDrawMode.OwnerDrawFixed --> présent dans form_load

        Dim paddedBounds As Rectangle = e.Bounds
        paddedBounds.Inflate(0, -2)

        Dim CoulOnglet As New Color
        Dim fnt1 As New System.Drawing.Font("Microsoft Sans Serif", 8.25, FontStyle.Regular)
        '
        Select Case e.Index
            Case 0 ' hyperarp
                CoulOnglet = Color.WhiteSmoke
            Case 1
                CoulOnglet = Color.WhiteSmoke
            Case 2
                CoulOnglet = Color.WhiteSmoke
            Case 3
                CoulOnglet = Color.WhiteSmoke

        End Select
        '
        Select Case e.Index
            Case 0, 1, 2  ' Gammes d'accords et progression
                e.Graphics.FillRectangle(New SolidBrush(Color.LightSteelBlue), e.Bounds) ' backcolor
                e.Graphics.DrawString(TabControl2.TabPages(e.Index).Text, fnt1, SystemBrushes.MenuText, paddedBounds) ' ForeColor
            Case 3, 4       ' Substitution
                e.Graphics.FillRectangle(New SolidBrush(Color.PaleGoldenrod), e.Bounds) ' backcolor
                e.Graphics.DrawString(TabControl2.TabPages(e.Index).Text, fnt1, SystemBrushes.MenuText, paddedBounds) ' ForeColor
            Case 5  ' Emplilement
                e.Graphics.FillRectangle(New SolidBrush(Color.LightGray), e.Bounds)
                e.Graphics.DrawString(TabControl2.TabPages(e.Index).Text, fnt1, SystemBrushes.InfoText, paddedBounds)
            Case 6     ' Vue notes
                e.Graphics.FillRectangle(New SolidBrush(Color.Maroon), e.Bounds) ' backcolor
                e.Graphics.DrawString(TabControl2.TabPages(e.Index).Text, fnt1, SystemBrushes.HighlightText, paddedBounds) ' ForeColor
            Case 7    ' Multicanal
                e.Graphics.FillRectangle(New SolidBrush(Color.Linen), e.Bounds) ' backcolor
                e.Graphics.DrawString(TabControl2.TabPages(e.Index).Text, fnt1, SystemBrushes.MenuText, paddedBounds) ' ForeColor
        End Select
    End Sub
    Private Sub Grid1_KeyUp(Sender As Object, e As KeyEventArgs) Handles Grid1.KeyUp
        ' Couper Jouer Accord
        ' *******************
        OK_KeyDown = True ' pour inc./dec. des racines
        If AccordAEtéJoué = True Then
            CouperJouerAccord()
            AccordAEtéJoué = False
        End If
    End Sub

    Private Sub ComboBox13_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox13.SelectedIndexChanged
        If Not EnChargement Then
            If Trim(Lab_1) <> "" And Trim(Lab_2) <> "" Then
                Maj_Cadence(Trim(Lab_1), Trim(Lab_2))
            End If
        End If
    End Sub

    Private Sub ComboBox9_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox9.SelectedIndexChanged
        If Not EnChargement Then
            Dim i As Integer
            '
            EffacerTonVoisins()
            '
            ' Mise à jour de la tonalité en cours
            ' ***********************************
            For i = 0 To 6
                Grid5.Cell(1, i + 1).Text = TableGlobalAcc(ComboBox9.SelectedIndex, RadioModulat_SelectedIndex, i) 'tbl1(i) ' mise de la gamme de C Maj dans l'onglet Modulation
            Next i
            '
        End If
    End Sub
    Function RadioModulat_SelectedIndex() As Integer
        Dim i As Integer
        For i = 0 To RadioModulat.Count - 1
            If RadioModulat.Item(i).Checked Then
                Exit For
            End If
        Next
        Return i
    End Function

    Private Sub Maj_VueNotes()
        Dim m, t, ct As Integer
        Dim tbl() As String
        Dim i As Integer = 0
        Dim j As Integer = 0
        Dim k As Integer
        Dim _1sep As Integer = 1 ' nombre de ligne de séparation
        Dim _2sep As Integer = 2
        Dim SepH As Integer = 2
        Dim SauvNotes(0 To 6) As String
        '
        Grid6.AutoRedraw = False
        '
        Grid6.Cols = Grid1.Rows
        Grid6.Rows = 20
        '
        For i = 0 To Grid6.Rows - 1
            Grid6.Row(i).Height = 19
        Next
        '
        For i = 0 To Grid6.Cols - 1
            Grid6.Column(i).Width = 50
        Next
        '
        Grid6.Column(0).Alignment = AlignmentEnum.LeftCenter
        Grid6.Column(0).Width = 52
        Grid6.Row(2).Height = SepH ' 2e ligne de séparation
        Grid6.Row(8).Height = SepH ' 2e ligne de séparation
        '
        Grid6.Cell(1, 0).Text = "Position"
        Grid6.Cell(2 + _1sep, 0).Text = "V5"
        Grid6.Cell(3 + _1sep, 0).Text = "V4"
        Grid6.Cell(4 + _1sep, 0).Text = "V3"
        Grid6.Cell(5 + _1sep, 0).Text = "V2"
        Grid6.Cell(6 + _1sep, 0).Text = "V1"
        If LangueIHM = "fr" Then
            Grid6.Cell(7 + _2sep, 0).Text = "Racines"
            Grid6.Cell(8 + _2sep, 0).Text = "Accords"
            Grid6.Cell(9 + _2sep, 0).Text = "Marqueurs"
            Grid6.Cell(10 + _2sep, 0).Text = "Tonalités"
            Grid6.Cell(11 + _2sep, 0).Text = "Modes"
            Grid6.Cell(12 + _2sep, 0).Text = "Gammes"
        Else
            Grid6.Cell(7 + _2sep, 0).Text = "Roots"
            Grid6.Cell(8 + _2sep, 0).Text = "Chords"
            Grid6.Cell(9 + _2sep, 0).Text = "Markers"
            Grid6.Cell(10 + _2sep, 0).Text = "Tonalities"
            Grid6.Cell(11 + _2sep, 0).Text = "Modes"
            Grid6.Cell(12 + _2sep, 0).Text = "Scales"
        End If

        '
        ' Effacer tout le texte et vérouiller les cellules
        ' ************************************************
        Grid6.Range(1, 1, Grid6.Rows - 1, Grid6.Cols - 1).ClearText()
        For i = 0 To Grid6.Cols - 1
            Grid6.Column(i).Locked = True
        Next i
        '
        ' Colorisation
        ' ************
        Grid6.Range(1, 1, 1, Grid6.Cols - 1).BackColor = Color.PaleGoldenrod ' N° mesures

        Grid6.Range(2, 1, 2, Grid6.Cols - 1).BackColor = Color.DarkKhaki ' 1er ligne séparatrice
        '
        Grid6.Range(3, 1, 7, Grid6.Cols - 1).BackColor = Color.Maroon ' Notes  des accords
        Grid6.Range(3, 1, 7, Grid6.Cols - 1).ForeColor = Color.Yellow
        '
        Grid6.Range(8, 1, 8, Grid6.Cols - 1).BackColor = Color.DarkKhaki ' 2e  ligne séparatrice
        '
        Grid6.Range(9, 1, 14, Grid6.Cols - 1).BackColor = Color.PaleGoldenrod ' info complémentaires
        '
        Grid6.Range(9, 1, 9, Grid6.Cols - 1).BackColor = Color.Orange 'Mettre les racines en orange 
        '
        For m = 0 To nbMesures - 1
            For t = 0 To 5
                For ct = 0 To 4
                    If Trim(TableNotesAccordsZ(m, t, ct)) <> "" Then
                        j = j + 1
                        '
                        ' Mise à jour des notes
                        ' *********************
                        For k = 0 To 6
                            SauvNotes(k) = Trim(Grid6.Cell((6 - k) + _1sep, j).Text)
                            Grid6.Cell(k, j).Text = "" ' effacement des notes
                        Next k
                        '
                        Grid6.Cols = Grid6.Cols + 1
                        Grid6.Column(j).Width = 50
                        Grid6.Column(j).Alignment = AlignmentEnum.LeftCenter
                        '
                        Grid6.Cell(0, j).Text = j.ToString
                        tbl = Trim(TableNotesAccordsZ(m, t, ct)).Split
                        For i = 0 To tbl.Count - 1
                            If Trim(SauvNotes(i)) <> Trim(tbl(i)) And Trim(SauvNotes(i)) <> "" Then
                                Grid6.Cell((6 - i) + _1sep, j).BackColor = Color.Beige
                                Grid6.Cell((6 - i) + _1sep, j).ForeColor = Color.Red
                            Else
                                Grid6.Cell((6 - i) + _1sep, j).BackColor = Color.Maroon
                                Grid6.Cell((6 - i) + _1sep, j).ForeColor = Color.Yellow
                            End If
                            Grid6.Cell((6 - i) + _1sep, j).Text = tbl(i)
                        Next
                        '
                        ' Mise à jour autres info : accord, tonalités ...
                        ' ***********************************************
                        Grid6.Cell(1, j).Orientation = FlexCell.TextOrientationEnum.Horizontal
                        Grid6.Cell(1, j).Text = m.ToString() + "." + t.ToString + "." + ct.ToString
                        '
                        Grid6.Cell(7 + _2sep, j).Text = TableEventH(m, t, ct).Racine
                        Grid6.Cell(8 + _2sep, j).Text = TableEventH(m, t, ct).Accord
                        '
                        Grid6.Cell(9 + _2sep, j).ForeColor = Color.Red
                        Grid6.Cell(9 + _2sep, j).Text = TableEventH(m, t, ct).Marqueur
                        '
                        Grid6.Cell(10 + _2sep, j).Text = TableEventH(m, t, ct).Tonalité
                        Grid6.Cell(11 + _2sep, j).Text = TableEventH(m, t, ct).Mode
                        Grid6.Cell(12 + _2sep, j).Text = TableEventH(m, t, ct).Gamme
                    End If
                Next ct
            Next t
        Next m
        '
        Grid6.Cols = Grid6.Cols + 10  ' pour faire en sorte que le scroll horizontal soit toujours apparent
        '

        Grid6.AutoRedraw = True
        Grid6.Refresh()
    End Sub
    Private Sub ComboBox1_Click(sender As Object, e As EventArgs) Handles ComboBox1.Click
        TGrille2 = TGrilleCours.Rien
    End Sub
    Private Sub Grid6_MouseDown(Sender As Object, e As MouseEventArgs) Handles Grid6.MouseDown
        Dim i As Integer
        Dim j As Integer = Grid6.MouseCol
        Dim k = Grid6.Selection.LastCol

        ' paramètre permettant de gérer les CTRL V, C, X de la courbes expression des voicing symphoniques
        ' ************************************************************************************************
        SousCas_OngletCours_Edition = 0

        If j > 0 Then
            ' Calcul 1er ligne
            Dim mesu As String = Grid6.Cell(1, j).Text
            i = Det_LigneMesureGrid1(Trim(mesu))
            If i <> -1 Then
                'Grid1.Range(i, 0, i, Grid1.Cols - 1).SelectCells()
                Grid1.Range(i, 8, i, 8).SelectCells()
                Grid1.Focus()
            End If
        End If

    End Sub

    Private Sub Button3_Click_1(sender As Object, e As EventArgs) Handles Button3.Click
        Vue_Etendue()
    End Sub
    Private Sub Button5_Click_1(sender As Object, e As EventArgs) Handles Button5.Click
        Vue_Harmo()
    End Sub

    Private Sub Grid1_DragEnter(sender As Object, e As DragEventArgs) Handles Grid1.DragEnter
        If (e.Data.GetDataPresent(DataFormats.Text)) Then
            e.Effect = DragDropEffects.Copy
        Else
            e.Effect = DragDropEffects.None
        End If
    End Sub

    Private Sub Grid1_DragDrop(sender As Object, e As DragEventArgs) Handles Grid1.DragDrop
        'Dim a As String = e.Data.GetData(DataFormats.Text).ToString()
        'EcritureGammes(e.Data.GetData(DataFormats.Text).ToString())
    End Sub
    Sub EcritureGammes(Gamme As String)
        Dim m, t, ct, i, j, ligneG1 As Integer
        Dim b As String = Trim(Gamme)
        If ValidationEcr() Then
            If Trim(Gamme) <> "" Then
                i = -1
                ligneG1 = Grid1.ActiveCell.Row
                SélectionLignes = (Grid1.Selection.LastRow - Grid1.Selection.FirstRow) + 1

                Do
                    i = i + 1
                    'i += 1
                    ' Mise à jour Gamme dans Grid1
                    ' ****************************
                    TZAnnulationGrid1.Gammes(i) = Grid1.Cell(ligneG1, 5).Text
                    Grid1.Cell(ligneG1, 5).Text = Trim(Gamme)
                    '
                    ' Effacer les notes de la gamme (ou Accord, ou Mode) dans Grid1
                    ' *************************************************************
                    For j = 9 To nbColonnesGrid1 - 2 ' on met -2 pour ne pas toucher à ola colonne des cherckbox
                        Grid1.Cell(ligneG1, j).Text = ""
                    Next j
                    ' Mise à jour Gamme dans TableEventh et compogrid Grid1
                    ' *****************************************************
                    Position = Grid1.Cell(ligneG1, 1).Text
                    tbl = Split(Position, ".")
                    m = Val(tbl(0))
                    t = Val(tbl(1))
                    ct = Val(tbl(2))

                    TableEventH(m, t, ct).Gamme = Trim(Gamme)
                    Maj_DétailsGamme(ligneG1) ' mise à jour dans compogrid Grid1
                    '
                    ligneG1 = ligneG1 + 1
                    '
                Loop Until i = SélectionLignes - 1 Or ligneG1 > Grid1.Rows - 1 Or Trim(Grid1.Cell(ligneG1, 1).Text) = ""

                Aff_Gamme(Trim(Gamme), "") ' affichage gamme dans le pîano
                EcritUneFois = True
                '
                Maj_PianoRoll()
                Maj_VueNotes()
            End If
        End If
    End Sub

    Function ValidationEcr() As Boolean
        Dim retour As Boolean = False
        If Module1.LangueIHM = "fr" Then
            MessageHV.PTitre = "Avertissement"
            MessageHV.PContenuMess = "Confirmez-vous l'écriture des gammes dans la Grille de Composition ?"
            MessageHV.PTypBouton = "OuiNon"
        Else
            MessageHV.PTitre = "Warning"
            MessageHV.PContenuMess = "Do you confirm the writing of the scales into the Composition Grid?"
            MessageHV.PTypBouton = "OK"
            MessageHV.PTypBouton = "OuiNon"
        End If
        'Cacher_FormTransparents()
        MessageHV.ShowDialog()
        If MessageHV.Sortie <> "Non" Then
            retour = True
        End If
        Return retour
    End Function

    Private Sub InitClavier_Click_1(sender As Object, e As EventArgs) Handles InitClavier.Click
        RAZ_Clavier()
    End Sub

    Private Sub BasseMoins12_CheckedChanged(sender As Object, e As EventArgs) Handles BasseMoins12.CheckedChanged
        If BasseMoins12.Checked Then
            ComboBox11.Enabled = True
            UpDown1.Enabled = True
        Else
            ComboBox11.Enabled = False
            UpDown1.Enabled = False
        End If
        '
        If Not EnChargement Then
            Calcul_AutoVoicingZ()
        End If
    End Sub
    Private Sub QuatreNotes_CheckedChanged(sender As Object, e As EventArgs) Handles QuatreNotes.CheckedChanged
        If QuatreNotes.Checked Then
            ComboBox12.Enabled = True
            UpDown2.Enabled = True
        Else
            ComboBox12.Enabled = False
            UpDown2.Enabled = False
        End If
        '
        If Not EnChargement Then
            Calcul_AutoVoicingZ()
        End If
    End Sub
    Private Sub ComboBox11_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox11.SelectedIndexChanged
        If Not EnChargement Then
            Calcul_AutoVoicingZ()
        End If
    End Sub
    Private Sub ComboBox12_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox12.SelectedIndexChanged
        If Not EnChargement Then
            Calcul_AutoVoicingZ()
        End If
    End Sub
    Private Sub UpDown1_ValueChanged(sender As Object, e As EventArgs) Handles UpDown1.ValueChanged
        If Not EnChargement Then
            Calcul_AutoVoicingZ()
        End If
    End Sub

    Private Sub UpDown2_ValueChanged(sender As Object, e As EventArgs) Handles UpDown2.ValueChanged
        If Not EnChargement Then
            Calcul_AutoVoicingZ()
        End If
    End Sub
    Private Sub Grid6_MouseUp(Sender As Object, e As MouseEventArgs) Handles Grid6.MouseUp
        Select_ColCours_Grid6()
    End Sub

    Private Sub ToolStripLicence_Click(sender As Object, e As EventArgs) Handles ToolStripLicence.Click
        Licence.ShowDialog()
    End Sub

    Public Sub AllerVerPR(compteur As String)
        If OngletCours_Edition > 0 And OngletCours_Edition < 7 Then
            listPIANOROLL.Item(OngletCours_Edition - 1).Aller_Vers_Pour_Transport(compteur)
        End If
    End Sub
    Private Sub Courbexp_SelChange(Sender As Object, e As Grid.SelChangeEventArgs) Handles Courbexp.SelChange
        Tracé_Courbexp()
    End Sub

    Private Sub Courbexp_MouseDown(Sender As Object, e As MouseEventArgs) Handles Courbexp.MouseDown

        ' paramètre permettant de gérer les CTRL V, C, X de la courbes expression des voicing symphoniques
        ' ************************************************************************************************
        SousCas_OngletCours_Edition = 1

        ' RUSTINE 1 : à chaque fois que l'on clique sur une courbe, la cellule active du piano roll devient la cellule (0,0).
        ' Ceci pour éviter le problème suivant : quand le PianoRoll est détaché et qu'une courbe est sélectionné, l'appui sur 
        ' la touche Suppr provoque non seulement la supression de la courbe sélectionné mais aussi la suppression d'une note 
        ' sélectionnée dans le piano roll. Le Bug ne se reproduit pas si le PianoRoll est attaché.

        'Grid1.Cell(0, 0).SetFocus() ' <-- RUSTINE 1
        OngletCours_Edition = N_Courbexp
        '
        '       DerGridCliquée = GridCours.Autre ' pour éviter que la touche suppr active le raccourcis suppr du menu principal
        '       'Orig_PianoR.Orig1 = OrigPianoCourbe.Courbe
        '       'Orig_PianoR.N_Courbe = ind
        '
        Tracé_Courbexp()
    End Sub

    Private Sub Courbexp_KeyUp(Sender As Object, e As KeyEventArgs) Handles Courbexp.KeyUp

        Dim com As FlexCell.Grid = Sender
        Dim ind As Integer = com.Tag

        If (e.KeyCode = Keys.Delete Or e.KeyCode = Keys.Back) Then  ' And Orig_PianoR.Orig1 = OrigPianoCourbe.Courbe Then
            Dim i As Integer = Courbexp.Selection.FirstRow
            Dim j As Integer = Courbexp.Selection.FirstCol
            Dim ii As Integer = Courbexp.Selection.LastRow
            Dim jj As Integer = Courbexp.Selection.LastCol
            '
            Courbexp.AutoRedraw = False
            Courbexp.Range(i, j, ii, jj).BackColor = Color.White
            Courbexp.AutoRedraw = True
            Courbexp.Refresh()
        End If
    End Sub

    Private Sub ActExp_CheckedChanged(sender As Object, e As EventArgs) Handles ActExp.CheckedChanged
        'For i = 3 To (Courbexp.Rows - 1)
        ' Courbexp.AutoRedraw = False
        ' '
        'Courbexp.Row(i).Height = 2
        ' '
        'Courbexp.AutoRedraw = True
        'Courbexp.Refresh()
        'Next
    End Sub
    Private Sub Standard_Click(sender As Object, e As EventArgs) Handles Standard.Click
        Dim i As Integer = NouveauProjet()
    End Sub
    Private Sub Quick_Blues_Click(sender As Object, e As EventArgs) Handles Quick_Blues.Click
        Dim i As Integer = NouveauProjet()
        If i <> DialogResult.Cancel Then
            QBlues2.ShowDialog()
        End If
        Me.BringToFront()
    End Sub
    Public Sub ECR_Acc(Acc As String, Degré As Integer, Colonne As Integer, Tona As String, Mode As String, Gamme As String)
        Dim m As Integer = Colonne


        ' Maj des données de l'accord dans TableEventh
        ' ********************************************
        TableEventH(m, 1, 1).Tonalité = Tona
        TableEventH(m, 1, 1).Mode = Mode '
        TableEventH(m, 1, 1).Gamme = Gamme
        TableEventH(m, 1, 1).Accord = Trim(Acc)
        TableEventH(m, 1, 1).NumAcc = Colonne
        TableEventH(m, 1, 1).Position = Str(Colonne) + ".1" + ".1"
        TableEventH(m, 1, 1).Degré = Degré - 1
        TableEventH(m, 1, 1).Ligne = Colonne
        TableEventH(m, 1, 1).Racine = "b1"
        TableEventH(m, 1, 1).Vel = "100"
        '
        ' Mise à jour des Grilles de Form1 : Grid1, Grid2 et Grid3
        ' ********************************************************
        Grid2.AutoRedraw = False
        Grid3.AutoRedraw = False
        '
        ' Mise à jour de Grid2
        Grid2.Cell(1, m).Text = Trim(Acc)
        ' mise à jour des couleurs de Grid2 et Grid3
        i = Det_IndexGrid3_De_ColGrid2(m) ' Det_IndexGrid3_De_ColGrid2(Grid2.ActiveCell.Col)
        If i <> 1 Then                '
            Grid3.Cell(2, i).BackColor = Couleur_Accord_Grid3
            Grid3.Cell(2, i).ForeColor = Color.White
            a = TableEventH(m, 1, 1).Tonalité 'Det_TonalitédDuPremierAccordDsMesure(m)
            a = Det_RelativeMajeure2(a) ' si la tonalité est mineure alors on affiche la couleur de la relative majeure
            tbl = Split(a)
            Grid2.Cell(1, m).BackColor = DicoCouleur.Item(Trim(tbl(0))) ' la couleur est fonction de la tonalité
            Grid2.Cell(1, m).ForeColor = DicoCouleurLettre.Item(tbl(0))
            '
        End If
        '
        Grid2.AutoRedraw = True
        Grid3.AutoRedraw = True
        Grid2.Refresh()
        Grid3.Refresh()
        '
    End Sub
    Function Assist_Tonalité2(listNotes As List(Of String)) As List(Of String)

        Dim listNotes2 As New List(Of String)
        Dim listInterval As New List(Of Integer)
        Dim ListResult As New List(Of String)
        Dim LModes As New List(Of String)

        ' Version 1 de la liste avec Blues 2
        ' **********************************
        'Dim modes As Dictionary(Of String, List(Of Integer)) = New Dictionary(Of String, List(Of Integer)) From {
        '{"Maj", New List(Of Integer) From {0, 2, 4, 5, 7, 9, 11}},
        '{"MinH", New List(Of Integer) From {0, 2, 3, 5, 7, 8, 11}},
        '{"MinM", New List(Of Integer) From {0, 2, 3, 5, 7, 9, 11}},
        '{"PentaMin", New List(Of Integer) From {0, 3, 5, 7, 10}},
        '{"Blues", New List(Of Integer) From {0, 3, 5, 6, 7, 10}},
        '{"Blues2", New List(Of Integer) From {0, 2, 3, 4, 5, 6, 7, 9, 10}}
        '}
        ' Version 1 de la liste sans Blues 2
        ' **********************************
        Dim modes As Dictionary(Of String, List(Of Integer)) = New Dictionary(Of String, List(Of Integer)) From {
        {"Maj", New List(Of Integer) From {0, 2, 4, 5, 7, 9, 11}},
        {"MinH", New List(Of Integer) From {0, 2, 3, 5, 7, 8, 11}},
        {"MinM", New List(Of Integer) From {0, 2, 3, 5, 7, 9, 11}},
        {"PentaMin", New List(Of Integer) From {0, 3, 5, 7, 10}},
        {"Blues", New List(Of Integer) From {0, 3, 5, 6, 7, 10}}}


        Dim LN As New List(Of String) From {"c", "c#", "d", "d#", "e", "f", "g", "g#", "a", "a#", "b"}
        Dim LN2 As New List(Of String) From {"c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b", "c", "c#", "d", "d#", "e", "f", "f#", "g", "g#", "a", "a#", "b"}
        Dim Gamme As New List(Of String)
        Dim Result As New List(Of String)
        Dim ResultPerti As New List(Of Integer)

        'Maj_TabNotes_Minus("#")
        '
        For Each clef As KeyValuePair(Of String, List(Of Integer)) In modes
            For Each Ton As String In LN
                For Each interv As Integer In modes(clef.Key)
                    i = LN2.IndexOf(Ton)
                    Gamme.Add(LN2(i + interv))
                Next
                If AppartientA3(listNotes, Gamme) Then
                    Result.Add(Ton.ToUpper + " " + clef.Key)
                    ResultPerti.Add(Pertinence(listNotes, Gamme))
                End If
                Gamme.Clear()
            Next
        Next
        ' 
        Return Result
    End Function
    Function AppartientA3(ByVal Linterv As List(Of String), ByVal LMode As List(Of String)) As Boolean
        Dim flag As Boolean = True
        For Each oo As String In Linterv
            If Not LMode.Contains(oo) Then
                flag = False
                Exit For
            End If
        Next
        Return flag
    End Function
    Function Pertinence(ByVal Linterv As List(Of String), ByVal LMode As List(Of String)) As Integer
        Dim Perti As Integer = 0
        Dim flag As Boolean = True
        For Each oo As String In Linterv
            If LMode.Contains(oo) Then
                Perti = Perti + 1
            End If
        Next
        Return Perti
    End Function

    Private Sub Button9_Click_1(sender As Object, e As EventArgs)
        Dim listBeat As New List(Of Boolean)
        Dim listPremTemps As New List(Of Boolean)

        For i = 0 To (nbMesures * 16)
            listBeat.Add(False)
            listPremTemps.Add(False)
        Next
        ' mesure à 7/8
        ' ************
        Dim num As Integer = 7
        Dim denom As Integer = 8
        Dim cst As Integer
        ' mesure à 9/4
        ' ************
        num = 9
        denom = 4
        cst = denom
        If denom = 8 Then cst = 2

        ' Marquage dénominateur
        For i = 0 To listBeat.Count - 1 Step cst
            listBeat(i) = True
        Next i
        ' Marquage numérateur
        For i = 0 To listPremTemps.Count - 1 Step (num * cst) ' 7 croches *2 on multiplie par deux car ce sont des croches
            listPremTemps(i) = True
        Next i
        '
        ' mesure à 12/8
        ' ************
        num = 12
        denom = 8
        cst = denom
        If denom = 8 Then cst = 2

        ' Marquage dénominateur
        For i = 0 To listBeat.Count - 1 Step cst
            listBeat(i) = True
        Next i
        ' Marquage numérateur
        For i = 0 To listPremTemps.Count - 1 Step (num * cst) ' 7 croches *2 on multiplie par deux car ce sont des croches
            listPremTemps(i) = True
        Next i
        '
    End Sub
    Private Sub ToolStripMenuItem9_Click(sender As Object, e As EventArgs)
        ExportChordsAsMarkers()
    End Sub
    Private Sub AccordsCommeMarqueursToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AccordsCommeMarqueursToolStripMenuItem.Click
        ExportChordsAsMarkers()
    End Sub
    Private Sub MarqueursToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MarqueursToolStripMenuItem.Click
        ExportMarqueurs()
    End Sub

    Private Sub GammesEnTantQueMarqueursToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles GammesEnTantQueMarqueursToolStripMenuItem.Click
        ExportScalesAsMarkers()
    End Sub

    Private Sub ToolStripMenuItem12_Click_1(sender As Object, e As EventArgs) Handles Retablir.Click
        Select Case OngletCours_Edition
            Case N_PisteAcc ' Onglet HyperArp

            Case N_PistePianoR1, N_PistePianoR2, N_PistePianoR3, N_PistePianoR4, N_PistePianoR5, N_PistePianoR6, N_PistePianoR7, N_PistePianoR8
                listPIANOROLL.Item(OngletCours_Edition - 1).restit_ctrly()
            Case N_PisteDrums

        End Select
        Calcul_AutoVoicingZ()
    End Sub
    Private Sub CheckBox1_CheckedChanged(sender As Object, e As EventArgs) Handles CheckBox1.CheckedChanged
        If StackMode.Checked Then
            RemoveHandler CheckBox1.CheckedChanged, AddressOf CheckBox1_CheckedChanged
            CheckBox1.Checked = False
            AddHandler CheckBox1.CheckedChanged, AddressOf CheckBox1_CheckedChanged

            If LangueIHM = "fr" Then
                MessageHV.PContenuMess = "Impossible d'activer cette fonction : désactiver avant la fonction Voicing Orchestral"
            Else
                MessageHV.PContenuMess = "Impossible to activate this function: deactivate before Orchestral Voicing function"
            End If
            MessageHV.PTypBouton = "OK"
            MessageHV.ShowDialog()
        End If
    End Sub

    Private Sub ToolStripMenuItem12_Click_2(sender As Object, e As EventArgs) Handles ToolStripMenuItem12.Click
        Dim dateMaintenant As String = Now()
        Dim a As String = Me.Text + " - " + dateMaintenant
        Dim ligne As Integer = 0
        Dim i, jj As Integer
        Dim grdPrint As New FlexCell.Grid


        With grdPrint
            .BorderStyle = BorderStyleEnum.FixedSingle
            .BorderColor = Color.Blue
            '
            ' Construction de la grille d'impression
            ' **************************************
            .Cols = 7
            .Rows = 4
            .FixedCols = 1
            .FixedRows = 1
            .Cell(0, 1).Text = "Position"
            If LangueIHM = "fr" Then
                .Cell(0, 2).Text = "Marqueurs"
                .Cell(0, 3).Text = "Tonalités"
                .Cell(0, 4).Text = "Accords"
                .Cell(0, 5).Text = "Gammes"
                .Cell(0, 6).Text = "Degrés"
            Else
                .Cell(0, 2).Text = "Markers"
                .Cell(0, 3).Text = "Keys"
                .Cell(0, 4).Text = "Chords"
                .Cell(0, 5).Text = "Scales"
                .Cell(0, 6).Text = "Degrees"
            End If
            '
            ' ligne de titre
            ' **************
            .Row(1).Height = 40
            .Cell(1, 1).Text = Me.Text
            .Cell(1, 1).Alignment = AlignmentEnum.CenterCenter
            .Range(1, 1, 1, 6).Merge()
            '
            ' Ligne de date
            ' *************
            .Row(2).Height = 60
            .Cell(2, 1).Text = Now()
            .Cell(2, 1).Alignment = AlignmentEnum.LeftCenter
            .Range(2, 1, 2, 6).Merge()
            ligne = 3
            '
            ' Copie des données
            ' *****************
            ' comptage des lignes à recopier + insertion
            ' ------------------------------------------
            For i = 0 To Grid1.Rows - 1
                If Trim(Grid1.Cell(i, 1).Text) = "" Then
                    Exit For
                End If
            Next
            .InsertRow(ligne, i)
            '
            ' copie des données
            ' -----------------
            For i = 3 To .Rows - 1
                For jj = 1 To 6
                    .Row(i).Height = 20
                    .Column(jj).Width = 101
                    .Cell(i, jj).Text = Grid1.Cell(i - 2, jj).Text
                Next
            Next
            '
            ' Affichage de la ¨Preview
            ' ************************
            grdPrint.PrintPreview(True, True, True, 1, 0, 0, 0, 0)
        End With
    End Sub

    Private Sub ProjetToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ProjetToolStripMenuItem.Click
        Dim sauvBoucle As Boolean = Transport.Répéter.Checked


        Me.Cursor = Cursors.WaitCursor

        '
        ' Mise à jour préalable des Locateurs gauche et droite
        ' *****************************************************
        Me.Terme.BackColor = Color.White
        Transport.Début.Value = 1
        Transport.Terme.Value = nbMesures
        TermeFin = Transport.Terme.Value
        '


        ' Annulation de la boucle (répétition) si elle existe
        ' ***************************************************
        Transport.Répéter.Checked = False

            ' Lancement de l'export MIDI
            ' **************************
            MessageHV.PTypBouton = "OuiNon"
            If LangueIHM = "fr" Then
                MessageHV.PTitre = "Export CTRL"
                MessageHV.PContenuMess = "Souhaitez-vous exporter les contrôleurs MIDI (Volume, Pan, PRG) dans le fichier MIDI ?"
                MessageHV.PTitre = "CTRL Export"
                MessageHV.PContenuMess = "Do you wish to export MIDI controlers (Volume, Pan, PRG) into the MIDI file  ?"
            End If
            'Cacher_FormTransparents()
            MessageHV.ShowDialog()
            If MessageHV.PSortie = "Oui" Then
                ExporterCTRL = True
            Else
                ExporterCTRL = False
            End If
            Calcul_AutoVoicingZ()
            ExportMIDI()
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default
            '
            ' Restitution de l'état de la case Boucle dans la barre de transport
            ' ******************************************************************
            Transport.Répéter.Checked = sauvBoucle

        Me.Cursor = Cursors.Default
    End Sub

    Private Sub AccordsEnTantQueMarqueurToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AccordsEnTantQueMarqueurToolStripMenuItem.Click
        ExportChordsAsMarkers()
    End Sub

    Private Sub GammesEnTantQueMarqueursToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles GammesEnTantQueMarqueursToolStripMenuItem1.Click
        ExportScalesAsMarkers()
    End Sub

    Private Sub TMarqueur_TextChanged(sender As Object, e As EventArgs) Handles TMarqueur.TextChanged

    End Sub

End Class

